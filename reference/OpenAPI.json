{
  "openapi": "3.1.0",
  "info": {
    "title": "Voucherify API",
    "version": "2018-08-01",
    "description": "Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.",
    "contact": {
      "name": "Voucherify Team",
      "url": "https://www.voucherify.io/contact-support",
      "email": "support@voucherify.io"
    },
    "termsOfService": "https://www.voucherify.io/legal/subscription-agreement",
    "license": {
      "name": "MIT",
      "url": "https://github.com/voucherifyio/voucherify-js-sdk/blob/main/LICENSE"
    },
    "summary": "Voucherify is an API-first promotion engine "
  },
  "servers": [
    {
      "url": "https://api.voucherify.io",
      "description": "EU"
    },
    {
      "url": "https://us1.api.voucherify.io",
      "description": "US"
    },
    {
      "description": "AS",
      "url": "https://as1.api.voucherify.io"
    },
    {
      "url": "https://api.voucherify.io/client",
      "description": "Client EU"
    },
    {
      "url": "https://us1.api.voucherify.io/client",
      "description": "Client US"
    },
    {
      "url": "https://as1.api.voucherify.io/client",
      "description": "Client AS"
    },
    {
      "url": "https://api.voucherify.io/v1",
      "description": "Sandbox"
    },
    {
      "url": "https://dev.api.voucherify.io/v1",
      "description": "Development environment"
    }
  ],
  "components": {
    "securitySchemes": {},
    "parameters": {
      "code": {
        "name": "code",
        "in": "path",
        "schema": {
          "type": "string",
          "example": "7fjWdr"
        },
        "description": "A **code** that identifies the voucher.",
        "required": true
      },
      "X-App-Id": {
        "name": "X-App-Id",
        "in": "header",
        "required": true,
        "schema": {
          "type": "string"
        },
        "description": "Application ID"
      },
      "X-App-Token": {
        "name": "X-App-Token",
        "in": "header",
        "required": true,
        "schema": {
          "type": "string"
        },
        "description": "Application Secret Key"
      },
      "X-Client-Token": {
        "name": "X-Client-Token",
        "in": "header",
        "required": true,
        "schema": {
          "type": "string"
        },
        "description": "Application Secret Key"
      },
      "X-Client-Application-Id": {
        "name": "X-Client-Application-Id",
        "in": "header",
        "required": true,
        "schema": {
          "type": "string"
        },
        "description": "Application ID"
      },
      "session_key": {
        "name": "session_key",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "example": "ssn_yQGMTeKBSw8OOuFPwlBEjzGy8d8VA9Ts"
        },
        "description": "A unique session identifier."
      },
      "force": {
        "name": "force",
        "in": "query",
        "required": false,
        "schema": {
          "type": "boolean"
        },
        "description": "If this flag is set to `true`, the voucher will be removed permanently. It means that afterwards, the user will be able to create the next voucher with the same code."
      },
      "file": {
        "name": "file",
        "in": "header",
        "required": true,
        "schema": {
          "example": "file=@/path/to/vouchers.csv"
        },
        "description": "Path to CSV file."
      },
      "audienceRulesOnly": {
        "name": "audienceRulesOnly",
        "in": "query",
        "required": false,
        "schema": {
          "type": "boolean"
        },
        "description": "This parameter set to true will ask only for verifying vouchers' validation rules only against conditions applied to audiences' attributes (belonging into segment and Customer metadata)"
      },
      "order": {
        "name": "order",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "created_at",
            "-created_at",
            "updated_at",
            "-updated_at",
            "type",
            "-type",
            "code",
            "-code",
            "campaign",
            "-campaign",
            "category",
            "-category"
          ]
        },
        "description": "Sorts the results using one of the filtering options, where the dash `-` means sorting in a descending order."
      },
      "limit": {
        "name": "limit",
        "in": "query",
        "required": false,
        "schema": {
          "type": "integer",
          "maximum": 100,
          "minimum": 1
        },
        "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100 items."
      },
      "campaignId": {
        "name": "campaignId",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "example": "camp_Pfja7X91b1GoyH5wnpzCwlP3"
        },
        "description": "Assigned by the Voucherify API, identifies the campaign."
      },
      "page": {
        "name": "page",
        "in": "query",
        "required": false,
        "schema": {
          "type": "integer",
          "example": 2,
          "minimum": 1
        },
        "description": "Which page of results to return"
      },
      "category": {
        "name": "category",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "example": "New Customers"
        },
        "description": "Limit search results to vouchers within the specified category"
      },
      "campaignid_": {
        "name": "campaignid",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "example": "camp_Pfja7X91b1GoyH5wnpzCwlP3"
        },
        "description": "Limit search results to vouchers within the specified campaign"
      },
      "customer": {
        "name": "customer",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "example": "cust_nk0N1uNQ1YnupAoJGOgvsODC"
        },
        "description": "A tracking identifier of a customer who is the holder of the vouchers. It can be an `id` generated by Voucherify or the `source_id`. Remember to use the proper URL escape codes if the `source_id` contains special characters."
      },
      "campaign": {
        "name": "campaign",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "example": "Gift Card Campaign"
        },
        "description": "A unique campaign name, identifies the parent campaign."
      },
      "created_at": {
        "name": "created_at",
        "in": "query",
        "required": false,
        "schema": {
          "type": "object",
          "properties": {
            "before": {
              "type": "string",
              "example": "2021-12-22T10:13:06.487Z",
              "description": "Timestamp representing the date and time before the voucher was created in ISO 8601 format.",
              "format": "date-time"
            },
            "after": {
              "type": "string",
              "example": "2021-12-22T10:13:06.487Z",
              "description": "Timestamp representing the date and time after the voucher was created in ISO 8601 format.",
              "format": "date-time"
            }
          }
        },
        "description": "A filter on the list based on the object `created_at` field. The value is a dictionary with the following options: `before`, `after`. A date value must be presented in ISO 8601 format (`2016-11-16T14:14:31Z` or `2016-11-16`). An example: `[created_at][before]=2017-09-08T13:52:18.227Z`",
        "style": "deepObject",
        "explode": true
      },
      "created_at[before]": {
        "name": "created_at[before]",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string"
        },
        "description": " Return values where the resource's `created_at` field is before this date. A date value must be presented in ISO 8601 format (`2016-11-16T14:14:31Z` or `2016-11-16`)."
      },
      "created_at[after]": {
        "name": "created_at[after]",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string"
        },
        "description": " Return values where the resource's `created_at` field is after this date. A date value must be presented in ISO 8601 format (`2016-11-16T14:14:31Z` or `2016-11-16`)."
      },
      "updated_at": {
        "name": "updated_at",
        "in": "query",
        "required": false,
        "schema": {
          "type": "object",
          "properties": {
            "before": {
              "type": "string",
              "example": "2021-12-22T10:13:06.487Z",
              "description": "Timestamp representing the date and time before the voucher was updated in ISO 8601 format.",
              "format": "date-time"
            },
            "after": {
              "type": "string",
              "example": "2021-12-22T10:13:06.487Z",
              "description": "Timestamp representing the date and time after the voucher was updated in ISO 8601 format.",
              "format": "date-time"
            }
          }
        },
        "description": "A filter on the list based on the object `updated_at` field. The value is a dictionary with the following options: `before`, `after`. A date value must be presented in ISO 8601 format (`2016-11-16T14:14:31Z` or `2016-11-16`). An example: `[updated_at][before]=2017-09-08T13:52:18.227Z`",
        "style": "deepObject",
        "explode": true
      },
      "updated_at[after]": {
        "name": "updated_at[after]",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string"
        },
        "description": " Return values where the resource's `updated_at` field is after this date. A date value must be presented in ISO 8601 format (`2016-11-16T14:14:31Z` or `2016-11-16`)."
      },
      "updated_at[before]": {
        "name": "updated_at[before]",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string"
        },
        "description": " Return values where the resource's `updated_at` field is before this date. A date value must be presented in ISO 8601 format (`2016-11-16T14:14:31Z` or `2016-11-16`)."
      },
      "campaign_id": {
        "name": "campaign_id",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "example": "camp_Pfja7X91b1GoyH5wnpzCwlP3"
        },
        "description": "Assigned by the Voucherify API, identifies the campaign."
      },
      "campaign_type": {
        "name": "campaign_type",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "PROMOTION",
            "GIFT_VOUCHERS",
            "REFERRAL_PROGRAM",
            "DISCOUNT_COUPONS"
          ]
        },
        "description": "This attribute allows filtering by campaign type."
      }
    },
    "schemas": {
      "1_obj_voucher_object": {
        "title": "VoucherObject",
        "type": "object",
        "description": "This is an object representing a voucher.",
        "examples": [],
        "x-tags": [
          "VOUCHERIFY API"
        ],
        "properties": {
          "id": {
            "type": "string",
            "example": "v_mkZN9v7vjYUadXnHrMza8W5c34fE5KiV",
            "description": "Assigned by the Voucherify API, identifies the voucher."
          },
          "code": {
            "type": "string",
            "example": "WVPblOYX",
            "description": "A code that identifies a voucher. Pattern can use all letters of the English alphabet, Arabic numerals, and special characters."
          },
          "campaign": {
            "type": "string",
            "example": "Gift Card Campaign",
            "description": "A unique campaign name, identifies the voucher's parent campaign.",
            "default": null
          },
          "campaign_id": {
            "type": "string",
            "example": "camp_FNYR4jhqZBM9xTptxDGgeNBV",
            "description": "Assigned by the Voucherify API, identifies the voucher's parent campaign.",
            "default": null
          },
          "category": {
            "type": "string",
            "default": null,
            "description": "Tag defining the category that this voucher belongs to. Useful when listing vouchers using the List Vouchers endpoint."
          },
          "type": {
            "type": "string",
            "enum": [
              "GIFT_VOUCHER",
              "DISCOUNT_VOUCHER",
              "LOYALTY_CARD"
            ],
            "description": "Defines the type of voucher. "
          },
          "discount": {
            "default": null,
            "oneOf": [
              {
                "$ref": "#/components/schemas/1_obj_voucher_object_discount_amount"
              },
              {
                "$ref": "#/components/schemas/1_obj_voucher_object_discount_percentage"
              },
              {
                "$ref": "#/components/schemas/1_obj_voucher_object_discount_fixed"
              },
              {
                "$ref": "#/components/schemas/1_obj_voucher_object_discount_unit_one"
              },
              {
                "$ref": "#/components/schemas/1_obj_voucher_object_discount_unit_multiple"
              },
              {
                "$ref": "#/components/schemas/1_obj_voucher_object_discount_shipping"
              }
            ],
            "description": "Object representing discount parameters. Child attributes are present only if `type` is `DISCOUNT_VOUCHER`. Defaults to `null`. Type of discount:\n- `AMOUNT`\n- `PERCENT`\n- `UNIT`\n- `FIXED`\n\n A Free Shipping discount is a special instance of the  `UNIT` type discount."
          },
          "gift": {
            "default": null,
            "type": "object",
            "description": "Object representing gift parameters. Child attributes are present only if `type` is `GIFT_VOUCHER`. Defaults to `null`.",
            "properties": {
              "amount": {
                "type": "integer",
                "example": 10000,
                "description": "Total gift card income. Value is multiplied by 100 to precisely represent 2 decimal places. For example, $100 amount is written as 10000."
              },
              "balance": {
                "type": "integer",
                "example": 500,
                "description": "Available funds. Value is multiplied by 100 to precisely represent 2 decimal places. For example, $100 amount is written as 10000."
              },
              "effect": {
                "type": "string",
                "enum": [
                  "APPLY_TO_ORDER",
                  "APPLY_TO_ITEMS"
                ],
                "description": "Defines how the credits are applied to the customer's order"
              }
            }
          },
          "loyalty_card": {
            "default": null,
            "type": "object",
            "description": "Object representing loyalty card parameters. Child attributes are present only if `type` is `LOYALTY_CARD`. Defaults to `null`.",
            "properties": {
              "points": {
                "type": "integer",
                "example": 7000,
                "description": "Total points incurred over lifespan of loyalty card."
              },
              "balance": {
                "type": "integer",
                "example": 6970,
                "description": "Points available for reward redemption."
              }
            }
          },
          "start_date": {
            "type": "string",
            "example": "2021-12-01T00:00:00.000Z",
            "format": "date-time",
            "description": "Start date defines when the code starts to be active. Activation timestamp in ISO 8601 format. Voucher is *inactive before* this date. "
          },
          "expiration_date": {
            "type": "string",
            "example": "2021-12-31T00:00:00.000Z",
            "format": "date-time",
            "description": "Expiration date defines when the code expires. Expiration timestamp in ISO 8601 format.  Voucher is *inactive after* this date."
          },
          "validity_timeframe": {
            "type": "object",
            "description": "Set recurrent time periods when the voucher is valid. For example, valid for 1 hour every other day.`start_date` **required** when including the `validity_timeframe`.",
            "default": null,
            "properties": {
              "duration": {
                "type": "string",
                "example": "PT1H",
                "description": "Defines the amount of time the voucher will be active in ISO 8601 format. For example, a voucher with a `duration` of `PT1H` will be valid for a duration of one hour."
              },
              "interval": {
                "type": "string",
                "example": "P2D",
                "description": "Defines the intervening time between two time points in ISO 8601 format, expressed as a duration. For example, a voucher with an `interval` of `P2D` will be active every other day."
              }
            }
          },
          "validity_day_of_week": {
            "type": "array",
            "default": null,
            "enum": [
              [
                0
              ],
              [
                1
              ],
              [
                2
              ],
              [
                3
              ],
              [
                4
              ],
              [
                5
              ],
              [
                6
              ]
            ],
            "description": "Integer array corresponding to the particular days of the week in which the voucher is valid.\n\n- `0`  Sunday  \n- `1`  Monday  \n- `2`  Tuesday  \n- `3`  Wednesday  \n- `4`  Thursday  \n- `5`  Friday  \n- `6`  Saturday  ",
            "items": {
              "type": "integer",
              "example": "[ 1, 2 ]"
            }
          },
          "active": {
            "type": "boolean",
            "description": "A flag to toggle the voucher on or off. You can disable a voucher even though it's within the active period defined by the `start_date` and `expiration_date`.  \n\n- `true` indicates an *active* voucher\n- `false` indicates an *inactive* voucher"
          },
          "additional_info": {
            "type": "string",
            "default": null,
            "description": "An optional field to keep any extra textual information about the code such as a code description and details."
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the code. A set of key/value pairs that you can attach to a voucher object. It can be useful for storing additional information about the voucher in a structured format."
          },
          "assets": {
            "type": "object",
            "description": "Stores links to images of QR and barcode that correspond to an encrypted voucher code.",
            "properties": {
              "qr": {
                "type": "object",
                "description": "Stores Quick Response (QR) representation of encrypted code.",
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "U2FsdGVkX19ucFhvVmBVpVYG5KoswTsjSIaqoKg5L9ie4BK+t4pp7U7oFzjGJzj9q/bmuMOj9mEFiVKDMIkSaruKedMvHbKoPX5Sg+BaZk5QwXMf8k/OzSlOEVybpwSq+AiqPoNtjeuqtIgkDyvT6Q==",
                    "description": "Encrypted voucher code id"
                  },
                  "url": {
                    "type": "string",
                    "example": "https://dev.dl.voucherify.io/api/v1/assets/qr/U2FsdGVkX19ucFhvVmBVpVYG5KoswTsjSIaqoKg5L9ie4BK%2Bt4pp7U7oFzjGJzj9q%2FbmuMOj9mEFiVKDMIkSaruKedMvHbKoPX5Sg%2BBaZk5QwXMf8k%2FOzSlOEVybpwSq%2BAiqPoNtjeuqtIgkDyvT6Q%3D%3D",
                    "description": "URL to QR code  \n\n*Optional:* Attach query parameters to base URL to customize the image of the encrypted voucher code.  \n\n- `size`: integer value from `1` to `100`  \n- `format`: string, either `png` (default) or `svg`"
                  }
                }
              },
              "barcode": {
                "type": "object",
                "description": "Stores barcode representation of encrypted code.",
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "U2FsdGVkX19eJhGfWwUrH9+tulBkON+AnMktic+N6CVWzZ9+fHVxuVx22WakrzxiWXy0skuvvEHSeZIw9HlgyIJ+kJ1iPdUKpyENuNYJKzoZlO0mmTf6WQM6/pFs61apEn9SJx32ttCF6d3oxKISQQ==",
                    "description": "Encrypted voucher code id"
                  },
                  "url": {
                    "type": "string",
                    "example": "https://dev.dl.voucherify.io/api/v1/assets/barcode/U2FsdGVkX19eJhGfWwUrH9%2BtulBkON%2BAnMktic%2BN6CVWzZ9%2BfHVxuVx22WakrzxiWXy0skuvvEHSeZIw9HlgyIJ%2BkJ1iPdUKpyENuNYJKzoZlO0mmTf6WQM6%2FpFs61apEn9SJx32ttCF6d3oxKISQQ%3D%3D",
                    "description": "URL to barcode  \n\n*Optional:* Attach query parameters to base URL to customize the image of the encrypted voucher code.  \n\n- `size`: integer value from `1` to `100`  \n- `format`: string, either `png` (default) or `svg`"
                  }
                }
              }
            }
          },
          "is_referral_code": {
            "type": "boolean",
            "description": "Flag indicating whether this voucher is a referral code."
          },
          "created_at": {
            "type": "string",
            "example": "2021-12-22T10:13:06.487Z",
            "description": "Timestamp representing the date and time when the voucher was created in ISO 8601 format.",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "example": "2021-12-22T10:14:45.316Z",
            "format": "date-time",
            "description": "Timestamp representing the date and time when the voucher was last updated in ISO 8601 format."
          },
          "validation_rules_assignments": {
            "type": "object",
            "description": "Stores information about validation rules assigned to the voucher.",
            "properties": {
              "object": {
                "type": "string",
                "description": "The type of object represented is by default `list`.",
                "default": "list"
              },
              "data_ref": {
                "type": "string",
                "description": "Identifies the name of the attribute that contains the array of validation rule assignments.",
                "default": "data"
              },
              "data": {
                "type": "array",
                "description": "Array of validation rule objects. Each validation rule object contains details about the rule.",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": "asgm_N7t39epaQR2SkQcW",
                      "description": "Assigned by the Voucherify API, identifies the validation rule assignment."
                    },
                    "rule_id": {
                      "type": "string",
                      "example": "val_ssbxf1L9aKri",
                      "description": "Assigned by the Voucherify API, identifies the validation rule."
                    },
                    "related_object_id": {
                      "type": "string",
                      "example": "camp_AaP9MC1Y0GpBII84UTIuasvb",
                      "description": "Id of the object from which the rule originates, can be the id of the `voucher` itself or its parent `campaign`."
                    },
                    "related_object_type": {
                      "type": "string",
                      "example": "campaign",
                      "description": "Which object does the rule originate from: the  `voucher` itself or inherited from its parent `campaign`."
                    },
                    "created_at": {
                      "type": "string",
                      "example": "2022-02-14T15:12:06.817Z",
                      "description": "Timestamp representing the date and time when the validation rule was created in ISO 8601 format."
                    },
                    "object": {
                      "type": "string",
                      "default": "validation_rules_assignment",
                      "description": "The type of object represented is by default `validation_rules_assignment`"
                    }
                  }
                }
              },
              "total": {
                "type": "integer",
                "description": "Total number of validation rules assigned to the voucher."
              }
            }
          },
          "redemption": {
            "type": "object",
            "description": "Stores a summary of redemptions that have been applied to the voucher.",
            "properties": {
              "quantity": {
                "type": "integer",
                "default": null,
                "description": "How many times a voucher can be redeemed. A `null` value means unlimited."
              },
              "redeemed_quantity": {
                "type": "integer",
                "example": 1,
                "description": "How many times a voucher has already been redeemed."
              },
              "redeemed_amount": {
                "type": "integer",
                "example": 100000,
                "description": "Total Amount redeemed by the voucher. Value is multiplied by 100 to precisely represent 2 decimal places. For example, $100 balance is written as 10000."
              },
              "object": {
                "type": "string",
                "default": "list",
                "description": "The type of object represented is by default `list`. To get this list, you need to make a call to the endpoint returned in the url attribute."
              },
              "url": {
                "type": "string",
                "example": "/v1/vouchers/WVPblOYX/redemptions?page=1&limit=10",
                "description": "The endpoint where this list of redemptions can be accessed using a GET method. `/v1/vouchers/{voucher_code}/redemptions`"
              }
            }
          },
          "publish": {
            "type": "object",
            "description": "This object stores a summary of publish events: an events counter and an endpoint which can be called to return details of each event.  A publication is required for loyalty cards and referral codes. This object gets updated whenever a voucher has been published. Publication means assigning a code to a particular customer. Typically, a publication is made by distributing your codes to your customers, e.g. through Export to MailChimp or publish voucher API method. \n\n<!-- title: My Table Title -->\n\n| Required | Optional |\n| -------- | :------: |\n| `type`:`LOYALTY_CARD` |  `type`:`DISCOUNT_VOUCHER`   | \n| `is_referral_code`:`true`      |    `type`:`GIFT_VOUCHER`   |\n",
            "properties": {
              "object": {
                "type": "string",
                "default": "list",
                "description": "The type of object represented is by default `list`. To get this list, you need to make a call to the endpoint returned in the `url` attribute."
              },
              "count": {
                "type": "integer",
                "example": 0,
                "description": "Publication events counter."
              },
              "url": {
                "type": "string",
                "example": "/v1/vouchers/WVPblOYX/publications?page=1&limit=10",
                "description": "The endpoint where this list of publications can be accessed using a GET method. `/v1/vouchers/{voucher_code}/publications`"
              }
            }
          },
          "object": {
            "type": "string",
            "description": "The type of object represented by JSON. Default is `voucher`.",
            "default": "voucher"
          }
        }
      },
      "1_req_vouchers__POST": {
        "title": "req_vouchers__POST",
        "type": "object",
        "description": "Request body schema for creating a voucher.",
        "examples": [
          {
            "category": "New Customers",
            "code": "WELCOME-COUPON",
            "type": "DISCOUNT_VOUCHER",
            "campaign_id": "camp_Y6dLsYIZloGqP8izufXY6SSJ",
            "discount": {
              "percent_off": 10,
              "type": "PERCENT",
              "effect": "APPLY_TO_ORDER"
            },
            "start_date": "2016-01-01T00:00:00Z",
            "expiration_date": "2022-12-31T23:59:59Z",
            "validity_timeframe": {
              "duration": "PT1H",
              "interval": "P2D"
            },
            "validity_day_of_week": [
              1,
              2,
              3,
              4,
              5
            ],
            "active": false,
            "additional_info": "This voucher will remain inactive until enabled.",
            "redemption": {
              "quantity": 10
            },
            "metadata": {
              "test": true,
              "locale": "de-en"
            },
            "validation_rules": [
              "val_4j7DCRm2IS59"
            ]
          }
        ],
        "properties": {
          "code": {
            "type": "string",
            "example": "WVPblOYX",
            "description": "A code that identifies a voucher. Pattern can use all letters of the English alphabet, Arabic numerals, and special characters. Pass this attribute in the request body if you want to deliberately create a distinct code. Otherwise, use the `code_config` object to design rules that the Voucherify API should use to create a random code."
          },
          "campaign": {
            "type": "string",
            "example": "Gift Card Campaign",
            "description": "A unique campaign name, identifies the voucher's parent campaign. **Required** for `LOYALTY_CARD` type.",
            "default": null
          },
          "campaign_id": {
            "type": "string",
            "example": "camp_FNYR4jhqZBM9xTptxDGgeNBV",
            "description": "Assigned by the Voucherify API, identifies the voucher's parent campaign.",
            "default": null
          },
          "category": {
            "type": "string",
            "default": null,
            "description": "Tag defining the category that this voucher belongs to. Useful when listing vouchers using the List Vouchers endpoint."
          },
          "type": {
            "type": "string",
            "enum": [
              "GIFT_VOUCHER",
              "DISCOUNT_VOUCHER",
              "LOYALTY_CARD"
            ],
            "description": "Defines the type of voucher. "
          },
          "discount": {
            "default": null,
            "description": "Defines discount voucher; **required** when`type` is `DISCOUNT_VOUCHER`. Defaults to `null`. Type of discount:\n- `AMOUNT`\n- `PERCENT`\n- `UNIT`\n- `FIXED`\n\nA Free Shipping discount is a special instance of the  `UNIT` type discount.",
            "oneOf": [
              {
                "$ref": "#/components/schemas/1_obj_voucher_object_discount_amount_POST"
              },
              {
                "$ref": "#/components/schemas/1_obj_voucher_object_discount_percentage_POST"
              },
              {
                "$ref": "#/components/schemas/1_obj_voucher_object_discount_fixed_POST"
              },
              {
                "$ref": "#/components/schemas/1_obj_voucher_object_discount_unit_one_POST"
              },
              {
                "$ref": "#/components/schemas/1_obj_voucher_object_discount_unit_multiple_POST"
              },
              {
                "$ref": "#/components/schemas/1_obj_voucher_object_discount_shipping_POST"
              }
            ]
          },
          "gift": {
            "default": null,
            "type": "object",
            "description": "Defines gift card; **required** when type parameter is `GIFT_VOUCHER`.",
            "properties": {
              "amount": {
                "type": "integer",
                "example": 10000,
                "description": "Total gift card income. Value is multiplied by 100 to precisely represent 2 decimal places. For example, $100 amount is written as 10000."
              },
              "effect": {
                "type": "string",
                "enum": [
                  "APPLY_TO_ORDER",
                  "APPLY_TO_ITEMS"
                ],
                "description": "Defines how the credits are applied to the customer's order"
              }
            }
          },
          "loyalty_card": {
            "default": null,
            "type": "object",
            "description": "Defines loyalty card; **required** when type parameter is `LOYALTY_CARD`.",
            "properties": {
              "points": {
                "type": "integer",
                "example": 7000,
                "description": "Total points incurred over lifespan of loyalty card."
              }
            }
          },
          "start_date": {
            "type": "string",
            "example": "2021-12-01T00:00:00.000Z",
            "format": "date-time",
            "description": "Start date defines when the code starts to be active. Activation timestamp in ISO 8601 format. Voucher is *inactive before* this date."
          },
          "expiration_date": {
            "type": "string",
            "example": "2021-12-31T00:00:00.000Z",
            "format": "date-time",
            "description": "Expiration date defines when the code expires. Expiration timestamp in ISO 8601 format.  Voucher is *inactive after* this date."
          },
          "validity_timeframe": {
            "type": "object",
            "description": "Set recurrent time periods when the voucher is active. For example, valid for 1 hour every other day.`start_date` **required** when including the `validity_timeframe`.",
            "default": null,
            "properties": {
              "duration": {
                "type": "string",
                "example": "PT1H",
                "description": "Defines the amount of time the voucher will be active in ISO 8601 format. For example, a voucher with a `duration` of `PT1H` will be valid for a duration of one hour."
              },
              "interval": {
                "type": "string",
                "example": "P2D",
                "description": "Defines the intervening time between two time points in ISO 8601 format, expressed as a duration. For example, a voucher with an `interval` of `P2D` will be active every other day."
              }
            }
          },
          "validity_day_of_week": {
            "type": "array",
            "default": null,
            "enum": [
              [
                0
              ],
              [
                1
              ],
              [
                2
              ],
              [
                3
              ],
              [
                4
              ],
              [
                5
              ],
              [
                6
              ]
            ],
            "description": "Integer array corresponding to the particular days of the week in which the voucher is valid.\n\n- `0`  Sunday  \n- `1`  Monday  \n- `2`  Tuesday  \n- `3`  Wednesday  \n- `4`  Thursday  \n- `5`  Friday  \n- `6`  Saturday  ",
            "items": {
              "type": "integer",
              "example": "[ 1, 2 ]"
            }
          },
          "active": {
            "type": "boolean",
            "description": "A flag to toggle the voucher on or off. You can disable a voucher even though it's within the active period defined by the `start_date` and `expiration_date`.  \n\n- `true` indicates an *active* voucher\n- `false` indicates an *inactive* voucher"
          },
          "additional_info": {
            "type": "string",
            "default": null,
            "description": "An optional field to keep any extra textual information about the code such as a code description and details."
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the code. A set of key/value pairs that you can attach to a voucher object. It can be useful for storing additional information about the voucher in a structured format."
          },
          "validation_rules": {
            "type": "array",
            "description": "Array containing the id of the validation rule associated with the voucher.",
            "items": {
              "type": "string",
              "example": "[val_4j7DCRm2IS59]"
            }
          },
          "redemption": {
            "type": "object",
            "description": "Stores the quantity of redemptions that can be applied to the voucher.",
            "properties": {
              "quantity": {
                "type": "integer",
                "default": null,
                "description": "How many times a voucher can be redeemed. A `null` value means unlimited."
              }
            }
          },
          "code_config": {
            "type": "object",
            "description": "Defines code's pattern (prefix, suffix, length, charset, etc). Pass this attribute in the request body if you want to design rules that the Voucherify API should use to create a random code. Otherwise, use the `code` object to define a distinct code.",
            "properties": {
              "length": {
                "type": "string",
                "description": "Number of characters in a generated code (excluding prefix and postfix)."
              },
              "charset": {
                "type": "string",
                "description": "Characters that can appear in the code.  \n\nExamples:\n\n- Alphanumeric: `0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ` \n- Alphabetic: `abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ` \n- Alphabetic Lowercase: `abcdefghijklmnopqrstuvwxyz` \n- Alphabetic Uppercase: `ABCDEFGHIJKLMNOPQRSTUVWXYZ` \n- Numbers: `0123456789`  \n- Custom: a custom character set"
              },
              "prefix": {
                "type": "string",
                "description": "A text appended before the code."
              },
              "postfix": {
                "type": "string",
                "description": "A text appended after the code."
              },
              "pattern": {
                "type": "string",
                "description": "A pattern for codes where hashes (#) will be replaced with random characters. Overrides `length`."
              }
            }
          }
        }
      },
      "1_req_vouchers_code_POST": {
        "title": "req_vouchers_code_POST",
        "type": "object",
        "description": "Request body schema for creating a voucher.",
        "examples": [],
        "properties": {
          "campaign": {
            "type": "string",
            "example": "Gift Card Campaign",
            "description": "A unique campaign name, identifies the voucher's parent campaign. **Required** for `LOYALTY_CARD` type.",
            "default": null
          },
          "campaign_id": {
            "type": "string",
            "example": "camp_FNYR4jhqZBM9xTptxDGgeNBV",
            "description": "Assigned by the Voucherify API, identifies the voucher's parent campaign.",
            "default": null
          },
          "category": {
            "type": "string",
            "default": null,
            "description": "Tag defining the category that this voucher belongs to. Useful when listing vouchers using the List Vouchers endpoint."
          },
          "type": {
            "type": "string",
            "enum": [
              "GIFT_VOUCHER",
              "DISCOUNT_VOUCHER",
              "LOYALTY_CARD"
            ],
            "description": "Defines the type of voucher. "
          },
          "discount": {
            "default": null,
            "oneOf": [
              {
                "$ref": "#/components/schemas/1_obj_voucher_object_discount_amount_POST"
              },
              {
                "$ref": "#/components/schemas/1_obj_voucher_object_discount_percentage_POST"
              },
              {
                "$ref": "#/components/schemas/1_obj_voucher_object_discount_fixed_POST"
              },
              {
                "$ref": "#/components/schemas/1_obj_voucher_object_discount_unit_one_POST"
              },
              {
                "$ref": "#/components/schemas/1_obj_voucher_object_discount_unit_multiple_POST"
              },
              {
                "$ref": "#/components/schemas/1_obj_voucher_object_discount_shipping_POST"
              }
            ],
            "description": "Defines discount voucher; **required** when`type` is `DISCOUNT_VOUCHER`. Defaults to `null`. Type of discount:\n- `AMOUNT`\n- `PERCENT`\n- `UNIT`\n- `FIXED`\n\nA Free Shipping discount is a special instance of the  `UNIT` type discount."
          },
          "gift": {
            "default": null,
            "type": "object",
            "description": "Defines gift card; **required** when type parameter is `GIFT_VOUCHER`.",
            "properties": {
              "amount": {
                "type": "integer",
                "example": 10000,
                "description": "Total voucher income. Value is multiplied by 100 to precisely represent 2 decimal places. For example, $100 amount is written as 10000."
              },
              "effect": {
                "type": "string",
                "enum": [
                  "APPLY_TO_ORDER",
                  "APPLY_TO_ITEMS"
                ],
                "description": "Defines how the credits are applied to the customer's order"
              }
            }
          },
          "loyalty_card": {
            "default": null,
            "type": "object",
            "description": "Defines loyalty card; **required** when type parameter is `LOYALTY_CARD`.",
            "properties": {
              "points": {
                "type": "integer",
                "example": 7000,
                "description": "Total points incurred over lifespan of loyalty card."
              }
            }
          },
          "start_date": {
            "type": "string",
            "example": "2021-12-01T00:00:00.000Z",
            "format": "date-time",
            "description": "Start date defines when the code starts to be active. Activation timestamp in ISO 8601 format. Voucher is *inactive before* this date."
          },
          "expiration_date": {
            "type": "string",
            "example": "2021-12-31T00:00:00.000Z",
            "format": "date-time",
            "description": "Expiration date defines when the code expires. Expiration timestamp in ISO 8601 format.  Voucher is *inactive after* this date."
          },
          "validity_timeframe": {
            "type": "object",
            "description": "Set recurrent time periods when the voucher is active. For example, valid for 1 hour every other day.`start_date` **required** when including the `validity_timeframe`.",
            "default": null,
            "properties": {
              "duration": {
                "type": "string",
                "example": "PT1H",
                "description": "Defines the amount of time the voucher will be active in ISO 8601 format. For example, a voucher with a `duration` of `PT1H` will be valid for a duration of one hour."
              },
              "interval": {
                "type": "string",
                "example": "P2D",
                "description": "Defines the intervening time between two time points in ISO 8601 format, expressed as a duration. For example, a voucher with an `interval` of `P2D` will be active every other day."
              }
            }
          },
          "validity_day_of_week": {
            "type": "array",
            "default": null,
            "enum": [
              [
                0
              ],
              [
                1
              ],
              [
                2
              ],
              [
                3
              ],
              [
                4
              ],
              [
                5
              ],
              [
                6
              ]
            ],
            "description": "Integer array corresponding to the particular days of the week in which the voucher is valid.\n\n- `0`  Sunday  \n- `1`  Monday  \n- `2`  Tuesday  \n- `3`  Wednesday  \n- `4`  Thursday  \n- `5`  Friday  \n- `6`  Saturday  ",
            "items": {
              "type": "integer",
              "example": "[ 1, 2 ]"
            }
          },
          "active": {
            "type": "boolean",
            "description": "A flag to toggle the voucher on or off. You can disable a voucher even though it's within the active period defined by the `start_date` and `expiration_date`.  \n\n- `true` indicates an *active* voucher\n- `false` indicates an *inactive* voucher"
          },
          "additional_info": {
            "type": "string",
            "default": null,
            "description": "An optional field to keep any extra textual information about the code such as a code description and details."
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the code. A set of key/value pairs that you can attach to a voucher object. It can be useful for storing additional information about the voucher in a structured format."
          },
          "validation_rules": {
            "type": "array",
            "description": "Array containing the id of the validation rule associated with the voucher.",
            "items": {
              "type": "string",
              "example": "[val_4j7DCRm2IS59]"
            }
          },
          "redemption": {
            "type": "object",
            "description": "Stores the quantity of redemptions that can be applied to the voucher.",
            "properties": {
              "quantity": {
                "type": "integer",
                "default": null,
                "description": "How many times a voucher can be redeemed. A `null` value means unlimited."
              }
            }
          }
        }
      },
      "1_res_vouchers_GET": {
        "title": "List vouchers",
        "type": "object",
        "description": "Array list of vouchers",
        "examples": [],
        "properties": {
          "object": {
            "type": "string",
            "default": "list",
            "description": "The type of object represented by JSON. Default is `list`."
          },
          "data_ref": {
            "type": "string",
            "default": "vouchers"
          },
          "vouchers": {
            "type": "array",
            "description": "A dictionary that contains an array of  vouchers. Each entry in the array is a separate voucher object.",
            "items": {
              "$ref": "#/components/schemas/1_obj_voucher_object"
            }
          },
          "total": {
            "type": "integer",
            "example": 20,
            "description": "Returns how many vouchers in the project meet the limits defined by the query parameter definitions."
          }
        }
      },
      "1_req_vouchers_code_PUT": {
        "title": "req_vouchers_code_PUT",
        "type": "object",
        "description": "Request body schema for updating a voucher.",
        "examples": [],
        "properties": {
          "category": {
            "type": "string",
            "default": null,
            "description": "Tag defining the category that this voucher belongs to. Useful when listing vouchers using the List Vouchers endpoint."
          },
          "discount": {
            "default": null,
            "oneOf": [
              {
                "$ref": "#/components/schemas/1_obj_voucher_object_discount_amount_PUT"
              },
              {
                "$ref": "#/components/schemas/1_obj_voucher_object_discount_percentage_PUT"
              },
              {
                "$ref": "#/components/schemas/1_obj_voucher_object_discount_fixed_PUT"
              },
              {
                "$ref": "#/components/schemas/1_obj_voucher_object_discount_unit_one_PUT"
              },
              {
                "$ref": "#/components/schemas/1_obj_voucher_object_discount_unit_multiple_PUT"
              },
              {
                "$ref": "#/components/schemas/1_obj_voucher_object_discount_shipping_PUT"
              }
            ],
            "description": "Defines discount voucher; **required** when`type` is `DISCOUNT_VOUCHER`. Defaults to `null`. Type of discount:\n- `AMOUNT`\n- `PERCENT`\n- `UNIT`\n- `FIXED`\n\nA Free Shipping discount is a special instance of the  `UNIT` type discount."
          },
          "gift": {
            "default": null,
            "type": "object",
            "description": "Defines gift card; **required** when type parameter is `GIFT_VOUCHER`.",
            "properties": {
              "amount": {
                "type": "integer",
                "example": 10000,
                "description": "Total voucher income. Value is multiplied by 100 to precisely represent 2 decimal places. For example, $100 amount is written as 10000."
              },
              "effect": {
                "type": "string",
                "enum": [
                  "APPLY_TO_ORDER",
                  "APPLY_TO_ITEMS"
                ],
                "description": "Defines how the credits are applied to the customer's order"
              }
            }
          },
          "loyalty_card": {
            "default": null,
            "type": "object",
            "description": "Defines loyalty card; **required** when type parameter is `LOYALTY_CARD`.",
            "properties": {
              "points": {
                "type": "integer",
                "example": 7000,
                "description": "Total points incurred over lifespan of loyalty card."
              }
            }
          },
          "start_date": {
            "type": "string",
            "example": "2021-12-01T00:00:00.000Z",
            "format": "date-time",
            "description": "Start date defines when the code starts to be active. Activation timestamp in ISO 8601 format. Voucher is *inactive before* this date."
          },
          "expiration_date": {
            "type": "string",
            "example": "2021-12-31T00:00:00.000Z",
            "format": "date-time",
            "description": "Expiration date defines when the code expires. Expiration timestamp in ISO 8601 format.  Voucher is *inactive after* this date."
          },
          "validity_timeframe": {
            "type": "object",
            "description": "Set recurrent time periods when the voucher is active. For example, valid for 1 hour every other day.`start_date` **required** when including the `validity_timeframe`.",
            "default": null,
            "properties": {
              "duration": {
                "type": "string",
                "example": "PT1H",
                "description": "Defines the amount of time the voucher will be active in ISO 8601 format. For example, a voucher with a `duration` of `PT1H` will be valid for a duration of one hour."
              },
              "interval": {
                "type": "string",
                "example": "P2D",
                "description": "Defines the intervening time between two time points in ISO 8601 format, expressed as a duration. For example, a voucher with an `interval` of `P2D` will be active every other day."
              }
            }
          },
          "validity_day_of_week": {
            "type": "array",
            "default": null,
            "enum": [
              [
                0
              ],
              [
                1
              ],
              [
                2
              ],
              [
                3
              ],
              [
                4
              ],
              [
                5
              ],
              [
                6
              ]
            ],
            "description": "Integer array corresponding to the particular days of the week in which the voucher is valid.\n\n- `0`  Sunday  \n- `1`  Monday  \n- `2`  Tuesday  \n- `3`  Wednesday  \n- `4`  Thursday  \n- `5`  Friday  \n- `6`  Saturday  ",
            "items": {
              "type": "integer",
              "example": "[ 1, 2 ]"
            }
          },
          "active": {
            "type": "boolean",
            "description": "A flag to toggle the voucher on or off. You can disable a voucher even though it's within the active period defined by the `start_date` and `expiration_date`.  \n\n- `true` indicates an *active* voucher\n- `false` indicates an *inactive* voucher"
          },
          "additional_info": {
            "type": "string",
            "default": null,
            "description": "An optional field to keep any extra textual information about the code such as a code description and details."
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the code. A set of key/value pairs that you can attach to a voucher object. It can be useful for storing additional information about the voucher in a structured format."
          }
        }
      },
      "obj_earning_rule_object": {
        "description": "This is an object representing an earning rule.",
        "type": "object",
        "x-examples": {
          "example-1": {
            "id": "ern_P6MWOFGsv63sbTaTZBp0IHGK",
            "created_at": "2022-02-02T13:18:32.557Z",
            "updated_at": "2022-02-03T13:09:27.206Z",
            "validation_rule_id": "val_6o0qdvlbh1mt",
            "loyalty": {
              "points": 1000,
              "type": "FIXED"
            },
            "event": "order.paid",
            "source": {
              "banner": "Order paid 1000 points",
              "object_id": "camp_Pfja7X91b1GoyH5wnpzCwlP3",
              "object_type": "campaign"
            },
            "active": true,
            "start_date": "2022-02-02T13:00:00.000Z",
            "expiration_date": "2022-03-03T14:30:00.000Z",
            "validity_timeframe": {
              "duration": "PT1H",
              "interval": "P1D"
            },
            "object": "earning_rule",
            "automation_id": "auto_RVgObANuPToNla8LuD5aT3Zb"
          }
        },
        "title": "EarningRuleObject",
        "examples": [
          {
            "id": "ern_abvbD0d7Wv4hgr3fTElLb38G",
            "created_at": "2022-02-07T08:19:41.810Z",
            "updated_at": null,
            "validation_rule_id": null,
            "loyalty": {
              "points": 2,
              "type": "FIXED"
            },
            "custom_event": {
              "schema_id": "ms_7JRYC8jXbezBV8AvGYGA0b5R"
            },
            "event": "saw_on_facebook",
            "source": {
              "banner": "Saw on Facebook Timeframe",
              "object_id": "camp_Pfja7X91b1GoyH5wnpzCwlP3",
              "object_type": "campaign"
            },
            "active": true,
            "start_date": "2022-02-07T08:30:00.000Z",
            "validity_timeframe": {
              "duration": "PT1H",
              "interval": "P1D"
            },
            "object": "earning_rule",
            "automation_id": "auto_WTxNMXGJMS5ZdU9oZip3AzuA"
          },
          {
            "id": "ern_taClaOIiaGNdmdby8xS0lCcy",
            "created_at": "2022-02-04T13:27:50.665Z",
            "updated_at": "2022-02-07T08:19:44.198Z",
            "validation_rule_id": null,
            "loyalty": {
              "points": 1000,
              "type": "FIXED"
            },
            "event": "order.paid",
            "source": {
              "banner": "Order paid 1000 points",
              "object_id": "camp_Pfja7X91b1GoyH5wnpzCwlP3",
              "object_type": "campaign"
            },
            "active": true,
            "start_date": "2022-02-02T13:00:00.000Z",
            "expiration_date": "2022-03-03T14:30:00.000Z",
            "validity_timeframe": {
              "duration": "PT1H",
              "interval": "P1D"
            },
            "validity_day_of_week": [
              4
            ],
            "object": "earning_rule",
            "automation_id": "auto_RjBuwpeFQZ7TyQ5LP2LFVZYG"
          },
          {
            "id": "ern_3HlFKLMNIfBme9lcHwnMwXON",
            "created_at": "2022-02-04T13:02:52.937Z",
            "updated_at": "2022-02-07T08:19:43.291Z",
            "validation_rule_id": null,
            "loyalty": {
              "points": 1000,
              "type": "FIXED"
            },
            "segment": {
              "id": "seg_WJv55MbzQwnr56ttJ2xUrSgt"
            },
            "event": "customer.segment.entered",
            "source": {
              "banner": "Entered segment 100 points.",
              "object_id": "camp_Pfja7X91b1GoyH5wnpzCwlP3",
              "object_type": "campaign"
            },
            "active": true,
            "start_date": "2022-02-02T13:00:00.000Z",
            "expiration_date": "2022-03-03T14:30:00.000Z",
            "validity_timeframe": {
              "duration": "PT1H",
              "interval": "P1D"
            },
            "validity_day_of_week": [
              1,
              2,
              3,
              4,
              5
            ],
            "object": "earning_rule",
            "automation_id": "auto_39wqQSScJJbvpzAF611jnrh9"
          }
        ],
        "properties": {
          "id": {
            "type": "string",
            "example": "ern_P6MWOFGsv63sbTaTZBp0IHGK",
            "description": "Assigned by the Voucherify API, identifies the earning rule object."
          },
          "created_at": {
            "type": "string",
            "description": "Timestamp representing the date and time when the earning rule was created in ISO 8601 format.",
            "example": "2022-02-02T13:18:32.557Z",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "description": "Timestamp representing the date and time when the earning rule was last updated in ISO 8601 format.",
            "example": "2022-02-03T13:09:27.206Z",
            "format": "date-time",
            "default": null
          },
          "validation_rule_id": {
            "type": "string",
            "example": "val_248vs7tUjlIE",
            "description": "A unique validation rule identifier assigned by the Voucherify API. The validation rule is verified before points are added to the balance.",
            "default": null
          },
          "loyalty": {
            "description": "An object that defines the number of points that will be added to a loyalty card and how the points will be added.\n\n- `FIXED` adds a fixed number of `points`\n- `PROPORTIONAL` adds points proportionally based on a pre-defined ratio",
            "oneOf": [
              {
                "description": "Fixed. Applicable to events `order.paid`,  `customer.segment.entered`, and `custom_event`.",
                "properties": {
                  "points": {
                    "type": "integer",
                    "description": "The number of points to be added to the loyalty card.",
                    "example": 1000
                  },
                  "type": {
                    "type": "string",
                    "description": "Defines how the points will be added to the loyalty card. `FIXED` adds a fixed number of `points`.",
                    "default": "FIXED"
                  }
                }
              },
              {
                "description": "Proportional. Applicable to only `order.paid`.",
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "Defines how the points will be added to the loyalty card.`PROPORTIONAL` adds points based on a pre-defined ratio",
                    "default": "PROPORTIONAL"
                  },
                  "order": {
                    "type": "object",
                    "description": "Defines proportion for calculating how many points to add to a loyalty card. The ratio is based on the order amount. For `every` dollar spent, the customer will get this many `points`.  \n",
                    "properties": {
                      "amount": {
                        "type": "object",
                        "description": "Defines the ratio based on the order amount.",
                        "properties": {
                          "every": {
                            "type": "integer",
                            "description": "Order amount. Value is multiplied by 100 to precisely represent 2 decimal places. For example, a $10 order amount is written as 1000."
                          },
                          "points": {
                            "type": "integer",
                            "description": "Number of points awarded."
                          }
                        }
                      }
                    }
                  }
                }
              }
            ],
            "type": "object"
          },
          "custom_event": {
            "type": "object",
            "description": "Contains the schema id of a custom event. **Required** for the custom event option in `event`.",
            "properties": {
              "schema_id": {
                "type": "string",
                "description": "Contains a unique identifier of a custom event schema. Assigned by the Voucherify API."
              }
            }
          },
          "segment": {
            "type": "object",
            "description": "Contains the id of a customer segment. **Required** for the `customer.segment.entered` option in `event`.",
            "properties": {
              "id": {
                "type": "string",
                "description": "Contains a unique identifier of a customer segment. Assigned by the Voucherify API."
              }
            }
          },
          "event": {
            "type": "string",
            "enum": [
              "order.paid",
              "customer.segment.entered",
              "custom_event_defined_in_EVENT_SCHEMA"
            ],
            "description": "Defines the event which triggers the earning rule to add points to a loyalty card.  \n\n- `order.paid` an event defined by the Voucherify API corresponding to an order status `PAID`. Read more here.  \n- `customer.segment.entered` an event defined by the Voucherify API corresponding to a customer entering a pre-defined customer segment. Read more here.  \n- `custom_event_name` the name of a custom event defined in the Dashboard &rarr; **Project Settings** &rarr; **EVENT SCHEMA** &rarr; **Add event definition**. Read more on defining custom events. "
          },
          "source": {
            "type": "object",
            "description": "Contains the custom earning rule name and parent campaign.",
            "properties": {
              "banner": {
                "type": "string",
                "example": "Order Paid - You will get 100 points",
                "description": "Name of the earning rule. This is displayed as a header for the earning rule in the Dashboard."
              },
              "object_id": {
                "type": "string",
                "example": "camp_Pfja7X91b1GoyH5wnpzCwlP3",
                "description": "A unique campaign identifier assigned by the Voucherify API."
              },
              "object_type": {
                "type": "string",
                "default": "campaign",
                "description": "Defines the object associated with the earning rule. Defaults to `campaign`."
              }
            }
          },
          "active": {
            "type": "boolean",
            "description": "A flag to toggle the earning rule on or off. You can disable an earning rule even though it's within the active period defined by the `start_date` and `expiration_date` of the campaign or the earning rule's own `start_date` and `expiration_date`.  \n\n- `true` indicates an *active* earning rule\n- `false` indicates an *inactive* earning rule"
          },
          "start_date": {
            "type": "string",
            "example": "2022-02-02T13:00:00.000Z",
            "format": "date-time",
            "description": "Start date defines when the earning rule starts to be active. Activation timestamp in ISO 8601 format. Earning rule is *inactive before* this date. If you don't define the start date for an earning rule, it'll inherit the campaign start date by default. "
          },
          "expiration_date": {
            "type": "string",
            "format": "date-time",
            "example": "2022-03-03T14:30:00.000Z",
            "description": "Expiration date defines when the earning rule expires. Expiration timestamp in ISO 8601 format.  Earning rule is *inactive after* this date.If you don't define the expiration date for an earning rule, it'll inherit the campaign expiration date by default."
          },
          "validity_timeframe": {
            "type": "object",
            "description": "Set recurrent time periods when the earning rule is valid. For example, valid for 1 hour every other day.`start_date` **required** when including the `validity_timeframe`.",
            "properties": {
              "duration": {
                "type": "string",
                "description": "Defines the amount of time an earning rule will be active in ISO 8601 format. For example, an earning rule with a `duration` of `PT1H` will be valid for a duration of one hour.",
                "example": "PT1H"
              },
              "interval": {
                "type": "string",
                "description": "Defines the intervening time between two time points in ISO 8601 format, expressed as a duration. For example, an earning rule with an `interval` of `P2D` will be valid every other day.",
                "example": "P2D"
              }
            }
          },
          "validity_day_of_week": {
            "type": "array",
            "description": "Integer array corresponding to the particular days of the week in which the earning rule is valid.\n\n- `0`  Sunday  \n- `1`  Monday  \n- `2`  Tuesday  \n- `3`  Wednesday  \n- `4`  Thursday  \n- `5`  Friday  \n- `6`  Saturday  ",
            "items": {
              "type": "integer",
              "example": "[ 1, 2 ]"
            }
          },
          "object": {
            "type": "string",
            "default": "earning_rule",
            "description": "The type of object represented by JSON. Default is `earning_rule`."
          },
          "automation_id": {
            "type": "string",
            "minLength": 1
          }
        },
        "required": [
          "event",
          "active",
          "object"
        ]
      },
      "1_req_vouchers_metadata_async": {
        "title": "req_vouchers_metadata_async",
        "type": "object",
        "description": "Request body schema for vouchers/metadata/async.",
        "x-examples": {
          "example-1": {
            "$ref": "#/components/examples/req_vouchers_metadata_1"
          },
          "example-2": {
            "$ref": "#/components/examples/req_vouchers_metadata_2"
          }
        },
        "properties": {
          "codes": {
            "type": "array",
            "description": "A string array of voucher codes.",
            "example": [
              "PROMO-CODE810",
              "PROMO-CODE726"
            ],
            "items": {
              "type": "string"
            }
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the code. A set of key/value pairs that you can attach to a voucher object. It can be useful for storing additional information about the voucher in a structured format.",
            "example": {
              "lang": "en",
              "authorized_internally": true
            }
          }
        },
        "required": [
          "codes",
          "metadata"
        ]
      },
      "req_loyalties_campaignId_earning-rules": {
        "description": "This data model represents the request body for the `/loyalties/{campaignId}/earning-rules` endpoint.",
        "type": "object",
        "x-examples": {
          "example-1": {
            "id": "ern_P6MWOFGsv63sbTaTZBp0IHGK",
            "created_at": "2022-02-02T13:18:32.557Z",
            "updated_at": "2022-02-03T13:09:27.206Z",
            "validation_rule_id": "val_6o0qdvlbh1mt",
            "loyalty": {
              "points": 1000,
              "type": "FIXED"
            },
            "event": "order.paid",
            "source": {
              "banner": "Order paid 1000 points",
              "object_id": "camp_Pfja7X91b1GoyH5wnpzCwlP3",
              "object_type": "campaign"
            },
            "active": true,
            "start_date": "2022-02-02T13:00:00.000Z",
            "expiration_date": "2022-03-03T14:30:00.000Z",
            "validity_timeframe": {
              "duration": "PT1H",
              "interval": "P1D"
            },
            "object": "earning_rule",
            "automation_id": "auto_RVgObANuPToNla8LuD5aT3Zb"
          }
        },
        "title": "RequestBodyLoyaltiesCampaignIDEarningRules",
        "properties": {
          "event": {
            "type": "string",
            "enum": [
              "order.paid",
              "customer.segment.entered",
              "custom_event_defined_in_EVENT_SCHEMA"
            ],
            "description": "Defines the event which triggers the earning rule to add points to a loyalty card.  \n\n- `order.paid` an event defined by the Voucherify API corresponding to an order status `PAID`. Read more here.  \n- `customer.segment.entered` an event defined by the Voucherify API corresponding to a customer entering a pre-defined customer segment. Read more here.  \n- `custom_event_name` the name of a custom event defined in the Dashboard &rarr; **Project Settings** &rarr; **EVENT SCHEMA** &rarr; **Add event definition**. Read more on defining custom events. "
          },
          "validation_rule_id": {
            "type": "string",
            "example": "val_248vs7tUjlIE",
            "description": "A unique validation rule identifier assigned by the Voucherify API. The validation rule is verified before points are added to the balance.",
            "default": null
          },
          "loyalty": {
            "description": "An object that defines the number of points that will be added to a loyalty card and how the points will be added.\n\n- `FIXED` adds a fixed number of `points`\n- `PROPORTIONAL` adds points proportionally based on a pre-defined ratio",
            "oneOf": [
              {
                "description": "Fixed. Applicable to events `order.paid`,  `customer.segment.entered`, and `custom_event`.",
                "properties": {
                  "points": {
                    "type": "integer",
                    "description": "The number of points to be added to the loyalty card.",
                    "example": 1000
                  },
                  "type": {
                    "type": "string",
                    "description": "Defines how the points will be added to the loyalty card. `FIXED` adds a fixed number of `points`.",
                    "default": "FIXED"
                  }
                },
                "required": [
                  "points",
                  "type"
                ]
              },
              {
                "description": "Proportional. Applicable to only `order.paid`.",
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "Defines how the points will be added to the loyalty card.`PROPORTIONAL` adds points based on a pre-defined ratio",
                    "default": "PROPORTIONAL"
                  },
                  "order": {
                    "type": "object",
                    "description": "Defines proportion for calculating how many points to add to a loyalty card. The ratio is based on the order amount. For `every` dollar spent, the customer will get this many `points`.  \n",
                    "required": [
                      "amount"
                    ],
                    "properties": {
                      "amount": {
                        "type": "object",
                        "description": "Defines the ratio based on the order amount.",
                        "required": [
                          "every",
                          "points"
                        ],
                        "properties": {
                          "every": {
                            "type": "integer",
                            "description": "Order amount. Value is multiplied by 100 to precisely represent 2 decimal places. For example, a $10 order amount is written as 1000."
                          },
                          "points": {
                            "type": "integer",
                            "description": "Number of points awarded."
                          }
                        }
                      }
                    }
                  }
                },
                "required": [
                  "type",
                  "order"
                ]
              }
            ],
            "type": "object"
          },
          "source": {
            "type": "object",
            "description": "Contains the custom earning rule name and parent campaign.",
            "properties": {
              "banner": {
                "type": "string",
                "example": "Order Paid - You will get 100 points",
                "description": "Name of the earning rule. This is displayed as a header for the earning rule in the Dashboard."
              }
            }
          },
          "active": {
            "type": "boolean",
            "description": "A flag to toggle the earning rule on or off. You can disable an earning rule even though it's within the active period defined by the `start_date` and `expiration_date` of the campaign or the earning rule's own `start_date` and `expiration_date`.  \n\n- `true` indicates an *active* earning rule\n- `false` indicates an *inactive* earning rule"
          },
          "start_date": {
            "type": "string",
            "example": "2022-02-02T13:00:00.000Z",
            "format": "date-time",
            "description": "Start date defines when the earning rule starts to be active. Activation timestamp in ISO 8601 format. Earning rule is *inactive before* this date. If you don't define the start date for an earning rule, it'll inherit the campaign start date by default.",
            "default": null
          },
          "expiration_date": {
            "type": "string",
            "format": "date-time",
            "example": "2022-03-03T14:30:00.000Z",
            "description": "Expiration date defines when the earning rule expires. Expiration timestamp in ISO 8601 format.  Earning rule is *inactive after* this date.If you don't define the expiration date for an earning rule, it'll inherit the campaign expiration date by default.",
            "default": null
          },
          "validity_timeframe": {
            "type": "object",
            "description": "Set recurrent time periods when the earning rule is valid. For example, valid for 1 hour every other day. `start_date` **required** when including the `validity_timeframe`.",
            "properties": {
              "duration": {
                "type": "string",
                "description": "Defines the amount of time an earning rule will be active in ISO 8601 format. For example, an earning rule with a `duration` of `PT1H` will be valid for a duration of one hour.",
                "example": "PT1H"
              },
              "interval": {
                "type": "string",
                "description": "Defines the intervening time between two time points in ISO 8601 format, expressed as a duration. For example, an earning rule with an `interval` of `P2D` will be valid every other day.",
                "example": "P2D"
              }
            },
            "required": [
              "duration",
              "interval"
            ]
          },
          "validity_day_of_week": {
            "type": "array",
            "description": "Integer array corresponding to the particular days of the week in which the earning rule is valid.\n\n- `0`  Sunday  \n- `1`  Monday  \n- `2`  Tuesday  \n- `3`  Wednesday  \n- `4`  Thursday  \n- `5`  Friday  \n- `6`  Saturday  ",
            "items": {
              "type": "integer",
              "example": "[ 1, 2 ]"
            }
          },
          "custom_event": {
            "type": "object",
            "description": "Contains the schema id of a custom event. **Required** for the custom event option in `event`.",
            "default": null,
            "properties": {
              "schema_id": {
                "type": "string",
                "description": "Contains a unique identifier of a custom event schema. Assigned by the Voucherify API."
              }
            },
            "required": [
              "schema_id"
            ]
          },
          "segment": {
            "type": "object",
            "description": "Contains the id of a customer segment. **Required** for the `customer.segment.entered` option in `event`.",
            "default": null,
            "properties": {
              "id": {
                "type": "string",
                "description": "Contains a unique identifier of a customer segment. Assigned by the Voucherify API."
              }
            },
            "required": [
              "id"
            ]
          }
        },
        "required": [
          "event",
          "loyalty"
        ]
      },
      "1_res_async_actions": {
        "type": "object",
        "title": "async_actions",
        "description": "Response to bulk update for voucher metadata.",
        "additionalProperties": false,
        "properties": {
          "async_action_id": {
            "type": "string",
            "example": "aa_0a875d56c805df6601",
            "description": "The id of the scheduled async action. It informs you that your request has been accepted and metadata will be added to the repository asynchronously. To check the import status and result, copy async action id from the response and pass it using this endpoint[hyperlink-endpoint]."
          }
        }
      },
      "error": {
        "title": "error",
        "type": "object",
        "properties": {},
        "discriminator": {
          "propertyName": "key",
          "mapping": {
            "not_enough_codes": "not_enough_codes"
          }
        },
        "description": "Short error response",
        "examples": []
      },
      "e_400_missing_param": {
        "description": "Error: Bad Request &rarr; Missing Parameters",
        "type": "object",
        "x-examples": {
          "example-1": {
            "code": 400,
            "key": "missing_param",
            "message": "Missing required parameter",
            "details": "Parameter 'custom_event.schema_id' is required",
            "request_id": "v-0a96c19b1a41c03999"
          }
        },
        "title": "missing_param",
        "properties": {
          "code": {
            "type": "integer",
            "default": 400,
            "description": "Error's HTTP status code."
          },
          "key": {
            "type": "string",
            "default": "missing_param",
            "description": "Short string describing the kind of error which occurred."
          },
          "message": {
            "type": "string",
            "default": "Missing required parameter",
            "description": "A human-readable message providing a short description about the error."
          },
          "details": {
            "type": "string",
            "example": "Parameter 'custom_event.schema_id' is required",
            "description": "A human-readable message providing more details about the error."
          },
          "request_id": {
            "type": "string",
            "example": "v-0a96c19b1a41c03999"
          }
        }
      },
      "e_404_not_found": {
        "description": "Error: Not Found",
        "type": "object",
        "x-examples": {
          "example-1": {
            "code": 404,
            "key": "not_found",
            "message": "Resource not found",
            "details": "Cannot find voucher with id IrKORhS",
            "request_id": "v-0a96cd820301c0483a",
            "resource_id": "IrKORhS",
            "resource_type": "voucher"
          }
        },
        "title": "not_found",
        "properties": {
          "code": {
            "type": "integer",
            "default": 404,
            "description": "Error's HTTP status code."
          },
          "key": {
            "type": "string",
            "default": "not_found",
            "description": "Short string describing the kind of error which occurred."
          },
          "message": {
            "type": "string",
            "default": "Resource not found",
            "description": "A human-readable message providing a short description about the error."
          },
          "details": {
            "type": "string",
            "example": "Cannot find voucher with id IrKORhS",
            "description": "A human-readable message providing more details about the error."
          },
          "request_id": {
            "type": "string",
            "example": "v-0a96cd820301c0483a"
          },
          "resource_id": {
            "type": "string",
            "example": "IrKORhS"
          },
          "resource_type": {
            "type": "string",
            "example": "voucher"
          }
        }
      },
      "e_400_invalid_payload": {
        "title": "invalid_payload",
        "type": "object",
        "description": "Error: Bad Request &rarr; Invalid Payload",
        "properties": {
          "code": {
            "type": "integer",
            "default": 400,
            "description": "Error's HTTP status code."
          },
          "key": {
            "type": "string",
            "default": "not_enough_codes",
            "description": "Short string describing the kind of error which occurred."
          },
          "message": {
            "type": "string",
            "default": "Invalid payload",
            "description": "A human-readable message providing a short description about the error."
          },
          "details": {
            "type": "string",
            "example": "Property should have required property 'metadata'",
            "description": "A human-readable message providing more details about the error."
          },
          "request_id": {
            "type": "string",
            "example": "v-0a884c6be8c3756f42"
          }
        }
      },
      "e_400_not_enough_codes": {
        "title": "not_enough_codes",
        "type": "object",
        "description": "Error: Bad Request &rarr; Not enough codes",
        "properties": {
          "code": {
            "type": "integer",
            "default": 400,
            "description": "Error's HTTP status code."
          },
          "key": {
            "type": "string",
            "default": "not_enough_codes",
            "description": "Short string describing the kind of error which occurred."
          },
          "message": {
            "type": "string",
            "default": "Not enough codes",
            "description": "A human-readable message providing a short description about the error."
          },
          "details": {
            "type": "string",
            "example": "Specify at least 1 code in codes.",
            "description": "A human-readable message providing more details about the error."
          },
          "request_id": {
            "type": "string",
            "example": "v-0a885062c80375740f"
          }
        }
      },
      "e_409_duplicate_found": {
        "title": "not_enough_codes",
        "type": "object",
        "description": "Error: Conflict &rarr; Duplicated resource found",
        "properties": {
          "code": {
            "type": "integer",
            "default": 409,
            "description": "Error's HTTP status code."
          },
          "key": {
            "type": "string",
            "default": "duplicate_found",
            "description": "Short string describing the kind of error which occurred."
          },
          "message": {
            "type": "string",
            "default": "Duplicated resource found",
            "description": "A human-readable message providing a short description about the error."
          },
          "details": {
            "type": "string",
            "example": "Duplicated voucher exists with id NEW-WELCOME-COUPON",
            "description": "A human-readable message providing more details about the error."
          },
          "request_id": {
            "type": "string",
            "example": "v-0aa36e570e44cb3bdd"
          },
          "resource_id": {
            "type": "string",
            "example": "NEW-WELCOME-COUPON"
          },
          "resource_type": {
            "type": "string",
            "example": "voucher"
          }
        }
      },
      "1_obj_voucher_object_discount_amount": {
        "title": "Amount discount type",
        "type": "object",
        "description": "Amount discount type.",
        "properties": {
          "type": {
            "type": "string",
            "default": "AMOUNT",
            "description": "Applies an amount discount"
          },
          "amount_off": {
            "type": "integer",
            "example": 100,
            "description": "Amount taken off the subtotal of a price. Value is multiplied by 100 to precisely represent 2 decimal places. For example, a $10 discount is written as 1000."
          },
          "effect": {
            "type": "string",
            "enum": [
              "APPLY_TO_ORDER",
              "APPLY_TO_ITEMS",
              "APPLY_TO_ITEMS_PROPORTIONALLY",
              "APPLY_TO_ITEMS_PROPORTIONALLY_BY_QUANTITY"
            ],
            "description": "Defines how the discount is applied to the customer's order"
          }
        }
      },
      "1_obj_voucher_object_discount_percentage": {
        "title": "Percentage discount type",
        "type": "object",
        "description": "Percentage discount type.",
        "properties": {
          "type": {
            "type": "string",
            "default": "PERCENT",
            "description": "Applies a percentage discount"
          },
          "percent_off": {
            "type": "integer",
            "example": 10,
            "description": "Percent taken off the subtotal amount",
            "minimum": 0,
            "maximum": 100
          },
          "effect": {
            "type": "string",
            "enum": [
              "APPLY_TO_ORDER",
              "APPLY_TO_ITEMS"
            ],
            "description": "Defines how the discount is applied to the customer's order"
          }
        }
      },
      "1_obj_voucher_object_discount_fixed": {
        "title": "Fixed discount type",
        "description": "Fixed discount type.",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "default": "FIXED",
            "description": "Sets a fixed total on cart or item(s) and then calculates the discount to apply"
          },
          "fixed_amount": {
            "type": "integer",
            "description": "Amount taken off the subtotal of a price. Value is multiplied by 100 to precisely represent 2 decimal places. For example, a $10 discount is written as 1000.",
            "example": 1000
          },
          "effect": {
            "type": "string",
            "enum": [
              "APPLY_TO_ORDER",
              "APPLY_TO_ITEMS"
            ],
            "description": "- **APPLY\\_TO\\_ORDER**: Set fixed total on the whole cart. Discount will be calculated dynamically, based on fixed amount value. For example, if fixed amount is set to equal $10 and order amount equals $25, then the calculated discount will be $15.  \n- **APPLY\\_TO\\_ITEMS**: This type of deal applies a new price for line items. \n  Default rules:\n   - During redemption, prices will change only if the new one is lower than the old one.\n    - If a product price in the collection and the new product price you have set up differs, then the new product price will be passed during the redemption.\n    - When a product is in two collections, we always change the price to the lowest.\n    - The new price for products with several SKUs will force the price change for SKUs if their price is higher than the new price."
          }
        }
      },
      "1_obj_voucher_object_discount_unit_one": {
        "title": "Unit discount type, single item",
        "type": "object",
        "description": "Single item type.",
        "properties": {
          "type": {
            "type": "string",
            "default": "UNIT",
            "description": "Applies a full value discount to item(s)"
          },
          "unit_off": {
            "type": "number",
            "description": "Number of units to subtract from the subtotal",
            "example": 1,
            "format": "float"
          },
          "unit_type": {
            "type": "string",
            "description": "The product deemed as free, chosen from product  inventory (e.g. time, items)",
            "example": "prod_0a9f9aeddb019a42db"
          },
          "effect": {
            "type": "string",
            "enum": [
              "ADD_NEW_ITEMS",
              "ADD_MISSING_ITEMS"
            ],
            "default": "ADD_MISSING_ITEMS",
            "description": "Defines how the unit is added to the customer's order"
          }
        }
      },
      "1_obj_voucher_object_discount_unit_multiple": {
        "title": "Unite discount type, multiple items",
        "type": "object",
        "description": "Multiple item types.",
        "properties": {
          "type": {
            "type": "string",
            "description": "Applies a full value discount to item(s)",
            "default": "UNIT"
          },
          "effect": {
            "type": "string",
            "default": "ADD_MANY_ITEMS",
            "description": "Defines the effect for adding multiple item types."
          },
          "units": {
            "type": "array",
            "description": "Array of objects defining items to be offered for free. Each item type can have a different discount effect assigned.",
            "items": {
              "type": "object",
              "description": "Object defining a unit discount.",
              "properties": {
                "unit_off": {
                  "type": "integer",
                  "description": "Number of units to subtract from the subtotal",
                  "example": 1
                },
                "unit_type": {
                  "type": "string",
                  "description": "The product deemed as free, chosen from product  inventory (e.g. time, items)",
                  "example": "prod_0a9f9aeddb019a42db"
                },
                "effect": {
                  "type": "string",
                  "enum": [
                    "ADD_NEW_ITEMS",
                    "ADD_MISSING_ITEMS"
                  ],
                  "description": "Defines how the unit is added to the customer's order"
                }
              }
            }
          }
        }
      },
      "1_obj_voucher_object_discount_shipping": {
        "title": "Shipping discount type",
        "description": "Shipping discount type.",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "default": "UNIT",
            "description": "Applies a full value discount to item(s)"
          },
          "unit_off": {
            "type": "number",
            "format": "float",
            "description": "Subtracts 1 shipping item from the subtotal",
            "default": 1
          },
          "unit_type": {
            "type": "string",
            "description": "The shipping product deemed as free",
            "default": "prod_5h1pp1ng"
          },
          "effect": {
            "type": "string",
            "enum": [
              "ADD_MISSING_ITEMS"
            ],
            "description": "Defines how the unit is added to the customer's order",
            "default": "ADD_MISSING_ITEMS"
          }
        }
      },
      "1_obj_voucher_object_discount_amount_POST": {
        "title": "Create amount discount type",
        "type": "object",
        "description": "Create amount discount type.",
        "properties": {
          "type": {
            "type": "string",
            "default": "AMOUNT",
            "description": "Applies an amount discount"
          },
          "amount_off": {
            "type": "integer",
            "example": 100,
            "description": "Amount taken off the subtotal of a price. Value is multiplied by 100 to precisely represent 2 decimal places. For example, a $10 discount is written as 1000."
          },
          "effect": {
            "type": "string",
            "enum": [
              "APPLY_TO_ORDER",
              "APPLY_TO_ITEMS",
              "APPLY_TO_ITEMS_PROPORTIONALLY",
              "APPLY_TO_ITEMS_PROPORTIONALLY_BY_QUANTITY"
            ],
            "description": "Defines how the discount is applied to the customer's order"
          }
        }
      },
      "1_obj_voucher_object_discount_percentage_POST": {
        "title": "Create percentage discount type",
        "type": "object",
        "description": "Create percentage discount type.",
        "properties": {
          "type": {
            "type": "string",
            "default": "PERCENT",
            "description": "Applies a percentage discount"
          },
          "percent_off": {
            "type": "integer",
            "example": 10,
            "description": "Percent taken off the subtotal amount",
            "minimum": 0,
            "maximum": 100
          },
          "effect": {
            "type": "string",
            "enum": [
              "APPLY_TO_ORDER",
              "APPLY_TO_ITEMS"
            ],
            "description": "Defines how the discount is applied to the customer's order"
          }
        }
      },
      "1_obj_voucher_object_discount_fixed_POST": {
        "title": "Create fixed discount type",
        "description": "Create fixed discount type.",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "default": "FIXED",
            "description": "Sets a fixed total on cart or item(s) and then calculates the discount to apply"
          },
          "fixed_amount": {
            "type": "integer",
            "description": "Amount taken off the subtotal of a price. Value is multiplied by 100 to precisely represent 2 decimal places. For example, a $10 discount is written as 1000.",
            "example": 1000
          },
          "effect": {
            "type": "string",
            "enum": [
              "APPLY_TO_ORDER",
              "APPLY_TO_ITEMS"
            ],
            "description": "- **APPLY\\_TO\\_ORDER**: Set fixed total on the whole cart. Discount will be calculated dynamically, based on fixed amount value. For example, if fixed amount is set to equal $10 and order amount equals $25, then the calculated discount will be $15.  \n- **APPLY\\_TO\\_ITEMS**: This type of deal applies a new price for line items. \n  Default rules:\n   - During redemption, prices will change only if the new one is lower than the old one.\n    - If a product price in the collection and the new product price you have set up differs, then the new product price will be passed during the redemption.\n    - When a product is in two collections, we always change the price to the lowest.\n    - The new price for products with several SKUs will force the price change for SKUs if their price is higher than the new price."
          }
        }
      },
      "1_obj_voucher_object_discount_unit_one_POST": {
        "title": "Update unit discount type, single item",
        "type": "object",
        "description": "Define single item type.",
        "properties": {
          "type": {
            "type": "string",
            "default": "UNIT",
            "description": "Applies a full value discount to item(s)"
          },
          "unit_off": {
            "type": "number",
            "description": "Number of units to subtract from the subtotal",
            "example": 1,
            "format": "float"
          },
          "unit_type": {
            "type": "string",
            "description": "The product deemed as free, chosen from product  inventory (e.g. time, items)",
            "example": "prod_0a9f9aeddb019a42db"
          },
          "effect": {
            "type": "string",
            "enum": [
              "ADD_NEW_ITEMS",
              "ADD_MISSING_ITEMS"
            ],
            "default": "ADD_MISSING_ITEMS",
            "description": "Defines how the unit is added to the customer's order"
          }
        }
      },
      "1_obj_voucher_object_discount_unit_multiple_POST": {
        "title": "Create unite discount type, multiple items",
        "type": "object",
        "description": "Define multiple item types.",
        "properties": {
          "type": {
            "type": "string",
            "description": "Applies a full value discount to item(s)",
            "default": "UNIT"
          },
          "effect": {
            "type": "string",
            "default": "ADD_MANY_ITEMS",
            "description": "Defines the effect for adding multiple item types."
          },
          "units": {
            "type": "array",
            "description": "Array of objects defining items to be offered for free. Each item type can have a different discount effect assigned.",
            "items": {
              "type": "object",
              "description": "Object defining a unit discount.",
              "properties": {
                "unit_off": {
                  "type": "integer",
                  "description": "Number of units to subtract from the subtotal",
                  "example": 1
                },
                "unit_type": {
                  "type": "string",
                  "description": "The product deemed as free, chosen from product  inventory (e.g. time, items)",
                  "example": "prod_0a9f9aeddb019a42db"
                },
                "effect": {
                  "type": "string",
                  "enum": [
                    "ADD_NEW_ITEMS",
                    "ADD_MISSING_ITEMS"
                  ],
                  "description": "Defines how the unit is added to the customer's order"
                }
              }
            }
          }
        }
      },
      "1_obj_voucher_object_discount_shipping_POST": {
        "title": "Create shipping discount type",
        "description": "Create shipping discount type.",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "default": "UNIT",
            "description": "Applies a full value discount to item(s)"
          },
          "unit_off": {
            "type": "number",
            "format": "float",
            "description": "Subtracts 1 shipping item from the subtotal",
            "default": 1
          },
          "unit_type": {
            "type": "string",
            "description": "The shipping product deemed as free",
            "default": "prod_5h1pp1ng"
          },
          "effect": {
            "type": "string",
            "enum": [
              "ADD_MISSING_ITEMS"
            ],
            "description": "Defines how the unit is added to the customer's order",
            "default": "ADD_MISSING_ITEMS"
          }
        }
      },
      "1_obj_voucher_object_discount_amount_PUT": {
        "title": "Update amount discount type",
        "type": "object",
        "description": "Update amount discount type.",
        "properties": {
          "type": {
            "type": "string",
            "default": "AMOUNT",
            "description": "Applies an amount type discount. **Requires** child attribute\n `type`=`AMOUNT` when modifying this discount."
          },
          "amount_off": {
            "type": "integer",
            "example": 100,
            "description": "Amount taken off the subtotal of a price. Value is multiplied by 100 to precisely represent 2 decimal places. For example, a $10 discount is written as 1000."
          },
          "effect": {
            "type": "string",
            "enum": [
              "APPLY_TO_ORDER",
              "APPLY_TO_ITEMS",
              "APPLY_TO_ITEMS_PROPORTIONALLY",
              "APPLY_TO_ITEMS_PROPORTIONALLY_BY_QUANTITY"
            ],
            "description": "Defines how the discount is applied to the customer's order"
          }
        }
      },
      "1_obj_voucher_object_discount_percentage_PUT": {
        "title": "Update percentage discount type",
        "type": "object",
        "description": "Update percentage discount type.",
        "properties": {
          "percent_off": {
            "type": "integer",
            "example": 10,
            "description": "Percent taken off the subtotal amount",
            "minimum": 0,
            "maximum": 100
          },
          "effect": {
            "type": "string",
            "enum": [
              "APPLY_TO_ORDER",
              "APPLY_TO_ITEMS"
            ],
            "description": "Defines how the discount is applied to the customer's order"
          }
        }
      },
      "1_obj_voucher_object_discount_fixed_PUT": {
        "title": "Update fixed discount type",
        "type": "object",
        "description": "Update fixed discount type.",
        "properties": {
          "type": {
            "type": "string",
            "default": "FIXED",
            "description": "Applies a fixed type discount. **Requires** child attribute\n `type`=`FIXED` when modifying this discount."
          },
          "fixed_amount": {
            "description": "Amount taken off the subtotal of a price. Value is multiplied by 100 to precisely represent 2 decimal places. For example, a $10 discount is written as 1000.",
            "example": "1000",
            "type": "integer"
          },
          "effect": {
            "type": "string",
            "enum": [
              "APPLY_TO_ORDER",
              "APPLY_TO_ITEMS"
            ],
            "description": "- **APPLY\\_TO\\_ORDER**: Set fixed total on the whole cart. Discount will be calculated dynamically, based on fixed amount value. For example, if fixed amount is set to equal $10 and order amount equals $25, then the calculated discount will be $15.  \n- **APPLY\\_TO\\_ITEMS**: This type of deal applies a new price for line items. \n  Default rules:\n   - During redemption, prices will change only if the new one is lower than the old one.\n    - If a product price in the collection and the new product price you have set up differs, then the new product price will be passed during the redemption.\n    - When a product is in two collections, we always change the price to the lowest.\n    - The new price for products with several SKUs will force the price change for SKUs if their price is higher than the new price."
          }
        }
      },
      "1_obj_voucher_object_discount_unit_one_PUT": {
        "title": "Update unit discount type, single item",
        "type": "object",
        "description": "Define single item type.",
        "properties": {
          "type": {
            "type": "string",
            "description": "Applies a full value discount to item(s). **Requires** child attribute `type`=`UNIT` when modifying this discount.",
            "default": "UNIT"
          },
          "unit_off": {
            "type": "number",
            "format": "float",
            "description": "Number of units to subtract from the subtotal",
            "example": 1
          },
          "unit_type": {
            "type": "string",
            "description": "The product deemed as free, chosen from product  inventory (e.g. time, items)",
            "example": "prod_0a9f9aeddb019a42db"
          },
          "effect": {
            "type": "string",
            "enum": [
              "ADD_MISSING_ITEMS",
              "ADD_NEW_ITEMS"
            ],
            "description": "Defines how the unit is added to the customer's order",
            "default": "ADD_MISSING_ITEMS"
          }
        }
      },
      "1_obj_voucher_object_discount_unit_multiple_PUT": {
        "title": "Update unit discount type, multiple items",
        "type": "object",
        "description": "Define multiple item types.",
        "properties": {
          "type": {
            "type": "string",
            "description": "Applies a full value discount to item(s)",
            "default": "UNIT"
          },
          "effect": {
            "type": "string",
            "default": "ADD_MANY_ITEMS",
            "description": "Defines the effect for adding multiple item types."
          },
          "units": {
            "type": "array",
            "description": "Array of objects defining items to be offered for free. Each item type can have a different discount effect assigned.",
            "items": {
              "type": "object",
              "description": "Object defining a unit discount.",
              "properties": {
                "unit_off": {
                  "type": "integer",
                  "description": "Number of units to subtract from the subtotal",
                  "example": 1
                },
                "unit_type": {
                  "type": "string",
                  "description": "The product deemed as free, chosen from product  inventory (e.g. time, items)",
                  "example": "prod_0a9f9aeddb019a42db"
                },
                "effect": {
                  "type": "string",
                  "enum": [
                    "ADD_NEW_ITEMS",
                    "ADD_MISSING_ITEMS"
                  ],
                  "description": "Defines how the unit is added to the customer's order"
                }
              }
            }
          }
        }
      },
      "1_obj_voucher_object_discount_shipping_PUT": {
        "title": "Update shipping discount type",
        "description": "Update shipping discount type.",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "default": "UNIT",
            "description": "Applies a full value discount to item(s)"
          },
          "unit_off": {
            "type": "number",
            "format": "float",
            "description": "Subtracts 1 shipping item from the subtotal",
            "default": 1
          },
          "unit_type": {
            "type": "string",
            "description": "The shipping product deemed as free",
            "default": "prod_5h1pp1ng"
          },
          "effect": {
            "type": "string",
            "enum": [
              "ADD_MISSING_ITEMS"
            ],
            "description": "Defines how the unit is added to the customer's order",
            "default": "ADD_MISSING_ITEMS"
          }
        }
      },
      "1_obj_vouchers_import_discount_amount": {
        "title": "Import amount discount type",
        "type": "object",
        "description": "Import amount discount type.",
        "properties": {
          "type": {
            "type": "string",
            "default": "AMOUNT",
            "description": "Applies an amount type discount. **Requires** child attribute\n `type`=`AMOUNT` when importing this discount."
          },
          "amount_off": {
            "type": "integer",
            "example": 100,
            "description": "Amount taken off the subtotal of a price. Value is multiplied by 100 to precisely represent 2 decimal places. For example, a $10 discount is written as 1000."
          },
          "effect": {
            "type": "string",
            "enum": [
              "APPLY_TO_ORDER",
              "APPLY_TO_ITEMS",
              "APPLY_TO_ITEMS_PROPORTIONALLY",
              "APPLY_TO_ITEMS_PROPORTIONALLY_BY_QUANTITY"
            ],
            "description": "Defines how the discount is applied to the customer's order"
          }
        },
        "required": [
          "type",
          "amount_off"
        ]
      },
      "1_obj_vouchers_import_discount_percentage": {
        "title": "Import percentage discount type",
        "type": "object",
        "description": "Import percentage discount type.",
        "properties": {
          "type": {
            "type": "string",
            "description": "Applies a percentage discount",
            "default": "PERCENT"
          },
          "percent_off": {
            "type": "integer",
            "example": 10,
            "description": "Percent taken off the subtotal amount",
            "minimum": 0,
            "maximum": 100
          },
          "effect": {
            "type": "string",
            "enum": [
              "APPLY_TO_ORDER",
              "APPLY_TO_ITEMS"
            ],
            "description": "Defines how the discount is applied to the customer's order"
          }
        },
        "required": [
          "type",
          "percent_off"
        ]
      },
      "1_obj_vouchers_import_discount_fixed": {
        "title": "Import fixed discount type",
        "type": "object",
        "description": "Import fixed discount type.",
        "properties": {
          "type": {
            "type": "string",
            "default": "FIXED",
            "description": "Applies a fixed type discount. **Requires** child attribute\n `type`=`FIXED` when updating this discount."
          },
          "fixed_amount": {
            "description": "Amount taken off the subtotal of a price. Value is multiplied by 100 to precisely represent 2 decimal places. For example, a $10 discount is written as 1000.",
            "example": "1000",
            "type": "integer"
          },
          "effect": {
            "type": "string",
            "enum": [
              "APPLY_TO_ORDER",
              "APPLY_TO_ITEMS"
            ],
            "description": "- **APPLY\\_TO\\_ORDER**: Set fixed total on the whole cart. Discount will be calculated dynamically, based on fixed amount value. For example, if fixed amount is set to equal $10 and order amount equals $25, then the calculated discount will be $15.  \n- **APPLY\\_TO\\_ITEMS**: This type of deal applies a new price for line items. \n  Default rules:\n   - During redemption, prices will change only if the new one is lower than the old one.\n    - If a product price in the collection and the new product price you have set up differs, then the new product price will be passed during the redemption.\n    - When a product is in two collections, we always change the price to the lowest.\n    - The new price for products with several SKUs will force the price change for SKUs if their price is higher than the new price."
          }
        },
        "required": [
          "type",
          "fixed_amount"
        ]
      },
      "1_obj_vouchers_import_discount_unit_one": {
        "title": "Import unit discount type, single item",
        "type": "object",
        "description": "Define single item type.",
        "properties": {
          "type": {
            "type": "string",
            "description": "Applies a full value discount to item(s). **Requires** child attribute `type`=`UNIT` when importing this discount.",
            "default": "UNIT"
          },
          "unit_off": {
            "type": "number",
            "format": "float",
            "description": "Number of units to subtract from the subtotal",
            "example": 1
          },
          "unit_type": {
            "type": "string",
            "description": "The product deemed as free, chosen from product  inventory (e.g. time, items)",
            "example": "prod_0a9f9aeddb019a42db"
          },
          "effect": {
            "type": "string",
            "enum": [
              "ADD_MISSING_ITEMS",
              "ADD_NEW_ITEMS"
            ],
            "description": "Defines how the unit is added to the customer's order",
            "default": "ADD_MISSING_ITEMS"
          }
        },
        "required": [
          "type",
          "unit_off"
        ]
      },
      "1_obj_vouchers_import_discount_unit_multiple": {
        "title": "Import unit discount type, multiple items",
        "type": "object",
        "description": "Define multiple item types.",
        "properties": {
          "type": {
            "type": "string",
            "description": "Applies a full value discount to item(s)",
            "default": "UNIT"
          },
          "effect": {
            "type": "string",
            "default": "ADD_MANY_ITEMS",
            "description": "Defines the effect for adding multiple item types."
          },
          "units": {
            "type": "array",
            "description": "Array of objects defining items to be offered for free. Each item type can have a different discount effect assigned.",
            "items": {
              "type": "object",
              "description": "Object defining a unit discount.",
              "properties": {
                "unit_off": {
                  "type": "integer",
                  "description": "Number of units to subtract from the subtotal",
                  "example": 1
                },
                "unit_type": {
                  "type": "string",
                  "description": "The product deemed as free, chosen from product  inventory (e.g. time, items)",
                  "example": "prod_0a9f9aeddb019a42db"
                },
                "effect": {
                  "type": "string",
                  "enum": [
                    "ADD_NEW_ITEMS",
                    "ADD_MISSING_ITEMS"
                  ],
                  "description": "Defines how the unit is added to the customer's order"
                }
              }
            }
          }
        },
        "required": [
          "type",
          "effect",
          "units"
        ]
      },
      "1_obj_vouchera_import_discount_shipping": {
        "title": "Import shipping discount type",
        "description": "Import shipping discount type.",
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Applies a full value discount to item(s)",
            "default": "UNIT"
          },
          "unit_off": {
            "type": "number",
            "format": "float",
            "description": "Subtracts 1 shipping item from the subtotal",
            "default": 1
          },
          "unit_type": {
            "type": "string",
            "description": "The shipping product deemed as free",
            "default": "prod_5h1pp1ng"
          },
          "effect": {
            "type": "string",
            "enum": [
              "ADD_MISSING_ITEMS"
            ],
            "description": "Defines how the unit is added to the customer's order",
            "default": "ADD_MISSING_ITEMS"
          }
        },
        "required": [
          "type",
          "unit_off",
          "unit_type"
        ]
      },
      "1_req_vouchers_code_balance": {
        "title": "RequestBodyVouchersCodeBalance",
        "type": "object",
        "description": "Request body schema for vouchers/{code}/balance.",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "The incremental amout to be added to the current balance on the gift card. Value is multiplied by 100 to precisely represent 2 decimal places. For example, $100 amount is written as 10000."
          }
        },
        "required": [
          "amount"
        ]
      },
      "1_res_vouchers_code_balance": {
        "description": "Response body schema for vouchers/{code}/balance.",
        "type": "object",
        "x-examples": {
          "example-1": {
            "amount": 100,
            "total": 10100,
            "balance": 10100,
            "type": "gift_voucher",
            "object": "balance",
            "related_object": {
              "type": "voucher",
              "id": "v_4Bd3aX7eXjHbe7Ef7on8YsLWBynsT4jq"
            }
          }
        },
        "examples": [],
        "title": "ResponseBodyVouchersCodeBalance",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "The incremental amout added to the current balance on the gift card. Value is multiplied by 100 to precisely represent 2 decimal places. For example, $100 amount is written as 10000."
          },
          "total": {
            "type": "integer"
          },
          "balance": {
            "type": "integer",
            "description": "The balance after adding an additional amount. Value is multiplied by 100 to precisely represent 2 decimal places. For example, $100 amount is written as 10000."
          },
          "type": {
            "type": "string",
            "description": "The type of voucher being modified.",
            "default": "gift_voucher"
          },
          "object": {
            "type": "string",
            "description": "The type of object represented by JSON. Default is `balance`.",
            "default": "balance"
          },
          "related_object": {
            "type": "object",
            "description": "Defines the object that is being modified with the values that are returned in the balance object.",
            "properties": {
              "type": {
                "type": "string",
                "description": "The object being modified.",
                "default": "voucher"
              },
              "id": {
                "type": "string",
                "description": "Identifies the voucher that is being modified, this is the id that was assigned by the Voucherify API.",
                "example": "v_4Bd3aX7eXjHbe7Ef7on8YsLWBynsT4jq"
              }
            }
          }
        }
      },
      "1_req_vouchers_import": {
        "title": "VouchersImport",
        "type": "array",
        "description": "Request body schema for vouchers/import.",
        "items": {
          "anyOf": [
            {
              "$ref": "#/components/schemas/1_obj_vouchers_import_gift_voucher"
            },
            {
              "$ref": "#/components/schemas/1_obj_vouchers_import_discount_voucher"
            }
          ]
        }
      },
      "1_obj_vouchers_import_gift_voucher": {
        "title": "Import Gift Voucher",
        "type": "object",
        "description": "Object model for gift voucher object being imported.",
        "properties": {
          "code": {
            "type": "string",
            "description": "Value representing the imported code."
          },
          "category": {
            "type": "string",
            "description": "Tag defining the category that this voucher belongs to. Useful when listing vouchers using the List Vouchers endpoint."
          },
          "active": {
            "type": "boolean",
            "description": "A flag to toggle the voucher on or off. You can disable a voucher even though it's within the active period defined by the `start_date` and `expiration_date`.  \n\n- `true` indicates an *active* voucher\n- `false` indicates an *inactive* voucher"
          },
          "type": {
            "type": "string",
            "description": "Represents the voucher type.  ",
            "default": "gift_voucher"
          },
          "gift": {
            "type": "object",
            "properties": {
              "amount": {
                "type": "string",
                "description": "Total gift card income. Value is multiplied by 100 to precisely represent 2 decimal places. For example, $100 amount is written as 10000."
              }
            },
            "required": [
              "amount"
            ]
          },
          "start_date": {
            "type": "string",
            "description": "Activation timestamp in ISO 8601 format. Voucher is *inactive before* this date. Start date defines when the code starts to be active.",
            "enum": [
              "YYYY-MM-DD",
              "YYYY-MM-DDTHH",
              "YYYY-MM-DDTHH:mm",
              "YYYY-MM-DDTHH:mm:ss",
              "YYYY-MM-DDTHH:mm:ssZ",
              "YYYY-MM-DDTHH:mm:ssZ",
              "YYYY-MM-DDTHH:mm:ss.SSSZ"
            ]
          },
          "expiration_date": {
            "type": "string",
            "enum": [
              "YYYY-MM-DD",
              "YYYY-MM-DDTHH",
              "YYYY-MM-DDTHH:mm",
              "YYYY-MM-DDTHH:mm:ss",
              "YYYY-MM-DDTHH:mm:ssZ",
              "YYYY-MM-DDTHH:mm:ssZ",
              "YYYY-MM-DDTHH:mm:ss.SSSZ"
            ],
            "description": "Expiration date defines when the code expires. Expiration timestamp in ISO 8601 format.  Voucher is *inactive after* this date."
          },
          "redemption": {
            "type": "object",
            "description": "Stores the quantity of redemptions that can be applied to the voucher.",
            "properties": {
              "quantity": {
                "type": "integer",
                "description": "How many times a voucher can be redeemed. A `null` value means unlimited.",
                "example": 10
              }
            }
          },
          "additional_info": {
            "type": "string",
            "description": "An optional field to keep any extra textual information about the code such as a code description and details."
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the code. A set of key/value pairs that you can attach to a voucher object. It can be useful for storing additional information about the voucher in a structured format."
          }
        },
        "required": [
          "code"
        ]
      },
      "1_obj_vouchers_import_discount_voucher": {
        "title": "Import Discount Voucher",
        "type": "object",
        "description": "Object model for discount voucher object being imported.",
        "properties": {
          "code": {
            "type": "string",
            "description": "Value representing the imported code."
          },
          "category": {
            "type": "string",
            "description": "Tag defining the category that this voucher belongs to. Useful when listing vouchers using the List Vouchers endpoint."
          },
          "active": {
            "type": "boolean",
            "description": "A flag to toggle the voucher on or off. You can disable a voucher even though it's within the active period defined by the `start_date` and `expiration_date`.  \n\n- `true` indicates an *active* voucher\n- `false` indicates an *inactive* voucher"
          },
          "type": {
            "type": "string",
            "description": "Represents the voucher type.",
            "default": "discount_voucher"
          },
          "discount": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/1_obj_vouchers_import_discount_amount"
              },
              {
                "$ref": "#/components/schemas/1_obj_vouchers_import_discount_percentage"
              },
              {
                "$ref": "#/components/schemas/1_obj_vouchers_import_discount_fixed"
              },
              {
                "$ref": "#/components/schemas/1_obj_vouchers_import_discount_unit_one"
              },
              {
                "$ref": "#/components/schemas/1_obj_vouchers_import_discount_unit_multiple"
              },
              {
                "$ref": "#/components/schemas/1_obj_vouchera_import_discount_shipping"
              }
            ]
          },
          "start_date": {
            "type": "string",
            "description": "Activation timestamp in ISO 8601 format. Voucher is *inactive before* this date. Start date defines when the code starts to be active.",
            "enum": [
              "YYYY-MM-DD",
              "YYYY-MM-DDTHH",
              "YYYY-MM-DDTHH:mm",
              "YYYY-MM-DDTHH:mm:ss",
              "YYYY-MM-DDTHH:mm:ssZ",
              "YYYY-MM-DDTHH:mm:ssZ",
              "YYYY-MM-DDTHH:mm:ss.SSSZ"
            ]
          },
          "expiration_date": {
            "type": "string",
            "enum": [
              "YYYY-MM-DD",
              "YYYY-MM-DDTHH",
              "YYYY-MM-DDTHH:mm",
              "YYYY-MM-DDTHH:mm:ss",
              "YYYY-MM-DDTHH:mm:ssZ",
              "YYYY-MM-DDTHH:mm:ssZ",
              "YYYY-MM-DDTHH:mm:ss.SSSZ"
            ],
            "description": "Expiration date defines when the code expires. Expiration timestamp in ISO 8601 format.  Voucher is *inactive after* this date."
          },
          "redemption": {
            "type": "object",
            "description": "Stores the quantity of redemptions that can be applied to the voucher.",
            "properties": {
              "quantity": {
                "type": "integer",
                "description": "How many times a voucher can be redeemed. A `null` value means unlimited.",
                "example": 10
              }
            }
          },
          "additional_info": {
            "type": "string",
            "description": "An optional field to keep any extra textual information about the code such as a code description and details."
          },
          "metadata": {
            "type": "object",
            "description": "The metadata object stores all custom attributes assigned to the code. A set of key/value pairs that you can attach to a voucher object. It can be useful for storing additional information about the voucher in a structured format."
          }
        },
        "required": [
          "code"
        ]
      },
      "1_res_vouchers_import": {
        "title": "VouchersImport",
        "type": "object",
        "description": "Response body schema for vouchers/import.",
        "properties": {
          "async_action_id": {
            "type": "string",
            "description": "The id of the scheduled async action. It informs that your request has been accepted and voucher(s) will be added to the repository asynchronously. To check the import status and result, copy async action id from the response and pass it using this endpoint[hyperlink-endpoint].",
            "example": "aa_0aacbd5a08c5b006b0"
          }
        }
      },
      "1_req_vouchers_importCSV": {
        "type": "object",
        "title": "RequestBodyImportVouchersCSV",
        "description": "Request body schema for vouchers/importCSV",
        "format": "binary",
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "description": "The property name 'file' will be used for the file path."
          }
        }
      },
      "1_res_vouchers_qualification": {
        "title": "ResponseBodyVouchersQualification",
        "type": "object",
        "description": "Response body schema for vouchers/qualification",
        "properties": {
          "object": {
            "type": "string",
            "default": "list",
            "description": "The type of object represented by JSON. Default is `list`."
          },
          "data_ref": {
            "type": "string",
            "default": "data"
          },
          "data": {
            "type": "array",
            "description": "Array of qualified vouchers.",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/1_obj_voucher_object"
                },
                {
                  "$ref": "#/components/schemas/1_res_obj_vouchers_qualification_applicable_to"
                },
                {
                  "$ref": "#/components/schemas/1_res_obj_vouchers_qualification_inapplicable_to"
                }
              ]
            }
          },
          "total": {
            "type": "integer",
            "example": 37,
            "description": "Total valid and active vouchers matching the qualification criteria in given context. "
          },
          "id": {
            "type": "string",
            "example": "qfl_nAMVLoxIqSLh9O6YmfoAXRPG"
          },
          "created_at": {
            "type": "string",
            "example": "2022-02-25T13:32:08.734Z",
            "description": "Timestamp representing the date and time when the qualification was created in ISO 8601 format.",
            "format": "date-time"
          },
          "tracking_id": {
            "type": "string"
          }
        }
      },
      "1_res_obj_vouchers_qualification_applicable_to": {
        "title": "ApplicableToObject",
        "type": "object",
        "properties": {
          "applicable_to": {
            "type": "object",
            "properties": {
              "data": {
                "type": "array",
                "items": {}
              },
              "total": {
                "type": "integer"
              },
              "data_ref": {
                "type": "string",
                "default": "data"
              },
              "object": {
                "type": "string",
                "default": "list"
              }
            }
          }
        },
        "description": ""
      },
      "1_res_obj_vouchers_qualification_inapplicable_to": {
        "title": "InapplicableToObject",
        "type": "object",
        "properties": {
          "inapplicable_to": {
            "type": "object",
            "properties": {
              "data": {
                "type": "array",
                "items": {}
              },
              "total": {
                "type": "integer"
              },
              "data_ref": {
                "type": "string",
                "default": "data"
              },
              "object": {
                "type": "string",
                "default": "list"
              }
            }
          }
        }
      },
      "1_req_vouchers_bulk_async": {
        "title": "RequestBodyVouchersBulkAsync",
        "type": "array",
        "description": "Array of objects each containing the code to be updated and the metadata object containing the key/value pairs to be updated.",
        "items": {
          "type": "object",
          "properties": {
            "code": {
              "type": "string",
              "description": "An array of voucher codes."
            },
            "metadata": {
              "type": "object",
              "description": "The metadata object stores all custom attributes assigned to the code. A set of key/value pairs that you can attach to a voucher object. It can be useful for storing additional information about the voucher in a structured format."
            }
          }
        }
      },
      "1_res_vouchers_bulk_async": {
        "title": "ResponseBodyVouchersMetadataAsync",
        "type": "object",
        "description": "Response body schema for /vouchers/bulk/async.",
        "properties": {
          "async_action_id": {
            "type": "string",
            "description": "The id of the scheduled async action. It informs that your request has been accepted and voucher(s) will be updated in the repository asynchronously. To check the update status and result, copy async action id from the response and pass it using this endpoint[hyperlink-endpoint].",
            "example": "aa_0ab2df092385be5ca5"
          }
        }
      },
      "1_req_vouchers_qualification": {
        "title": "RequestBodyVouchersQualification",
        "type": "object",
        "description": "Request body schema for /vouchers/qualification.",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/1_req_obj_vouchers_qualification_customer"
          },
          "order": {
            "type": [
              "object",
              "null"
            ],
            "description": "Tracks purchase transactions. You can send the order in the request body to check against vouchers requiring specific order validation rules to be satisfied. The qualification runs against rules that are defined through the [Create Validation Rules](https://docs.voucherify.io/reference/create-validation-rules) endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Order structure/Order volume_ or _Basic Builder_ &rarr; _Order_. [Read more](https://support.voucherify.io/article/148-how-to-build-a-rule).",
            "properties": {
              "id": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "The ID of an existing order in Voucherify's system that will be linked to the redemption of this request. This ID was assigned by the Voucherify API. You can send the order id in the request body to check against vouchers requiring specific order validation rules to be satisfied.",
                "example": "ord_gqj1QYW2j2A1E3Ula2YjdPf4"
              },
              "source_id": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "The merchant’s order ID if it is different from the Voucherify order ID. It is really useful in case of an integration between multiple systems. It can be an order ID from a CRM system, database or 3rd-party service."
              },
              "amount": {
                "type": [
                  "integer",
                  "null"
                ],
                "minimum": 0,
                "description": "Pre-discount order amount represents the total amount of order items' amounts (sum of each item's `amount` property). You can send the total order amount or the amount of each item individually in the request body to check against vouchers requiring specific total order amount validation rules to be satisfied. The qualification runs against rules that are defined through the [Create Validation Rules](https://docs.voucherify.io/reference/create-validation-rules) endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Order volume_ &rarr; _Total amount_ \n\nValue is multiplied by 100 to precisely represent 2 decimal places. For example, $100 is written as 10000.",
                "example": 10000
              },
              "items": {
                "type": "array",
                "description": "List of Order Items constituting the order. Order items can be defined either by `product_id` or `sku_id`. For every item, you must define the quantity. Read more about the [order item object] (hyperlink the Order Item Object).\n",
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/1_req_obj_vouchers_qualification_product"
                    },
                    {
                      "$ref": "#/components/schemas/1_req_obj_vouchers_qualification_sku"
                    },
                    {
                      "$ref": "#/components/schemas/1_req_obj_vouchers_qualification_product_using_product_id"
                    },
                    {
                      "$ref": "#/components/schemas/1_req_obj_vouchers_qualification_product_using_source_id"
                    }
                  ]
                }
              },
              "customer": {
                "$ref": "#/components/schemas/1_req_obj_vouchers_qualification_customer"
              },
              "referrer": {
                "description": "The person who referred the customer to make the order.",
                "type": [
                  "object",
                  "null"
                ]
              },
              "metadata": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "A set of key/value pairs that you can send in the request body to check against vouchers requiring **order** metadata validation rules to be satisfied. The qualification runs against rules that are defined through the [Create Validation Rules](https://docs.voucherify.io/reference/create-validation-rules) endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Order structure_ &rarr; _Order metadata satisfy_ or _Basic Builder_ &rarr; _Attributes match_ &rarr; _ORDER METADATA_. [Read more](https://support.voucherify.io/article/148-how-to-build-a-rule)."
              }
            }
          },
          "reward": {
            "type": [
              "object",
              "null"
            ],
            "properties": {
              "points": {
                "type": [
                  "number",
                  "null"
                ]
              },
              "assignment_id": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "id": {
                "type": [
                  "string",
                  "null"
                ]
              }
            }
          },
          "metadata": {
            "type": [
              "object",
              "null"
            ],
            "description": "A set of key/value pairs that you can send in the request body to check against vouchers requiring **redemption** metadata validation rules to be satisfied. The qualification runs against rules that are defined through the [Create Validation Rules](https://docs.voucherify.io/reference/create-validation-rules) endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Advanced_ &rarr; _Redemption metadata satisfy_ or _Basic Builder_ &rarr; _Attributes match_ &rarr; _REDEMPTION METADATA_. [Read more](https://support.voucherify.io/article/148-how-to-build-a-rule)."
          }
        }
      },
      "1_req_obj_vouchers_qualification_customer": {
        "title": "Customer Object",
        "type": "object",
        "description": "This object stores customer details. You can send this object in the request body to check against vouchers requiring specific customer validation rules to be satisfied. The qualification runs against rules that are defined through the [Create Validation Rules](https://docs.voucherify.io/reference/create-validation-rules) endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Audience_ &rarr; _Customer segment_ or _Basic Builder_ &rarr; _Customer Activity_. [Read more](https://support.voucherify.io/article/148-how-to-build-a-rule). ",
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of an existing customer that will be linked to the redemption in this request. This ID was assigned by the Voucherify API.",
            "example": "cust_J1CDUdbqn5Exva8ASWk1Fq0j"
          },
          "source_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "A unique customer identifier. This is a tracking identifier of a user that is validating a voucher. The `source_id` is built based on your internal id (e.g., email, database ID). If you also pass a customer ID, the source ID will be ignored. Otherwise, if you do not pass a customer ID, the source ID you provide must either be a token, like the one returned in the original voucher validation method done by a specific customer, or a string identifying the customer (e.g., email, database ID, CRM ID).",
            "example": "firstname.lastname@mycompany.com"
          },
          "name": {
            "type": [
              "string",
              "null"
            ],
            "description": "First and Last Name. You can send the name in the request body to check against vouchers requiring specific name validation rules to be satisfied.",
            "example": "FirstName LastName"
          },
          "email": {
            "type": [
              "string",
              "null"
            ],
            "description": "You can send the email in the request body to check against vouchers requiring specific email validation rules to be satisfied.",
            "example": "firstname.lastname@mycompany.com"
          },
          "phone": {
            "type": [
              "string",
              "null"
            ],
            "minLength": 1,
            "maxLength": 30,
            "pattern": "^[-+.() 0-9]",
            "description": "You can send the phone in the request body to check against vouchers requiring specific phone validation rules to be satisfied."
          },
          "address": {
            "type": [
              "object",
              "null"
            ],
            "additionalProperties": false,
            "description": "A set of key/value pairs which describes the address. You can send the address in the request body to check against vouchers requiring specific address validation rules to be satisfied.",
            "properties": {
              "city": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "You can send the city in the request body to check against vouchers requiring specific city validation rules to be satisfied.",
                "example": "New York"
              },
              "country": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "You can send the country in the request body to check against vouchers requiring specific country validation rules to be satisfied.",
                "example": "United States of America"
              },
              "postal_code": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "You can send the postal code in the request body to check against vouchers requiring specific postal code validation rules to be satisfied.",
                "example": "10001"
              },
              "state": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "You can send the state in the request body to check against vouchers requiring specific state validation rules to be satisfied.",
                "example": "NY"
              }
            }
          },
          "metadata": {
            "type": [
              "object",
              "null"
            ],
            "description": "A set of key/value pairs that you can send in the request body to check against vouchers requiring **customer** metadata validation rules to be satisfied. The qualification runs against rules that are defined through the [Create Validation Rules](https://docs.voucherify.io/reference/create-validation-rules) endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Audience_ &rarr; _Customer metadata satisfy_. [Read more](https://support.voucherify.io/article/148-how-to-build-a-rule)."
          },
          "birthdate": {
            "type": [
              "string",
              "null"
            ],
            "example": "YYYY-MM-DD",
            "format": "date",
            "description": "You can send the birthdate in the request body to check against vouchers requiring specific birthdate validation rules to be satisfied."
          }
        }
      },
      "1_req_obj_vouchers_qualification_product": {
        "title": "Product Item",
        "type": "object",
        "description": "Schema model for a product item. You can send this object in the request body to check against vouchers requiring specific product validation rules to be satisfied. The qualification runs against rules that are defined through the [Create Validation Rules](https://docs.voucherify.io/reference/create-validation-rules) endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Order structure/Order volume_ or _Basic Builder_ &rarr; _Order_. [Read more](https://support.voucherify.io/article/148-how-to-build-a-rule).",
        "properties": {
          "source_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "A unique product identifier from your inventory system. __Requires__ the `related_object` property to be defined. \n\n The qualification runs against rules that are defined through the Create Validation Rules endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Order Structure_ &rarr; _Every order item/Any order item/None of the order items_ &rarr; _Select a product collection or create a new product collection based on Source Id filters_ . [Read more](https://support.voucherify.io/article/529-validation-rules-campaign-limits).",
            "example": "product_1234"
          },
          "product_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "A unique identifier that represents the product and is assigned by Voucherify.",
            "example": "prod_0a9f9aeddb019a42db"
          },
          "amount": {
            "type": [
              "integer",
              "null"
            ],
            "description": "Represents a total pre-discount amount of order item (`price` * `quantity`). You can send the total item amount to check against vouchers requiring specific order amount validation rules to be satisfied.\n\n The qualification runs against rules that are defined through the [Create Validation Rules](https://docs.voucherify.io/reference/create-validation-rules) endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Order volume_ &rarr; _Total amount_. The qualification adds the individual amounts of the items and checks whether the sum meets the limits set by the _Total amount_. Additionally, another rule checked is one that is defined in _Advanced Rule Builder_ &rarr; _Order structure_ &rarr; _Every order item/Any order item_ &rarr; _Subtotal of matched items_.  \n\nValue is multiplied by 100 to precisely represent 2 decimal places. For example, $100 is written as 10000.\n",
            "example": 10000
          },
          "quantity": {
            "type": [
              "integer",
              "null"
            ],
            "description": "Quantity of the item in the cart. \n\nThe qualification runs against rules that are defined through the [Create Validation Rules](https://docs.voucherify.io/reference/create-validation-rules) endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Order Volume_ &rarr; _Items quantity_. The qualification adds the individual quantities of the items and checks whether the sum meets the limits set by _Items quantity_ validation rule. Another validation rule against which the qualification does the checks is defined in the _Advanced Rule Builder_ &rarr; _Order Structure_ &rarr; _Every order item/Any order item_ &rarr; _Quantity of matched items_. [Read more](https://support.voucherify.io/article/529-validation-rules-campaign-limits).",
            "example": 1
          },
          "price": {
            "type": [
              "integer",
              "null"
            ],
            "description": "Unit price of an item. [This is not true in the case of using sourceid what was the case that this happened.]This `price` property takes precedence. If you provide a value at this level, then a price property defined once again in the `related_object` will be ignored. If this property will not be defined here, then the `price` property in the `related_object` will be used in the qualification.\n\n The qualification runs against rules that are defined through the Create Validation Rules endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Order Structure_ &rarr; _Every order item/Any order item_ &rarr; _Unit Price of any matching order line_ and also _Order Volume_ &rarr; _Price of each item/Price of any item_. [Read more](https://support.voucherify.io/article/529-validation-rules-campaign-limits).\n\n Value is multiplied by 100 to precisely represent 2 decimal places. For example, $100 is written as 10000.",
            "example": 10000
          },
          "metadata": {
            "type": "object",
            "description": "A set of key/value pairs that you can send in the request body to check against vouchers requiring **order line item** metadata validation rules to be satisfied.\n\n The qualification runs against rules that are defined through the [Create Validation Rules](https://docs.voucherify.io/reference/create-validation-rules) endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Order structure_ &rarr; _Every order item/Any order item_ &rarr; _Metadata of matched items_. [Read more](https://support.voucherify.io/article/148-how-to-build-a-rule)."
          },
          "related_object": {
            "type": [
              "string",
              "null"
            ],
            "enum": [
              "product"
            ],
            "description": "A reference to the object containing details of the related product. __Required__ when sending `source_id` in payload."
          },
          "product": {
            "type": [
              "object",
              "null"
            ],
            "description": "An object containing details of the related product. __Required__ when sending `source_id` in payload. These details will be used for qualification on top of details already stored in the system.",
            "properties": {
              "source_id": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "A unique product identifier from your inventory system.",
                "example": "product_1234"
              },
              "name": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "Product name.\n\n The qualification runs against rules that are defined through the [Create Validation Rules](https://docs.voucherify.io/reference/create-validation-rules) endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Order structure_ &rarr; _Every order item/Any order item/None of the order items_ &rarr; _Select a product collection or create a new product collection based on name filters_.",
                "example": "Phone"
              },
              "price": {
                "type": [
                  "integer",
                  "null"
                ],
                "description": "Unit price of an item. Value is multiplied by 100 to precisely represent 2 decimal places. For example, $100 is written as 10000.",
                "example": 10000
              },
              "metadata": {
                "type": [
                  "object",
                  "null"
                ],
                "description": "A set of key/value pairs that you can send in the request body to check against vouchers requiring **product** metadata validation rules to be satisfied.\n\n The qualification runs against rules that are defined through the [Create Validation Rules](https://docs.voucherify.io/reference/create-validation-rules) endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Order structure_ &rarr; _Every order item/Any order item/None of the order items_ &rarr; _Select a product collection or create a new product collection based on metadata filters_. [Read more](https://support.voucherify.io/article/148-how-to-build-a-rule)."
              }
            }
          }
        }
      },
      "1_req_obj_vouchers_qualification_product_using_product_id": {
        "title": "Product Item using product_id",
        "type": "object",
        "description": "Schema model for a product item sent using the `product_id`. \n\nYou can send this object in the request body to check against vouchers requiring specific product validation rules to be satisfied. \nThe qualification runs against rules that are defined through the [Create Validation Rules](https://docs.voucherify.io/reference/create-validation-rules) endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Order structure/Order volume_ or _Basic Builder_ &rarr; _Order_. [Read more](https://support.voucherify.io/article/148-how-to-build-a-rule).",
        "examples": [],
        "properties": {
          "product_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "A unique identifier that represents the product and is assigned by Voucherify.",
            "example": "prod_0a9f9aeddb019a42db"
          },
          "amount": {
            "type": [
              "integer",
              "null"
            ],
            "description": "Represents a total pre-discount amount of order item (`price` * `quantity`). You can send the total item amount to check against vouchers requiring specific order amount validation rules to be satisfied.\n\n The qualification runs against rules that are defined through the [Create Validation Rules](https://docs.voucherify.io/reference/create-validation-rules) endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Order volume_ &rarr; _Total amount_. The qualification adds the individual amounts of the items and checks whether the sum meets the limits set by the _Total amount_. Additionally, another rule checked is one that is defined in _Advanced Rule Builder_ &rarr; _Order structure_ &rarr; _Every order item/Any order item_ &rarr; _Subtotal of matched items_.  \n\nValue is multiplied by 100 to precisely represent 2 decimal places. For example, $100 is written as 10000.\n",
            "example": 10000
          },
          "quantity": {
            "type": [
              "integer",
              "null"
            ],
            "description": "Quantity of the item in the cart. \n\nThe qualification runs against rules that are defined through the [Create Validation Rules](https://docs.voucherify.io/reference/create-validation-rules) endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Order Volume_ &rarr; _Items quantity_. The qualification adds the individual quantities of the items and checks whether the sum meets the limits set by _Items quantity_ validation rule. Another validation rule against which the qualification does the checks is defined in the _Advanced Rule Builder_ &rarr; _Order Structure_ &rarr; _Every order item/Any order item_ &rarr; _Quantity of matched items_. [Read more](https://support.voucherify.io/article/529-validation-rules-campaign-limits).",
            "example": 1
          },
          "price": {
            "type": [
              "integer",
              "null"
            ],
            "description": "Unit price of an item. [This is not true in the case of using sourceid what was the case that this happened.]This `price` property takes precedence. If you provide a value at this level, then a price property defined once again in the `related_object` will be ignored. If this property will not be defined here, then the `price` property in the `related_object` will be used in the qualification.\n\n The qualification runs against rules that are defined through the Create Validation Rules endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Order Structure_ &rarr; _Every order item/Any order item_ &rarr; _Unit Price of any matching order line_ and also _Order Volume_ &rarr; _Price of each item/Price of any item_. Even if this price is explicitly provided, it will not override the `price` when running qualifications against _Advanced Rule Builder_ &rarr; _Order structure_ &rarr; _Every order item/Any order item/None of the order items_ &rarr; _Select/create a product collection filtered by a Price_.   [Read more](https://support.voucherify.io/article/529-validation-rules-campaign-limits).\n\n Value is multiplied by 100 to precisely represent 2 decimal places. For example, $100 is written as 10000.",
            "example": 10000
          },
          "metadata": {
            "type": "object",
            "description": "A set of key/value pairs that you can send in the request body to check against vouchers requiring **order line item** metadata validation rules to be satisfied.\n\n The qualification runs against rules that are defined through the [Create Validation Rules](https://docs.voucherify.io/reference/create-validation-rules) endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Order structure_ &rarr; _Every order item/Any order item_ &rarr; _Metadata of matched items_. [Read more](https://support.voucherify.io/article/148-how-to-build-a-rule)."
          },
          "product": {
            "type": [
              "object",
              "null"
            ],
            "description": "An object containing details of the related product. These details will be used for qualification on top of details already stored in the system.",
            "properties": {
              "name": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "Product name.\n\n The qualification runs against rules that are defined through the [Create Validation Rules](https://docs.voucherify.io/reference/create-validation-rules) endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Order structure_ &rarr; _Every order item/Any order item/None of the order items_ &rarr; _Select a product collection or create a new product collection based on name filters_.",
                "example": "Phone"
              },
              "price": {
                "type": [
                  "integer",
                  "null"
                ],
                "description": "Unit price of an item. Value is multiplied by 100 to precisely represent 2 decimal places. For example, $100 is written as 10000.",
                "example": 10000
              },
              "metadata": {
                "type": [
                  "object",
                  "null"
                ],
                "description": "A set of key/value pairs that you can send in the request body to check against vouchers requiring **product** metadata validation rules to be satisfied.\n\n The qualification runs against rules that are defined through the [Create Validation Rules](https://docs.voucherify.io/reference/create-validation-rules) endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Order structure_ &rarr; _Every order item/Any order item/None of the order items_ &rarr; _Select a product collection or create a new product collection based on metadata filters_. [Read more](https://support.voucherify.io/article/148-how-to-build-a-rule)."
              }
            }
          }
        }
      },
      "1_req_obj_vouchers_qualification_product_using_source_id": {
        "title": "Product Item using source_id",
        "type": "object",
        "description": "Schema model for a product item. You can send this object in the request body to check against vouchers requiring specific product validation rules to be satisfied. The qualification runs against rules that are defined through the [Create Validation Rules](https://docs.voucherify.io/reference/create-validation-rules) endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Order structure/Order volume_ or _Basic Builder_ &rarr; _Order_. [Read more](https://support.voucherify.io/article/148-how-to-build-a-rule).",
        "properties": {
          "source_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "A unique product identifier from your inventory system. __Requires__ the `related_object` property to be defined. \n\n The qualification runs against rules that are defined through the Create Validation Rules endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Order Structure_ &rarr; _Every order item/Any order item/None of the order items_ &rarr; _Select a product collection or create a new product collection based on Source Id filters_ . [Read more](https://support.voucherify.io/article/529-validation-rules-campaign-limits).",
            "example": "product_1234"
          },
          "amount": {
            "type": [
              "integer",
              "null"
            ],
            "description": "Represents a total pre-discount amount of order item (`price` * `quantity`). You can send the total item amount to check against vouchers requiring specific order amount validation rules to be satisfied.\n\n The qualification runs against rules that are defined through the [Create Validation Rules](https://docs.voucherify.io/reference/create-validation-rules) endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Order volume_ &rarr; _Total amount_. The qualification adds the individual amounts of the items and checks whether the sum meets the limits set by the _Total amount_. Additionally, another rule checked is one that is defined in _Advanced Rule Builder_ &rarr; _Order structure_ &rarr; _Every order item/Any order item_ &rarr; _Subtotal of matched items_.  \n\nValue is multiplied by 100 to precisely represent 2 decimal places. For example, $100 is written as 10000.\n",
            "example": 10000
          },
          "quantity": {
            "type": [
              "integer",
              "null"
            ],
            "description": "Quantity of the item in the cart. \n\nThe qualification runs against rules that are defined through the [Create Validation Rules](https://docs.voucherify.io/reference/create-validation-rules) endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Order Volume_ &rarr; _Items quantity_. The qualification adds the individual quantities of the items and checks whether the sum meets the limits set by _Items quantity_ validation rule. Another validation rule against which the qualification does the checks is defined in the _Advanced Rule Builder_ &rarr; _Order Structure_ &rarr; _Every order item/Any order item_ &rarr; _Quantity of matched items_. [Read more](https://support.voucherify.io/article/529-validation-rules-campaign-limits).",
            "example": 1
          },
          "price": {
            "type": [
              "integer",
              "null"
            ],
            "description": "Unit price of an item. [This is not true in the case of using sourceid what was the case that this happened.]This `price` property takes precedence. If you provide a value at this level, then a price property defined once again in the `related_object` will be ignored. If this property will not be defined here, then the `price` property in the `related_object` will be used in the qualification.\n\n The qualification runs against rules that are defined through the Create Validation Rules endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Order Structure_ &rarr; _Every order item/Any order item_ &rarr; _Unit Price of any matching order line_ and also _Order Volume_ &rarr; _Price of each item/Price of any item_. [Read more](https://support.voucherify.io/article/529-validation-rules-campaign-limits).\n\n Value is multiplied by 100 to precisely represent 2 decimal places. For example, $100 is written as 10000.",
            "example": 10000
          },
          "metadata": {
            "type": "object",
            "description": "A set of key/value pairs that you can send in the request body to check against vouchers requiring **order line item** metadata validation rules to be satisfied.\n\n The qualification runs against rules that are defined through the [Create Validation Rules](https://docs.voucherify.io/reference/create-validation-rules) endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Order structure_ &rarr; _Every order item/Any order item_ &rarr; _Metadata of matched items_. [Read more](https://support.voucherify.io/article/148-how-to-build-a-rule)."
          },
          "related_object": {
            "type": [
              "string",
              "null"
            ],
            "enum": [
              "product"
            ],
            "description": "A reference to the object containing details of the related product. __Required__ when sending `source_id` in payload."
          },
          "product": {
            "type": [
              "object",
              "null"
            ],
            "description": "An object containing details of the related product. __Required__ when sending `source_id` in payload. These details will be used for qualification on top of details already stored in the system.",
            "properties": {
              "source_id": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "A unique product identifier from your inventory system.",
                "example": "product_1234"
              },
              "name": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "Product name.\n\n The qualification runs against rules that are defined through the [Create Validation Rules](https://docs.voucherify.io/reference/create-validation-rules) endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Order structure_ &rarr; _Every order item/Any order item/None of the order items_ &rarr; _Select a product collection or create a new product collection based on name filters_.",
                "example": "Phone"
              },
              "price": {
                "type": [
                  "integer",
                  "null"
                ],
                "description": "Unit price of an item. Value is multiplied by 100 to precisely represent 2 decimal places. For example, $100 is written as 10000.",
                "example": 10000
              },
              "metadata": {
                "type": [
                  "object",
                  "null"
                ],
                "description": "A set of key/value pairs that you can send in the request body to check against vouchers requiring **product** metadata validation rules to be satisfied.\n\n The qualification runs against rules that are defined through the [Create Validation Rules](https://docs.voucherify.io/reference/create-validation-rules) endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Order structure_ &rarr; _Every order item/Any order item/None of the order items_ &rarr; _Select a product collection or create a new product collection based on metadata filters_. [Read more](https://support.voucherify.io/article/148-how-to-build-a-rule)."
              }
            }
          }
        },
        "required": [
          "source_id",
          "related_object"
        ]
      },
      "1_req_obj_vouchers_qualification_product-copy-2-use-for-other-objects-as-reference": {
        "title": "Product Item",
        "type": "object",
        "description": "Schema model for a product item. You can send this object in the request body to check against vouchers requiring specific product validation rules to be satisfied. The qualification runs against rules that are defined through the [Create Validation Rules](https://docs.voucherify.io/reference/create-validation-rules) endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Order structure/Order volume_ or _Basic Builder_ &rarr; _Order_. [Read more](https://support.voucherify.io/article/148-how-to-build-a-rule).",
        "properties": {
          "source_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "A unique product identifier from your inventory system. __Requires__ the `related_object` property to be defined. \n\n The qualification runs against rules that are defined through the Create Validation Rules endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Order Structure_ &rarr; _Every order item/Any order item/None of the order items_ &rarr; _Select a product collection or create a new product collection based on Source Id filters_ . [Read more](https://support.voucherify.io/article/529-validation-rules-campaign-limits).",
            "example": "product_1234"
          },
          "product_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "A unique identifier that represents the product and is assigned by Voucherify.",
            "example": "prod_0a9f9aeddb019a42db"
          },
          "amount": {
            "type": [
              "integer",
              "null"
            ],
            "description": "Represents a total pre-discount amount of order item (`price` * `quantity`). You can send the total item amount to check against vouchers requiring specific order amount validation rules to be satisfied.\n\n The qualification runs against rules that are defined through the [Create Validation Rules](https://docs.voucherify.io/reference/create-validation-rules) endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Order volume_ &rarr; _Total amount_. The qualification adds the individual amounts of the items and checks whether the sum meets the limits set by the _Total amount_. Additionally, another rule checked is one that is defined in _Advanced Rule Builder_ &rarr; _Order structure_ &rarr; _Every order item/Any order item_ &rarr; _Subtotal of matched items_.  \n\nValue is multiplied by 100 to precisely represent 2 decimal places. For example, $100 is written as 10000.\n",
            "example": 10000
          },
          "quantity": {
            "type": [
              "integer",
              "null"
            ],
            "description": "Quantity of the item in the cart. \n\nThe qualification runs against rules that are defined through the [Create Validation Rules](https://docs.voucherify.io/reference/create-validation-rules) endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Order Volume_ &rarr; _Items quantity_. The qualification adds the individual quantities of the items and checks whether the sum meets the limits set by _Items quantity_ validation rule. Another validation rule against which the qualification does the checks is defined in the _Advanced Rule Builder_ &rarr; _Order Structure_ &rarr; _Every order item/Any order item_ &rarr; _Quantity of matched items_. [Read more](https://support.voucherify.io/article/529-validation-rules-campaign-limits).",
            "example": 1
          },
          "price": {
            "type": [
              "integer",
              "null"
            ],
            "description": "Unit price of an item. [This is not true in the case of using sourceid what was the case that this happened.]This `price` property takes precedence. If you provide a value at this level, then a price property defined once again in the `related_object` will be ignored. If this property will not be defined here, then the `price` property in the `related_object` will be used in the qualification.\n\n The qualification runs against rules that are defined through the Create Validation Rules endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Order Structure_ &rarr; _Every order item/Any order item_ &rarr; _Unit Price of any matching order line_ and also _Order Volume_ &rarr; _Price of each item/Price of any item_. [Read more](https://support.voucherify.io/article/529-validation-rules-campaign-limits).\n\n Value is multiplied by 100 to precisely represent 2 decimal places. For example, $100 is written as 10000.",
            "example": 10000
          },
          "metadata": {
            "type": "object",
            "description": "A set of key/value pairs that you can send in the request body to check against vouchers requiring **order line item** metadata validation rules to be satisfied.\n\n The qualification runs against rules that are defined through the [Create Validation Rules](https://docs.voucherify.io/reference/create-validation-rules) endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Order structure_ &rarr; _Every order item/Any order item_ &rarr; _Metadata of matched items_. [Read more](https://support.voucherify.io/article/148-how-to-build-a-rule)."
          },
          "related_object": {
            "type": [
              "string",
              "null"
            ],
            "enum": [
              "product"
            ],
            "description": "A reference to the object containing details of the related product. __Required__ when sending `source_id` in payload."
          },
          "product": {
            "type": [
              "object",
              "null"
            ],
            "description": "An object containing details of the related product. __Required__ when sending `source_id` in payload. These details will be used for qualification on top of details already stored in the system.",
            "properties": {
              "source_id": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "A unique product identifier from your inventory system.",
                "example": "product_1234"
              },
              "name": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "Product name.\n\n The qualification runs against rules that are defined through the [Create Validation Rules](https://docs.voucherify.io/reference/create-validation-rules) endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Order structure_ &rarr; _Every order item/Any order item/None of the order items_ &rarr; _Select a product collection or create a new product collection based on name filters_.",
                "example": "Phone"
              },
              "price": {
                "type": [
                  "integer",
                  "null"
                ],
                "description": "Unit price of an item. Value is multiplied by 100 to precisely represent 2 decimal places. For example, $100 is written as 10000.",
                "example": 10000
              },
              "metadata": {
                "type": [
                  "object",
                  "null"
                ],
                "description": "A set of key/value pairs that you can send in the request body to check against vouchers requiring **product** metadata validation rules to be satisfied.\n\n The qualification runs against rules that are defined through the [Create Validation Rules](https://docs.voucherify.io/reference/create-validation-rules) endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Order structure_ &rarr; _Every order item/Any order item/None of the order items_ &rarr; _Select a product collection or create a new product collection based on metadata filters_. [Read more](https://support.voucherify.io/article/148-how-to-build-a-rule)."
              },
              "override": {
                "type": [
                  "boolean",
                  "null"
                ],
                "description": "The override is used to store the product in the system. If product does not exist, it will be created with the use of `source_id`."
              }
            }
          }
        }
      },
      "1_req_obj_vouchers_qualification_sku": {
        "title": "SKU Item",
        "type": "object",
        "description": "Schema model for a SKU item.",
        "properties": {
          "source_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "A unique sku identifier from your inventory system. __Requires__ the `related_object` property to be defined. \n\n The qualification runs against rules that are defined through the Create Validation Rules endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Order Structure_ &rarr; _Every order item/Any order item/None of the order items_ &rarr; _Select a product collection or create a new product collection based on Source Id filters_ . [Read more](https://support.voucherify.io/article/529-validation-rules-campaign-limits).",
            "example": "product_1234"
          },
          "sku_id": {
            "type": [
              "string",
              "null"
            ],
            "example": "sku_0a41e31c7b41c28358",
            "description": "A unique identifier that represents the SKU and is assigned by Voucherify."
          },
          "amount": {
            "type": [
              "integer",
              "null"
            ],
            "description": "Represents a total amount of order item (price * quantity).\n\nYou should provide it to retrieve `discount_amount` if the discount is applied only to this item.[I'm not sure what this means here, it's from the original docs]",
            "example": 10000
          },
          "quantity": {
            "type": [
              "integer",
              "null"
            ],
            "description": "Quantity of the item in the cart. The qualification runs against rules that are defined through the Create Validation Rules endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Order Volume_ &rarr; _Items quantity_. The qualification adds the individual quantities of the items and checks whether the sum meets the limits set by _Items quantity_ validation rule. [Read more](https://support.voucherify.io/article/529-validation-rules-campaign-limits).",
            "example": 1
          },
          "related_object": {
            "type": [
              "string",
              "null"
            ],
            "enum": [
              "product",
              "sku"
            ],
            "description": "A reference to the object containing details of the related product/sku. __Required__ when sending `source_id` in payload."
          },
          "product": {
            "type": [
              "object",
              "null"
            ],
            "description": "An object containing details of the related product. __Required__ when sending `source_id` in payload. These details will be used for qualification on top of details already stored in the system.",
            "properties": {
              "source_id": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "A unique product identifier from your inventory system.",
                "example": "product_1234"
              },
              "name": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "Product name.",
                "example": "Phone"
              },
              "price": {
                "type": [
                  "integer",
                  "null"
                ],
                "description": "Unit price of an item. Value is multiplied by 100 to precisely represent 2 decimal places. For example, $100 is written as 10000.",
                "example": 10000
              },
              "metadata": {
                "type": [
                  "object",
                  "null"
                ],
                "description": "A set of key/value pairs that you can send in the request body to check against vouchers requiring **product** metadata validation rules to be satisfied.\n\n The qualification runs against rules that are defined through the [Create Validation Rules](https://docs.voucherify.io/reference/create-validation-rules) endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Order structure_ &rarr; _Every order item/Any order item/None of the order items_ &rarr; _Select a product collection or create a new product collection based on metadata filters_. [Read more](https://support.voucherify.io/article/148-how-to-build-a-rule)."
              }
            }
          },
          "sku": {
            "type": [
              "object",
              "null"
            ],
            "description": "An object containing details of the related SKU. __Required__ when sending `source_id` in payload. These details will be used for qualification on top of details already stored in the system.",
            "properties": {
              "source_id": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "A unique SKU identifier from your inventory system.",
                "example": "sku_1234"
              },
              "sku": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "SKU name.",
                "example": "iPhone 12"
              },
              "price": {
                "type": [
                  "integer",
                  "null"
                ],
                "description": "Unit price of a SKU. Value is multiplied by 100 to precisely represent 2 decimal places. For example, $100 is written as 10000.",
                "example": 10000
              },
              "metadata": {
                "type": [
                  "object",
                  "null"
                ],
                "description": "A set of custom key/value pairs that you can attach to a SKU."
              }
            }
          }
        }
      },
      "1_req_obj_vouchers_qualification_sku-copy-2_forfuturereference": {
        "title": "SKU Item",
        "type": "object",
        "description": "Schema model for a SKU item.",
        "properties": {
          "source_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "A unique sku identifier from your inventory system. __Requires__ the `related_object` property to be defined. \n\n The qualification runs against rules that are defined through the Create Validation Rules endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Order Structure_ &rarr; _Every order item/Any order item/None of the order items_ &rarr; _Select a product collection or create a new product collection based on Source Id filters_ . [Read more](https://support.voucherify.io/article/529-validation-rules-campaign-limits).",
            "example": "product_1234"
          },
          "sku_id": {
            "type": [
              "string",
              "null"
            ],
            "example": "sku_0a41e31c7b41c28358",
            "description": "A unique identifier that represents the SKU and is assigned by Voucherify."
          },
          "amount": {
            "type": [
              "integer",
              "null"
            ],
            "description": "Represents a total amount of order item (price * quantity).\n\nYou should provide it to retrieve `discount_amount` if the discount is applied only to this item.[I'm not sure what this means here, it's from the original docs]",
            "example": 10000
          },
          "quantity": {
            "type": [
              "integer",
              "null"
            ],
            "description": "Quantity of the item in the cart. The qualification runs against rules that are defined through the Create Validation Rules endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Order Volume_ &rarr; _Items quantity_. The qualification adds the individual quantities of the items and checks whether the sum meets the limits set by _Items quantity_ validation rule. [Read more](https://support.voucherify.io/article/529-validation-rules-campaign-limits).",
            "example": 1
          },
          "related_object": {
            "type": [
              "string",
              "null"
            ],
            "enum": [
              "product",
              "sku"
            ],
            "description": "A reference to the object containing details of the related product/sku. __Required__ when sending `source_id` in payload."
          },
          "product": {
            "type": [
              "object",
              "null"
            ],
            "description": "An object containing details of the related product. __Required__ when sending `source_id` in payload. These details will be used for qualification on top of details already stored in the system.",
            "properties": {
              "source_id": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "A unique product identifier from your inventory system.",
                "example": "product_1234"
              },
              "name": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "Product name.",
                "example": "Phone"
              },
              "price": {
                "type": [
                  "integer",
                  "null"
                ],
                "description": "Unit price of an item. Value is multiplied by 100 to precisely represent 2 decimal places. For example, $100 is written as 10000.",
                "example": 10000
              },
              "metadata": {
                "type": [
                  "object",
                  "null"
                ],
                "description": "A set of key/value pairs that you can send in the request body to check against vouchers requiring **product** metadata validation rules to be satisfied.\n\n The qualification runs against rules that are defined through the [Create Validation Rules](https://docs.voucherify.io/reference/create-validation-rules) endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Order structure_ &rarr; _Every order item/Any order item/None of the order items_ &rarr; _Select a product collection or create a new product collection based on metadata filters_. [Read more](https://support.voucherify.io/article/148-how-to-build-a-rule)."
              },
              "override": {
                "type": [
                  "boolean",
                  "null"
                ],
                "description": "The override is used to store the product in the system. If the product does not exist, it will be created with the use of `source_id`."
              }
            }
          },
          "sku": {
            "type": [
              "object",
              "null"
            ],
            "description": "An object containing details of the related SKU. __Required__ when sending `source_id` in payload. These details will be used for qualification on top of details already stored in the system.",
            "properties": {
              "source_id": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "A unique SKU identifier from your inventory system.",
                "example": "sku_1234"
              },
              "sku": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "SKU name.",
                "example": "iPhone 12"
              },
              "price": {
                "type": [
                  "integer",
                  "null"
                ],
                "description": "Unit price of a SKU. Value is multiplied by 100 to precisely represent 2 decimal places. For example, $100 is written as 10000.",
                "example": 10000
              },
              "metadata": {
                "type": [
                  "object",
                  "null"
                ],
                "description": "A set of custom key/value pairs that you can attach to a SKU."
              },
              "override": {
                "type": [
                  "boolean",
                  "null"
                ],
                "description": "The override is used once the product should be stored in system. If sku does not exist, it will be created with the use of `source_id`. If a SKU does not exist, it's required to set `product_id` that it belongs to."
              }
            }
          }
        }
      },
      "1_req_obj_vouchers_qualification_sku - copy": {
        "title": "SKU Item",
        "type": "object",
        "description": "Schema model for a SKU item.",
        "properties": {
          "id": {
            "type": [
              "string",
              "null"
            ]
          },
          "source_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "The merchant’s product/SKU ID (if it is different from the Voucherify product/SKU ID). It is really useful in case of integration between multiple systems. It can be an ID from an eCommerce, a database or a 3rd-party service."
          },
          "product_id": {
            "type": [
              "string",
              "null"
            ]
          },
          "related_object": {
            "type": [
              "string",
              "null"
            ],
            "enum": [
              "product",
              "sku"
            ]
          },
          "amount": {
            "type": [
              "integer",
              "null"
            ],
            "description": "Represents a total amount of order item (price * quantity).\n\nYou should provide it to retrieve `discount_amount` if the discount is applied only to this item.[I'm not sure what this means here, it's from the original docs]"
          },
          "quantity": {
            "type": [
              "integer",
              "null"
            ],
            "description": "Quantity of the item in the cart."
          },
          "price": {
            "type": [
              "integer",
              "null"
            ],
            "description": "Unit price of an item"
          },
          "sku": {
            "type": [
              "object",
              "null"
            ],
            "description": "An object containing details of the related SKU. These details will be used for validation and redemption processes on top of details already stored in the system.",
            "properties": {
              "id": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "source_id": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "sku": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "price": {
                "type": [
                  "integer",
                  "null"
                ]
              },
              "metadata": {
                "type": [
                  "object",
                  "null"
                ]
              },
              "override": {
                "type": [
                  "boolean",
                  "null"
                ],
                "description": "The override is used once the product should be stored in system. If sku does not exist it will be created with the use of `source_id`. If sku does not exists it's required to set `product_id` that it belongs to."
              }
            }
          }
        }
      },
      "1_req_vouchers_qualification_copy_for_reverting_changes": {
        "title": "RequestBodyVouchersQualification",
        "type": "object",
        "description": "Request body schema for /vouchers/qualification.",
        "properties": {
          "customer": {
            "type": [
              "object",
              "null"
            ],
            "description": "This object stores customer details. You can send this object in the request body to check against vouchers requiring specific customer validation rules to be satisfied. The qualification runs against rules that are defined through the [Create Validation Rules](https://docs.voucherify.io/reference/create-validation-rules) endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Audience_ &rarr; _Customer segment_ or _Basic Builder_ &rarr; _Customer Activity_. [Read more](https://support.voucherify.io/article/148-how-to-build-a-rule). ",
            "properties": {
              "id": {
                "type": "string",
                "description": "The ID of an existing customer that will be linked to the redemption in this request. This ID was assigned by the Voucherify API.",
                "example": "cust_J1CDUdbqn5Exva8ASWk1Fq0j"
              },
              "source_id": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "A unique customer identifier. This is a tracking identifier of a user that is validating a voucher. The `source_id` is built based on your internal id (e.g., email, database ID). If you also pass a customer ID, the source ID will be ignored. Otherwise, if you do not pass a customer ID, the source ID you provide must either be a token, like the one returned in the original voucher validation method done by a specific customer, or a string identifying the customer (e.g., email, database ID, CRM ID).",
                "example": "firstname.lastname@mycompany.com"
              },
              "name": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "First and Last Name. You can send the name in the request body to check against vouchers requiring specific name validation rules to be satisfied.",
                "example": "FirstName LastName"
              },
              "email": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "You can send the email in the request body to check against vouchers requiring specific email validation rules to be satisfied.",
                "example": "firstname.lastname@mycompany.com"
              },
              "phone": {
                "type": [
                  "string",
                  "null"
                ],
                "minLength": 1,
                "maxLength": 30,
                "pattern": "^[-+.() 0-9]",
                "description": "You can send the phone in the request body to check against vouchers requiring specific phone validation rules to be satisfied."
              },
              "address": {
                "type": [
                  "object",
                  "null"
                ],
                "additionalProperties": false,
                "description": "A set of key/value pairs which describes the address. You can send the address in the request body to check against vouchers requiring specific address validation rules to be satisfied.",
                "properties": {
                  "city": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "description": "You can send the city in the request body to check against vouchers requiring specific city validation rules to be satisfied.",
                    "example": "New York"
                  },
                  "country": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "description": "You can send the country in the request body to check against vouchers requiring specific country validation rules to be satisfied.",
                    "example": "United States of America"
                  },
                  "postal_code": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "description": "You can send the postal code in the request body to check against vouchers requiring specific postal code validation rules to be satisfied.",
                    "example": "10001"
                  },
                  "state": {
                    "type": [
                      "string",
                      "null"
                    ],
                    "description": "You can send the state in the request body to check against vouchers requiring specific state validation rules to be satisfied.",
                    "example": "NY"
                  }
                }
              },
              "metadata": {
                "type": [
                  "object",
                  "null"
                ],
                "description": "A set of key/value pairs that you can send in the request body to check against vouchers requiring **customer** metadata validation rules to be satisfied. The qualification runs against rules that are defined through the [Create Validation Rules](https://docs.voucherify.io/reference/create-validation-rules) endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Audience_ &rarr; _Customer metadata satisfy_. [Read more](https://support.voucherify.io/article/148-how-to-build-a-rule)."
              },
              "birthdate": {
                "type": [
                  "string",
                  "null"
                ],
                "example": "YYYY-MM-DD",
                "format": "date",
                "description": "You can send the birthdate in the request body to check against vouchers requiring specific birthdate validation rules to be satisfied."
              }
            }
          },
          "order": {
            "type": [
              "object",
              "null"
            ],
            "description": "Tracks purchase transactions. You can send the order in the request body to check against vouchers requiring specific order validation rules to be satisfied. The qualification runs against rules that are defined through the [Create Validation Rules](https://docs.voucherify.io/reference/create-validation-rules) endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Order structure/Order volume_ or _Basic Builder_ &rarr; _Order_. [Read more](https://support.voucherify.io/article/148-how-to-build-a-rule).",
            "properties": {
              "id": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "The ID of an existing order in Voucherify's system that will be linked to the redemption of this request. This ID was assigned by the Voucherify API. You can send the order id in the request body to check against vouchers requiring specific order validation rules to be satisfied.",
                "example": "ord_gqj1QYW2j2A1E3Ula2YjdPf4"
              },
              "source_id": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "The merchant’s order ID if it is different from the Voucherify order ID. It is really useful in case of an integration between multiple systems. It can be an order ID from a CRM system, database or 3rd-party service."
              },
              "amount": {
                "type": [
                  "integer",
                  "null"
                ],
                "minimum": 0,
                "description": "Pre-discount order amount represents the total amount of order items' amounts (sum of each item's `amount` property). You can send the amount in the request body to check against vouchers requiring specific order amount validation rules to be satisfied. \n\nValue is multiplied by 100 to precisely represent 2 decimal places. For example, $100 is written as 10000.",
                "example": 10000
              },
              "items": {
                "type": "array",
                "description": "List of Order Items constituting the order. Order items can be defined either by `product_id` or `sku_id`. For every item, you must define the quantity. Read more about the [order item object] (hyperlink the Order Item Object).\n",
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/1_req_obj_vouchers_qualification_product"
                    },
                    {
                      "$ref": "#/components/schemas/1_req_obj_vouchers_qualification_sku"
                    }
                  ]
                }
              },
              "customer": {
                "$ref": "#/components/schemas/1_req_obj_vouchers_qualification_customer"
              },
              "referrer": {
                "description": "The person who referred the customer to make the order.",
                "type": [
                  "object",
                  "null"
                ]
              },
              "metadata": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "A set of key/value pairs that you can send in the request body to check against vouchers requiring **order** metadata validation rules to be satisfied. The qualification runs against rules that are defined through the [Create Validation Rules](https://docs.voucherify.io/reference/create-validation-rules) endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Order structure_ &rarr; _Order metadata satisfy_ or _Basic Builder_ &rarr; _Attributes match_ &rarr; _ORDER METADATA_. [Read more](https://support.voucherify.io/article/148-how-to-build-a-rule)."
              }
            }
          },
          "reward": {
            "type": [
              "object",
              "null"
            ],
            "properties": {
              "points": {
                "type": [
                  "number",
                  "null"
                ]
              },
              "assignment_id": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "id": {
                "type": [
                  "string",
                  "null"
                ]
              }
            }
          },
          "metadata": {
            "type": [
              "object",
              "null"
            ],
            "description": "A set of key/value pairs that you can send in the request body to check against vouchers requiring **redemption** metadata validation rules to be satisfied. The qualification runs against rules that are defined through the [Create Validation Rules](https://docs.voucherify.io/reference/create-validation-rules) endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Advanced_ &rarr; _Redemption metadata satisfy_ or _Basic Builder_ &rarr; _Attributes match_ &rarr; _REDEMPTION METADATA_. [Read more](https://support.voucherify.io/article/148-how-to-build-a-rule)."
          }
        }
      },
      "1_req_obj_vouchers_qualification_product - copy": {
        "title": "Product Item",
        "type": "object",
        "description": "Schema model for a product item.",
        "properties": {
          "id": {
            "type": [
              "string",
              "null"
            ]
          },
          "source_id": {
            "type": [
              "string",
              "null"
            ],
            "description": "Product/SKU reference ID"
          },
          "product_id": {
            "type": [
              "string",
              "null"
            ]
          },
          "sku_id": {
            "type": [
              "string",
              "null"
            ]
          },
          "related_object": {
            "type": [
              "string",
              "null"
            ],
            "enum": [
              "product",
              "sku"
            ]
          },
          "amount": {
            "type": [
              "integer",
              "null"
            ],
            "description": "Represents a total amount of order item (price * quantity).\n\nYou should provide it to retrieve `discount_amount` if the discount is applied only to this item."
          },
          "quantity": {
            "type": [
              "integer",
              "null"
            ],
            "description": "Quantity of the item in the cart."
          },
          "price": {
            "type": [
              "integer",
              "null"
            ],
            "description": "Unit price of an item"
          },
          "product": {
            "type": [
              "object",
              "null"
            ],
            "description": "An object containing details of the related product. These details will be used for validation and redemption processes on top of details already stored in the system.",
            "properties": {
              "id": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "source_id": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "name": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "price": {
                "type": [
                  "integer",
                  "null"
                ]
              },
              "metadata": {
                "type": [
                  "object",
                  "null"
                ]
              },
              "override": {
                "type": [
                  "boolean",
                  "null"
                ]
              }
            }
          },
          "sku": {
            "type": [
              "object",
              "null"
            ],
            "description": "An object containing details of the related SKU. These details will be used for validation and redemption processes on top of details already stored in the system.",
            "properties": {
              "id": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "source_id": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "sku": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "price": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "metadata": {
                "type": [
                  "object",
                  "null"
                ]
              },
              "override": {
                "type": [
                  "boolean",
                  "null"
                ],
                "description": "The override is used once the product should be stored in system. If sku does not exists it will be created with the use of `source_id`. If sku does not exists it's required to set `product_id` that it belongs to."
              }
            }
          }
        }
      },
      "1_req_vouchers_qualification-prepforcampaignqualification": {
        "title": "RequestBodyVouchersQualification",
        "type": "object",
        "description": "Request body schema for /vouchers/qualification.",
        "properties": {
          "customer": {
            "type": [
              "object",
              "null"
            ],
            "description": "This object stores customer details.",
            "properties": {
              "id": {
                "type": "string",
                "description": "The ID of an existing customer that will be linked to the redemption in this request. Assigned by the Voucherify API, identifies the customer.",
                "example": "cust_J1CDUdbqn5Exva8ASWk1Fq0j"
              },
              "source_id": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "A unique customer identifier. You can provide your own (e.g. CRM id) or use the one returned by Voucherify, see tracking_id from Validate Voucher (client-side). A tracking identifier of a user that validate a voucher. It is build based on your internal id (e.g., email, database ID). If you also pass a customer ID, the source ID will be ignored. Otherwise, if you do not pass a customer ID, the source ID you provide must either be a token, like the ones returned in origin voucher validation method done by specific customer, or a string identifying customer (e.g., email, database ID, CRM ID)."
              },
              "name": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "First and Last Name"
              },
              "email": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "phone": {
                "type": [
                  "string",
                  "null"
                ],
                "minLength": 1,
                "maxLength": 30,
                "pattern": "^[-+.() 0-9]"
              },
              "address": {
                "type": [
                  "object",
                  "null"
                ],
                "additionalProperties": false,
                "description": "A set of key/value pairs which describes the address.",
                "properties": {
                  "city": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "country": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "postal_code": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "state": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                }
              },
              "metadata": {
                "type": [
                  "object",
                  "null"
                ],
                "description": "A set of key/value pairs that you can attach to a customer object for segment building. It can be useful for storing additional information about the customer in a structured format."
              },
              "birthdate": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "Customer's birthdate",
                "example": "YYYY-MM-DD",
                "format": "date"
              }
            }
          },
          "order": {
            "type": [
              "object",
              "null"
            ],
            "description": "Tracks purchase transactions.",
            "properties": {
              "id": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "The ID of an existing order that will be linked to redemption in this request."
              },
              "status": {
                "type": [
                  "string",
                  "null"
                ],
                "enum": [
                  "CREATED",
                  "PAID",
                  "CANCELED",
                  "FULFILLED"
                ]
              },
              "source_id": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "The merchant’s order ID if it is different from the Voucherify order ID. It is really useful in case of integration between multiple systems. It can be an order ID from CRM, database or 3rd party service."
              },
              "amount": {
                "type": [
                  "integer",
                  "null"
                ],
                "minimum": 0,
                "description": "Represents a total amount of order items (sum of item.amount)\n\nValue is multiplied by 100 to precisely represent 2 decimal places. For example, $100 is written as 10000."
              },
              "discount_amount": {
                "type": [
                  "integer",
                  "null"
                ],
                "minimum": 0,
                "description": "Summarize all discounts applied to the order inlcuding discounts applied to particular order line items and discounts applied to the whole cart.\n\nValue is multiplied by 100 to precisely represent 2 decimal places. For example, $100 is written as 10000."
              },
              "items": {
                "type": "array",
                "description": "List of Order Items constituting the order. Order items can be defined either by product_id or sku_id. Along with every item you must define quantity.A list of Order Items that have been applied to the order. hyperlink the Order Items to another object.\n",
                "items": {
                  "type": [
                    "object",
                    "null"
                  ],
                  "properties": {
                    "id": {
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "source_id": {
                      "type": [
                        "string",
                        "null"
                      ],
                      "description": "Product/SKU reference ID"
                    },
                    "product_id": {
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "sku_id": {
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "related_object": {
                      "type": [
                        "string",
                        "null"
                      ],
                      "enum": [
                        "product",
                        "sku"
                      ],
                      "description": "Allowed values: `product`, `sku`"
                    },
                    "amount": {
                      "type": [
                        "integer",
                        "null"
                      ],
                      "description": "Represents a total amount of order item (price * quantity).\n\nYou should provide it to retrieve `discount_amount` if the discount is applied only to this item."
                    },
                    "discount_amount": {
                      "type": [
                        "integer",
                        "null"
                      ],
                      "description": "Represents total amount of the discount applied to order line items\n\nValue is multiplied by 100 to precisely represent 2 decimal places. For example, $100 is written as 10000."
                    },
                    "quantity": {
                      "type": [
                        "integer",
                        "null"
                      ]
                    },
                    "discount_quantity": {
                      "type": [
                        "integer",
                        "null"
                      ],
                      "description": "number of items being discounted\t"
                    },
                    "price": {
                      "type": [
                        "integer",
                        "null"
                      ],
                      "description": "Unit price of an item"
                    },
                    "product": {
                      "type": [
                        "object",
                        "null"
                      ],
                      "default": null,
                      "description": "An object containing details of related product. Those details will be used for validation and redemption processes on top of details already stored in system.",
                      "properties": {
                        "id": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "source_id": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "name": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "price": {
                          "type": [
                            "null",
                            "integer"
                          ]
                        },
                        "metadata": {
                          "type": [
                            "object",
                            "null"
                          ]
                        },
                        "override": {
                          "type": [
                            "boolean",
                            "null"
                          ],
                          "description": "The `override` is used once the product should be stored in system. If product does not exists it will be created with the use of `source_id`."
                        }
                      }
                    },
                    "sku": {
                      "type": [
                        "object",
                        "null"
                      ],
                      "default": null,
                      "description": "An object containing details of related SKU. Those details will be used for validation and redemption processes on top of details already stored in system.",
                      "properties": {
                        "id": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "source_id": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "sku": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "price": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "metadata": {
                          "type": [
                            "object",
                            "null"
                          ]
                        },
                        "override": {
                          "type": [
                            "boolean",
                            "null"
                          ],
                          "description": "The override is used once the product should be stored in system. If sku does not exists it will be created with the use of `source_id`. If sku does not exists it's required to set `product_id` that it belongs to."
                        }
                      }
                    }
                  }
                }
              },
              "customer": {
                "type": [
                  "object",
                  "null"
                ],
                "description": "The customer used for the order."
              },
              "referrer": {
                "description": "The person who referred the customer to make the order.",
                "type": [
                  "object",
                  "null"
                ]
              },
              "metadata": {
                "type": [
                  "string",
                  "null"
                ]
              }
            }
          },
          "reward": {
            "type": [
              "object",
              "null"
            ],
            "properties": {
              "points": {
                "type": [
                  "number",
                  "null"
                ]
              },
              "assignment_id": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "id": {
                "type": [
                  "string",
                  "null"
                ]
              }
            }
          },
          "metadata": {
            "type": [
              "object",
              "null"
            ],
            "description": "Metadata can be a string, number, boolean, date, datetime, image_url, object, geopoint, unknown. | related objects: campaign, voucher, publication, redemption, product, customer, order, order_item, loyalty_tier, promotion_tier."
          }
        }
      },
      "1_req_vouchers_qualification - copy": {
        "title": "RequestBodyVouchersQualification",
        "type": "object",
        "description": "Request body schema for /vouchers/qualification.",
        "properties": {
          "customer": {
            "type": [
              "object",
              "null"
            ],
            "description": "This object stores customer details.",
            "properties": {
              "id": {
                "type": "string",
                "description": "The ID of an existing customer that will be linked to the redemption in this request. Assigned by the Voucherify API, identifies the customer.",
                "example": "cust_J1CDUdbqn5Exva8ASWk1Fq0j"
              },
              "source_id": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "A unique customer identifier. You can provide your own (e.g. CRM id) or use the one returned by Voucherify, see tracking_id from Validate Voucher (client-side). A tracking identifier of a user that validate a voucher. It is build based on your internal id (e.g., email, database ID). If you also pass a customer ID, the source ID will be ignored. Otherwise, if you do not pass a customer ID, the source ID you provide must either be a token, like the ones returned in origin voucher validation method done by specific customer, or a string identifying customer (e.g., email, database ID, CRM ID)."
              },
              "name": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "First and Last Name"
              },
              "description": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "An arbitrary string that you can attach to a customer object. It is displayed alongside a customer in the dashboard.\t"
              },
              "email": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "phone": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "address": {
                "type": [
                  "object",
                  "null"
                ],
                "additionalProperties": false,
                "description": "A set of key/value pairs which describes the address.",
                "properties": {
                  "city": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "country": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "line_1": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "line_2": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "postal_code": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "state": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                }
              },
              "metadata": {
                "type": [
                  "object",
                  "null"
                ],
                "description": "A set of key/value pairs that you can attach to a customer object for segment building. It can be useful for storing additional information about the customer in a structured format."
              },
              "email_unsubscribed": {
                "type": [
                  "boolean",
                  "null"
                ]
              },
              "birthday": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "Customer's birthdate.",
                "format": "date",
                "example": "2022-03-07"
              },
              "birthdate": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "Customer's birthdate",
                "example": "2022-03-07",
                "format": "date"
              },
              "customer_landing_page": {
                "type": [
                  "object",
                  "null"
                ],
                "properties": {
                  "custom_event": {
                    "type": [
                      "object",
                      "null"
                    ]
                  },
                  "consents": {
                    "type": [
                      "object",
                      "null"
                    ]
                  },
                  "publication_id": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "voucher_code": {
                    "type": [
                      "string",
                      "null"
                    ]
                  }
                }
              },
              "created_at": {
                "type": "string"
              }
            }
          },
          "order": {
            "type": [
              "object",
              "null"
            ],
            "description": "Tracks purchase transactions.",
            "properties": {
              "id": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "The ID of an existing order that will be linked to redemption in this request."
              },
              "status": {
                "type": [
                  "string",
                  "null"
                ],
                "enum": [
                  "CREATED",
                  "PAID",
                  "CANCELED",
                  "FULFILLED"
                ]
              },
              "source_id": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "The merchant’s order ID if it is different from the Voucherify order ID. It is really useful in case of integration between multiple systems. It can be an order ID from CRM, database or 3rd party service."
              },
              "amount": {
                "type": [
                  "integer",
                  "null"
                ],
                "minimum": 0,
                "description": "Represents a total amount of order items (sum of item.amount)\n\nValue is multiplied by 100 to precisely represent 2 decimal places. For example, $100 is written as 10000."
              },
              "discount_amount": {
                "type": [
                  "integer",
                  "null"
                ],
                "minimum": 0,
                "description": "Summarize all discounts applied to the order inlcuding discounts applied to particular order line items and discounts applied to the whole cart.\n\nValue is multiplied by 100 to precisely represent 2 decimal places. For example, $100 is written as 10000."
              },
              "items": {
                "type": "array",
                "description": "List of Order Items constituting the order. Order items can be defined either by product_id or sku_id. Along with every item you must define quantity.A list of Order Items that have been applied to the order. hyperlink the Order Items to another object.\n",
                "items": {
                  "type": [
                    "object",
                    "null"
                  ],
                  "properties": {
                    "id": {
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "source_id": {
                      "type": [
                        "string",
                        "null"
                      ],
                      "description": "Product/SKU reference ID"
                    },
                    "product_id": {
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "sku_id": {
                      "type": [
                        "string",
                        "null"
                      ]
                    },
                    "related_object": {
                      "type": [
                        "string",
                        "null"
                      ],
                      "enum": [
                        "product",
                        "sku"
                      ],
                      "description": "Allowed values: `product`, `sku`"
                    },
                    "amount": {
                      "type": [
                        "integer",
                        "null"
                      ],
                      "description": "Represents a total amount of order item (price * quantity).\n\nYou should provide it to retrieve `discount_amount` if the discount is applied only to this item."
                    },
                    "discount_amount": {
                      "type": [
                        "integer",
                        "null"
                      ],
                      "description": "Represents total amount of the discount applied to order line items\n\nValue is multiplied by 100 to precisely represent 2 decimal places. For example, $100 is written as 10000."
                    },
                    "quantity": {
                      "type": [
                        "integer",
                        "null"
                      ]
                    },
                    "discount_quantity": {
                      "type": [
                        "integer",
                        "null"
                      ],
                      "description": "number of items being discounted\t"
                    },
                    "price": {
                      "type": [
                        "integer",
                        "null"
                      ],
                      "description": "Unit price of an item"
                    },
                    "product": {
                      "type": [
                        "object",
                        "null"
                      ],
                      "default": null,
                      "description": "An object containing details of related product. Those details will be used for validation and redemption processes on top of details already stored in system.",
                      "properties": {
                        "id": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "source_id": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "name": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "price": {
                          "type": [
                            "null",
                            "integer"
                          ]
                        },
                        "metadata": {
                          "type": [
                            "object",
                            "null"
                          ]
                        },
                        "override": {
                          "type": [
                            "boolean",
                            "null"
                          ],
                          "description": "The `override` is used once the product should be stored in system. If product does not exists it will be created with the use of `source_id`."
                        }
                      }
                    },
                    "sku": {
                      "type": [
                        "object",
                        "null"
                      ],
                      "default": null,
                      "description": "An object containing details of related SKU. Those details will be used for validation and redemption processes on top of details already stored in system.",
                      "properties": {
                        "id": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "source_id": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "sku": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "price": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "metadata": {
                          "type": [
                            "object",
                            "null"
                          ]
                        },
                        "override": {
                          "type": [
                            "boolean",
                            "null"
                          ],
                          "description": "The override is used once the product should be stored in system. If sku does not exists it will be created with the use of `source_id`. If sku does not exists it's required to set `product_id` that it belongs to."
                        }
                      }
                    }
                  }
                }
              },
              "customer": {
                "type": [
                  "object",
                  "null"
                ],
                "description": "The customer used for the order."
              },
              "referrer": {
                "description": "The person who referred the customer to make the order.",
                "type": [
                  "object",
                  "null"
                ]
              },
              "metadata": {
                "type": [
                  "string",
                  "null"
                ]
              }
            }
          },
          "reward": {
            "type": [
              "object",
              "null"
            ],
            "properties": {
              "points": {
                "type": [
                  "number",
                  "null"
                ]
              },
              "assignment_id": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "id": {
                "type": [
                  "string",
                  "null"
                ]
              }
            }
          },
          "metadata": {
            "type": [
              "object",
              "null"
            ],
            "description": "Metadata can be a string, number, boolean, date, datetime, image_url, object, geopoint, unknown. | related objects: campaign, voucher, publication, redemption, product, customer, order, order_item, loyalty_tier, promotion_tier."
          },
          "gift": {
            "type": [
              "object",
              "null"
            ],
            "properties": {
              "credits": {
                "type": [
                  "number",
                  "null"
                ]
              }
            }
          },
          "session": {
            "type": [
              "object",
              "null"
            ],
            "properties": {
              "key": {
                "type": [
                  "string",
                  "null"
                ],
                "description": "Unique session identifier assigned by the Voucherify API."
              },
              "type": {
                "type": [
                  "string",
                  "null"
                ],
                "enum": [
                  "COUNT_PER_CUSTOMER",
                  "ORDER",
                  "LOCK"
                ],
                "description": "The type of session. Required to establish a new session. \n\n`LOCK`: Locks the following parameters within the session:\n\n- redemption quantity by 1\n- redemption gift credits specified with the requests\n- redemption loyalty points specified with the request"
              },
              "ttl": {
                "type": [
                  "number",
                  "null"
                ],
                "description": "Value for the period of time that the session is active. Units for this parameter are defined by `session.ttl_unit`."
              },
              "ttl_unit": {
                "type": [
                  "string",
                  "null"
                ],
                "enum": [
                  "DAYS",
                  "HOURS",
                  "MICROSECONDS",
                  "MILLISECONDS",
                  "MINUTES",
                  "NANOSECONDS",
                  "SECONDS"
                ],
                "description": "Defines the type of unit in which the session time is counted."
              }
            }
          },
          "tracking_id": {
            "type": [
              "string",
              "null"
            ],
            "maxLength": 2500,
            "example": "track_fxEMFisanb7t4l96X8WKcemyGNPnHpGM3KTfUsqZGCOx/p57/J2+Yw==",
            "description": "A tracking identifier of a user that validated a voucher. Identifier generated during voucher validation."
          }
        }
      },
      "1_req_obj_vouchers_qualification_order": {
        "title": "OrderObject",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        }
      },
      "1_req_obj_vouchers_qualification_reward": {
        "title": "RewardObject",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        }
      },
      "0_obj_metadata": {
        "title": "MetadataObject",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          }
        }
      }
    },
    "examples": {
      "req_vouchers_metadata_1_test": {
        "summary": "Request Body",
        "description": "Request body to update metadata in bulk *asynchronously*.",
        "value": {
          "codes": [
            "PROMO-CODE810",
            "PROMO-CODE726"
          ],
          "metadata": {
            "lang": "en",
            "authorized_internally": true
          }
        }
      },
      "req_vouchers_metadata_2_test": {
        "summary": "Request Body",
        "description": "Request body to update metadata in bulk *asynchronously*.",
        "value": {
          "codes": [
            "PROMO-CODE810",
            "PROMO-CODE726",
            "PROMO-CODE888"
          ],
          "metadata": {
            "lang": "en",
            "authorized_internally": true
          }
        }
      },
      "req_vouchers_metadata_1": {
        "value": {
          "codes": [
            "PROMO-CODE810",
            "PROMO-CODE726"
          ],
          "metadata": {
            "lang": "en",
            "authorized_internally": true
          }
        }
      },
      "req_vouchers_metadata_2": {
        "value": {
          "codes": [
            "PROMO-CODE810",
            "PROMO-CODE726",
            "PROMO-CODE888"
          ],
          "metadata": {
            "lang": "en",
            "authorized_internally": true
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "VOUCHERS API",
      "description": "Manage discount and gift card vouchers."
    },
    {
      "name": "CAMPAIGNS API",
      "description": "Group vouchers or promotion tiers of a specific type."
    },
    {
      "name": "PROMOTIONS API",
      "description": "Manage promotions."
    },
    {
      "name": "REWARDS API",
      "description": "Manage rewards."
    },
    {
      "name": "DISTRIBUTIONS API",
      "description": "Manage distributions."
    },
    {
      "name": "VALIDATIONS API",
      "description": "Validate vouchers and promotions."
    },
    {
      "name": "REDEMPTIONS API",
      "description": "Manage redemptions."
    },
    {
      "name": "STACKABLE DISCOUNTS API",
      "description": "Manage multiple discounts in one request."
    },
    {
      "name": "LOYALTIES API",
      "description": "Manage loyalty campaign."
    },
    {
      "name": "CUSTOMERS API",
      "description": "Manage customers."
    },
    {
      "name": "ORDERS API",
      "description": "Manage orders."
    },
    {
      "name": "PRODUCTS API",
      "description": "Manage products."
    },
    {
      "name": "PRODUCT COLLECTIONS API",
      "description": "Group products."
    },
    {
      "name": "VALIDATION RULES API",
      "description": "Configure validation rules."
    },
    {
      "name": "SEGMENTS API",
      "description": "Manage customer segments."
    },
    {
      "name": "EVENTS API",
      "description": "Track custom and internal events."
    },
    {
      "name": "CONSENTS API",
      "description": "List marketing opt-in consents."
    },
    {
      "name": "ASYNC ACTIONS API",
      "description": "Track asynchronous operations scheduled in Projects."
    }
  ],
  "paths": {
    "/vouchers/{code}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/code"
        }
      ],
      "get": {
        "summary": "Get Voucher",
        "tags": [
          "VOUCHERS API"
        ],
        "operationId": "get-vouchers-code",
        "description": "Retrieves the voucher with the given `code`.",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a voucher object if a valid identifier was provided. \n\nAdditionally, the response returns validation rules related to the voucher object. They can be inherited from a campaign.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/1_obj_voucher_object"
                }
              }
            }
          },
          "404": {
            "description": "Not Found. When requesting the code of a voucher that has been deleted, the resource will not be returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/e_404_not_found"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update Voucher",
        "tags": [
          "VOUCHERS API"
        ],
        "operationId": "put-vouchers-code",
        "description": "Updates the specified voucher by setting the values of the parameters passed in the request body. Any parameters not provided in the payload will be left unchanged.\n\nYou can modify the following fields:  \n\n- `category`\n- `start_date`\n- `expiration_date`\n- `active`\n- `additional_info`\n- `metadata`\n- `validity_day_of_week`\n- `validity_timeframe`\n- `gift` &rarr; `amount` + `effect`\n- `loyalty_card` &rarr; `points`\n- `discount` &darr;\n  - Amount type &rarr; `amount_off` + `effect` + **requires** `type`=`AMOUNT` \n  - Percent type &rarr; `percent_off` + `effect`\n  - Fixed type &rarr; `fixed_amount` + `effect` + **requires** `type`=`FIXED` \n  - Unit type &darr; \n    - One item &rarr; `unit_off` + `unit_type` + `effect` + **requires** `type`=`UNIT`\n    - Multiple item types &rarr; `unit_off` + `unit_type` + `effect` + **requires** higher level `type`=`UNIT` & `effect`=`ADD_MANY_ITEMS` (HERE ONLY TYPE=UNIT IS REQUIRED - IF I DON'T PASS THE OTHER ATTRIBUTES, IT DELETES THEM FROM THE VOUCHER OBJECT RESPONSE)\n  - ~~Shipping type &rarr; `unit_off` + `unit_type` + `effect` + **requires** `type`=`UNIT`~~ \n\nFields other than the ones listed above won't be modified. Even if provided, they will be silently skipped.",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/1_req_vouchers_code_PUT"
              },
              "examples": {
                "example-1-Update-Percentage-Discount": {
                  "value": {
                    "category": "Existing Customers",
                    "discount": {
                      "percent_off": 20,
                      "effect": "APPLY_TO_ITEMS"
                    },
                    "start_date": "2021-01-01T00:00:00Z",
                    "expiration_date": "2023-12-31T23:59:59Z",
                    "active": true,
                    "additional_info": "This voucher is being activated.",
                    "metadata": {
                      "test": false,
                      "locale": "de-en-pl"
                    },
                    "validity_day_of_week": [
                      1,
                      2,
                      3,
                      4,
                      5,
                      6
                    ],
                    "validity_timeframe": {
                      "duration": "PT1H",
                      "interval": "P3D"
                    }
                  }
                },
                "example-2-Update-Gift-Card": {
                  "value": {
                    "category": "Existing Customers",
                    "gift": {
                      "amount": 20000,
                      "effect": "APPLY_TO_ITEMS"
                    },
                    "start_date": "2021-01-01T00:00:00Z",
                    "active": false,
                    "additional_info": "This gift card is disabled.",
                    "metadata": {
                      "test": false,
                      "locale": "de-en-pl"
                    }
                  }
                },
                "example-3-Update-Loyalty-Card": {
                  "value": {
                    "category": "Existing Customers",
                    "loyalty_card": {
                      "points": 20000
                    },
                    "active": false,
                    "additional_info": "This loyalty card is being deactivated and points updated.",
                    "metadata": {
                      "test": false,
                      "locale": "de-en-pl"
                    }
                  }
                },
                "example-4-Update-Amount-Discount": {
                  "value": {
                    "category": "Existing Customers",
                    "discount": {
                      "amount_off": 2000,
                      "type": "AMOUNT",
                      "effect": "APPLY_TO_ITEMS"
                    },
                    "start_date": "2021-01-01T00:00:00Z"
                  }
                },
                "example-5-Update-Fixed-Discount": {
                  "value": {
                    "category": "Existing Customers",
                    "discount": {
                      "type": "FIXED",
                      "fixed_amount": 2000,
                      "effect": "APPLY_TO_ITEMS"
                    },
                    "start_date": "2021-01-01T00:00:00Z"
                  }
                },
                "example-1-Update-Unit-Discount-Multiple-Items": {
                  "value": {
                    "discount": {
                      "type": "UNIT",
                      "effect": "ADD_MANY_ITEMS",
                      "units": [
                        {
                          "unit_off": 2,
                          "unit_type": "prod_0a9f9ab4ab019a42d5",
                          "effect": "ADD_MISSING_ITEMS"
                        },
                        {
                          "unit_off": 1,
                          "unit_type": "prod_0a9f9aeddb019a42db",
                          "effect": "ADD_MISSING_ITEMS"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "required": true,
          "description": "Specify the parameters to be updated."
        },
        "responses": {
          "200": {
            "description": "Returns the voucher object if the update succeeded. Returns an error if update parameters are invalid (e.g. specifying an invalid gift amount).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/1_obj_voucher_object"
                },
                "examples": {
                  "example-1-Response-Percentage-Discount-Voucher": {
                    "value": {
                      "id": "v_MBOEmHelKwvykVZ8JcT4TE5Kla5IMJyc",
                      "code": "welcome",
                      "campaign": null,
                      "campaign_id": null,
                      "category": "Existing Customers",
                      "type": "DISCOUNT_VOUCHER",
                      "discount": {
                        "type": "PERCENT",
                        "percent_off": 20,
                        "effect": "APPLY_TO_ITEMS"
                      },
                      "gift": null,
                      "loyalty_card": null,
                      "start_date": "2021-01-01T00:00:00.000Z",
                      "expiration_date": "2023-12-31T23:59:59.000Z",
                      "validity_timeframe": {
                        "interval": "P3D",
                        "duration": "PT1H"
                      },
                      "validity_day_of_week": [
                        1,
                        2,
                        3,
                        4,
                        5,
                        6
                      ],
                      "active": true,
                      "additional_info": "This voucher is being activated.",
                      "metadata": {
                        "test": false,
                        "locale": "de-en-pl"
                      },
                      "assets": {
                        "qr": {
                          "id": "U2FsdGVkX1+by33CNzWu6xXjCrLKRr1+H9K3I9wOSa7idiHrMYJe0HlrWiy7INhaJf1BnaKJjLKcUC+4/hCbILtJ9lHXZWhewG5q5rmx29gK0IH2eRauw1qCZKIlXfqeGTG2T5ftPsEl1D4xf8W2MA==",
                          "url": "https://dev.dl.voucherify.io/api/v1/assets/qr/U2FsdGVkX1%2Bby33CNzWu6xXjCrLKRr1%2BH9K3I9wOSa7idiHrMYJe0HlrWiy7INhaJf1BnaKJjLKcUC%2B4%2FhCbILtJ9lHXZWhewG5q5rmx29gK0IH2eRauw1qCZKIlXfqeGTG2T5ftPsEl1D4xf8W2MA%3D%3D"
                        },
                        "barcode": {
                          "id": "U2FsdGVkX19wOdFeXYXZ4Xu22L0Ummk03Urz/ZTnXUFeHeehtK4L6RTvNgVeSR+McTZR4DYNLEGydZ+Fo2xEqqM1UWyl8Bx22Pi1CxghADOcy3bAvSca7EEPpvKrCY403UWUDvaO/OEAjvVoiEuaHA==",
                          "url": "https://dev.dl.voucherify.io/api/v1/assets/barcode/U2FsdGVkX19wOdFeXYXZ4Xu22L0Ummk03Urz%2FZTnXUFeHeehtK4L6RTvNgVeSR%2BMcTZR4DYNLEGydZ%2BFo2xEqqM1UWyl8Bx22Pi1CxghADOcy3bAvSca7EEPpvKrCY403UWUDvaO%2FOEAjvVoiEuaHA%3D%3D"
                        }
                      },
                      "is_referral_code": false,
                      "created_at": "2022-02-17T09:05:34.668Z",
                      "updated_at": "2022-02-17T11:03:05.878Z",
                      "validation_rules_assignments": {
                        "object": "list",
                        "data_ref": "data",
                        "data": [
                          {
                            "id": "asgm_74F7QZoYbUoljwQO",
                            "rule_id": "val_4j7DCRm2IS59",
                            "related_object_id": "v_MBOEmHelKwvykVZ8JcT4TE5Kla5IMJyc",
                            "related_object_type": "voucher",
                            "created_at": "2022-02-17T09:05:34.642Z",
                            "object": "validation_rules_assignment"
                          }
                        ],
                        "total": 1
                      },
                      "redemption": {
                        "quantity": 10,
                        "redeemed_quantity": 0,
                        "object": "list",
                        "url": "/v1/vouchers/welcome/redemptions?page=1&limit=10"
                      },
                      "publish": {
                        "object": "list",
                        "count": 0,
                        "url": "/v1/vouchers/welcome/publications?page=1&limit=10"
                      },
                      "object": "voucher"
                    }
                  },
                  "example-2-Response-Gift-Card": {
                    "value": {
                      "id": "v_7xaObxyK5LG62Rp0Xqpez7lqiBFL62pL",
                      "code": "welcomegiftcard",
                      "campaign": null,
                      "campaign_id": null,
                      "category": "Existing Customers",
                      "type": "GIFT_VOUCHER",
                      "discount": null,
                      "gift": {
                        "amount": 20000,
                        "balance": 20000,
                        "effect": "APPLY_TO_ITEMS"
                      },
                      "loyalty_card": null,
                      "start_date": "2021-01-01T00:00:00.000Z",
                      "expiration_date": null,
                      "validity_timeframe": null,
                      "validity_day_of_week": null,
                      "active": false,
                      "additional_info": "This gift card is disabled.",
                      "metadata": {
                        "test": false,
                        "locale": "de-en-pl"
                      },
                      "assets": {
                        "qr": {
                          "id": "U2FsdGVkX1+mTbI2MdzBdMJ7AsOPKvGGgRB7O4oHZv5qq8I3M/OBPJm4PV8bTtBgR+oXOU4Jv1ucbIV7yg1mzC86LVFKjO7Ptnj+63mS9QdHvvILEAulBuZZQ+hZ0HmFXjDl4Quz/kUqGwffKGTziQ==",
                          "url": "https://dev.dl.voucherify.io/api/v1/assets/qr/U2FsdGVkX1%2BmTbI2MdzBdMJ7AsOPKvGGgRB7O4oHZv5qq8I3M%2FOBPJm4PV8bTtBgR%2BoXOU4Jv1ucbIV7yg1mzC86LVFKjO7Ptnj%2B63mS9QdHvvILEAulBuZZQ%2BhZ0HmFXjDl4Quz%2FkUqGwffKGTziQ%3D%3D"
                        },
                        "barcode": {
                          "id": "U2FsdGVkX184KgQ11OfpqB4WkJuH9ushSwZb0YrcN+8OaGPHxBQMiBr2axwnvQlZYv6YhqWtnc5iHByHrkg+6qYHxOLBPRMWCysIhcuUEB57IDhgYUHRPyM2bWjQadVHngGfVGCQ0CUy4PO/71RdMw==",
                          "url": "https://dev.dl.voucherify.io/api/v1/assets/barcode/U2FsdGVkX184KgQ11OfpqB4WkJuH9ushSwZb0YrcN%2B8OaGPHxBQMiBr2axwnvQlZYv6YhqWtnc5iHByHrkg%2B6qYHxOLBPRMWCysIhcuUEB57IDhgYUHRPyM2bWjQadVHngGfVGCQ0CUy4PO%2F71RdMw%3D%3D"
                        }
                      },
                      "is_referral_code": false,
                      "created_at": "2022-02-17T09:09:49.665Z",
                      "updated_at": "2022-02-17T11:11:48.071Z",
                      "validation_rules_assignments": {
                        "object": "list",
                        "data_ref": "data",
                        "data": [],
                        "total": 0
                      },
                      "redemption": {
                        "quantity": null,
                        "redeemed_quantity": 0,
                        "redeemed_amount": 0,
                        "object": "list",
                        "url": "/v1/vouchers/welcomegiftcard/redemptions?page=1&limit=10"
                      },
                      "publish": {
                        "object": "list",
                        "count": 0,
                        "url": "/v1/vouchers/welcomegiftcard/publications?page=1&limit=10"
                      },
                      "object": "voucher"
                    }
                  },
                  "example-3-Response-Loyalty-Card": {
                    "value": {
                      "id": "v_l84t3fy3keMUiOeaHbN1cbTdW8O5eUlm",
                      "code": "welcomeloyalty",
                      "campaign": "Loyalty Campaign",
                      "campaign_id": "camp_E87CubZLZ8eoQt3c4kAEZsx0",
                      "category": "Existing Customers",
                      "type": "LOYALTY_CARD",
                      "discount": null,
                      "gift": null,
                      "loyalty_card": {
                        "points": 20000,
                        "balance": 20000
                      },
                      "start_date": null,
                      "expiration_date": null,
                      "validity_timeframe": null,
                      "validity_day_of_week": null,
                      "active": false,
                      "additional_info": "This loyalty card is being deactivated and points updated.",
                      "metadata": {
                        "test": false,
                        "locale": "de-en-pl"
                      },
                      "assets": {
                        "qr": {
                          "id": "U2FsdGVkX186PCWooyrNsjfI+nb+Y9ziUZ1k7xe+nJQ53Ms1ynNJOX6JXC6SwxS1WDhYwAKX5FxaDoKyuPf5MkQrkeB6u5bSx333ldAyLypNnqwBD2N17S64WFnTqV7eXUk3hS30wDYcz0cQAJFDcQ==",
                          "url": "https://dev.dl.voucherify.io/api/v1/assets/qr/U2FsdGVkX186PCWooyrNsjfI%2Bnb%2BY9ziUZ1k7xe%2BnJQ53Ms1ynNJOX6JXC6SwxS1WDhYwAKX5FxaDoKyuPf5MkQrkeB6u5bSx333ldAyLypNnqwBD2N17S64WFnTqV7eXUk3hS30wDYcz0cQAJFDcQ%3D%3D"
                        },
                        "barcode": {
                          "id": "U2FsdGVkX1/FWUg0RbOU7R7Zqg7/8Ba6oYuXrmIl7EdXGgaPMPfpePNGRzxBu4LP2dNEUO9h1Sh37MR1PxOoaemPwlgTDo/1G8dX1JjSppNoaTHhkzk2w4yutNhP7o8cq3ZBbT3TNMTKb2H3fUMc7A==",
                          "url": "https://dev.dl.voucherify.io/api/v1/assets/barcode/U2FsdGVkX1%2FFWUg0RbOU7R7Zqg7%2F8Ba6oYuXrmIl7EdXGgaPMPfpePNGRzxBu4LP2dNEUO9h1Sh37MR1PxOoaemPwlgTDo%2F1G8dX1JjSppNoaTHhkzk2w4yutNhP7o8cq3ZBbT3TNMTKb2H3fUMc7A%3D%3D"
                        }
                      },
                      "is_referral_code": false,
                      "created_at": "2022-02-17T09:12:01.428Z",
                      "updated_at": "2022-02-17T11:20:12.447Z",
                      "validation_rules_assignments": {
                        "object": "list",
                        "data_ref": "data",
                        "data": [],
                        "total": 0
                      },
                      "redemption": {
                        "quantity": null,
                        "redeemed_quantity": 0,
                        "redeemed_points": 0,
                        "object": "list",
                        "url": "/v1/vouchers/welcomeloyalty/redemptions?page=1&limit=10"
                      },
                      "publish": {
                        "object": "list",
                        "count": 0,
                        "url": "/v1/vouchers/welcomeloyalty/publications?page=1&limit=10"
                      },
                      "object": "voucher"
                    }
                  },
                  "example-4-Response-Amount-Discount": {
                    "value": {
                      "id": "v_jMIjKfG2oJ7vCwIPhsLsbXYGTdPLlbJd",
                      "code": "WelcomeDiscountAmount",
                      "campaign": null,
                      "campaign_id": null,
                      "category": "Existing Customers",
                      "type": "DISCOUNT_VOUCHER",
                      "discount": {
                        "type": "AMOUNT",
                        "amount_off": 2000,
                        "effect": "APPLY_TO_ITEMS"
                      },
                      "gift": null,
                      "loyalty_card": null,
                      "start_date": "2021-01-01T00:00:00.000Z",
                      "expiration_date": "2022-12-31T23:59:59.000Z",
                      "validity_timeframe": {
                        "interval": "P2D",
                        "duration": "PT1H"
                      },
                      "validity_day_of_week": [
                        1,
                        2,
                        3,
                        4,
                        5
                      ],
                      "active": false,
                      "additional_info": "This voucher will remain inactive until enabled.",
                      "metadata": {
                        "test": true,
                        "locale": "de-en"
                      },
                      "assets": {
                        "qr": {
                          "id": "U2FsdGVkX1+TcEE9sZP6aMfAW3NZv9GWlCnUNn+SiK4FIbMRWWjN5hzTR7Yc/73yfldUb6SMgIvUNL551Nz/nPjrMY2iauia1MSWX21MItsSPfy8qccrC+WAlvpGK/1ZklnxYaeKqxTqwSXl7ppSlgcuEejbFiaqEDajvYUZsF4=",
                          "url": "https://dev.dl.voucherify.io/api/v1/assets/qr/U2FsdGVkX1%2BTcEE9sZP6aMfAW3NZv9GWlCnUNn%2BSiK4FIbMRWWjN5hzTR7Yc%2F73yfldUb6SMgIvUNL551Nz%2FnPjrMY2iauia1MSWX21MItsSPfy8qccrC%2BWAlvpGK%2F1ZklnxYaeKqxTqwSXl7ppSlgcuEejbFiaqEDajvYUZsF4%3D"
                        },
                        "barcode": {
                          "id": "U2FsdGVkX1/AhpZMq/h+Phi8JZF9m4qL8/U/Z5AST82jaAOnnhdHdbaGjB1+/0VFIdGBA8w2+3JX5qd61Dfk6yfiLCraVw7lYjQddCHF5SKtJs4hqsLHZevQTCzpZkeIHC3ThsG/fLZTsaNn8tjewd/W4qn/2Cc5NgTdv7fqui4=",
                          "url": "https://dev.dl.voucherify.io/api/v1/assets/barcode/U2FsdGVkX1%2FAhpZMq%2Fh%2BPhi8JZF9m4qL8%2FU%2FZ5AST82jaAOnnhdHdbaGjB1%2B%2F0VFIdGBA8w2%2B3JX5qd61Dfk6yfiLCraVw7lYjQddCHF5SKtJs4hqsLHZevQTCzpZkeIHC3ThsG%2FfLZTsaNn8tjewd%2FW4qn%2F2Cc5NgTdv7fqui4%3D"
                        }
                      },
                      "is_referral_code": false,
                      "created_at": "2022-02-17T11:41:05.236Z",
                      "updated_at": "2022-02-17T11:45:29.269Z",
                      "validation_rules_assignments": {
                        "object": "list",
                        "data_ref": "data",
                        "data": [
                          {
                            "id": "asgm_tDN7MJNayjrf1wyn",
                            "rule_id": "val_4j7DCRm2IS59",
                            "related_object_id": "v_jMIjKfG2oJ7vCwIPhsLsbXYGTdPLlbJd",
                            "related_object_type": "voucher",
                            "created_at": "2022-02-17T11:41:05.210Z",
                            "object": "validation_rules_assignment"
                          }
                        ],
                        "total": 1
                      },
                      "redemption": {
                        "quantity": 10,
                        "redeemed_quantity": 0,
                        "object": "list",
                        "url": "/v1/vouchers/WelcomeDiscountAmount/redemptions?page=1&limit=10"
                      },
                      "publish": {
                        "object": "list",
                        "count": 0,
                        "url": "/v1/vouchers/WelcomeDiscountAmount/publications?page=1&limit=10"
                      },
                      "object": "voucher"
                    }
                  },
                  "example-5-Response-Fixed-Discount": {
                    "value": {
                      "id": "v_B1Pe7QPTjXCHm8IcDkJAQs4g6Zc08UlK",
                      "code": "wou4w1Og",
                      "campaign": "Fixed",
                      "campaign_id": "camp_2jVA6EKGSAe6scyc3i1q9ROD",
                      "category": "Existing Customers",
                      "type": "DISCOUNT_VOUCHER",
                      "discount": {
                        "type": "FIXED",
                        "effect": "APPLY_TO_ITEMS",
                        "fixed_amount": 2000
                      },
                      "gift": null,
                      "loyalty_card": null,
                      "start_date": "2021-01-01T00:00:00.000Z",
                      "expiration_date": null,
                      "validity_timeframe": null,
                      "validity_day_of_week": null,
                      "active": true,
                      "additional_info": null,
                      "metadata": {},
                      "assets": {
                        "qr": {
                          "id": "U2FsdGVkX18zxYPpRIYeGHCoCAp3ZAPEUM0qacHQIIW/82oGOW24bFMA06kahjkZKVA/1mqqJsqh83C29Jhdz82KrRsM2zl9nzplu5hrmn7m0twnf5NQaTTcovEvnBV8Kej9tGhzc/dPwqE+xEKuDg==",
                          "url": "https://dev.dl.voucherify.io/api/v1/assets/qr/U2FsdGVkX18zxYPpRIYeGHCoCAp3ZAPEUM0qacHQIIW%2F82oGOW24bFMA06kahjkZKVA%2F1mqqJsqh83C29Jhdz82KrRsM2zl9nzplu5hrmn7m0twnf5NQaTTcovEvnBV8Kej9tGhzc%2FdPwqE%2BxEKuDg%3D%3D"
                        },
                        "barcode": {
                          "id": "U2FsdGVkX18tsK1tz0X2IQWbFHCY4wZBDjoysFt1fBlWo/9bm/HNTci1Q3bSFuIzqIQqlU2TkSacFBgOWGuVG08XboZsqNSXXsAgST9tyoxpaOJ22B2EwWspdvuwJqvZh4PpEyh3BBDS7eOWsr3+Sw==",
                          "url": "https://dev.dl.voucherify.io/api/v1/assets/barcode/U2FsdGVkX18tsK1tz0X2IQWbFHCY4wZBDjoysFt1fBlWo%2F9bm%2FHNTci1Q3bSFuIzqIQqlU2TkSacFBgOWGuVG08XboZsqNSXXsAgST9tyoxpaOJ22B2EwWspdvuwJqvZh4PpEyh3BBDS7eOWsr3%2BSw%3D%3D"
                        }
                      },
                      "is_referral_code": false,
                      "created_at": "2022-02-17T11:54:37.766Z",
                      "updated_at": "2022-02-17T12:04:53.346Z",
                      "validation_rules_assignments": {
                        "object": "list",
                        "data_ref": "data",
                        "data": [],
                        "total": 0
                      },
                      "redemption": {
                        "quantity": 1,
                        "redeemed_quantity": 0,
                        "object": "list",
                        "url": "/v1/vouchers/wou4w1Og/redemptions?page=1&limit=10"
                      },
                      "publish": {
                        "object": "list",
                        "count": 0,
                        "url": "/v1/vouchers/wou4w1Og/publications?page=1&limit=10"
                      },
                      "object": "voucher"
                    }
                  },
                  "example-1-Unit-Discount-Multiple-Items": {
                    "value": {
                      "id": "v_cu8nyozvTDA413H17bH5BLha0cjxt7s8",
                      "code": "MultipleUnitTypesUnitDiscount",
                      "campaign": null,
                      "campaign_id": null,
                      "category": "New Customers",
                      "type": "DISCOUNT_VOUCHER",
                      "discount": {
                        "type": "UNIT",
                        "effect": "ADD_MANY_ITEMS",
                        "units": [
                          {
                            "unit_off": 2,
                            "unit_type": "prod_0a9f9ab4ab019a42d5",
                            "effect": "ADD_MISSING_ITEMS"
                          },
                          {
                            "unit_off": 1,
                            "unit_type": "prod_0a9f9aeddb019a42db",
                            "effect": "ADD_MISSING_ITEMS"
                          }
                        ]
                      },
                      "gift": null,
                      "loyalty_card": null,
                      "start_date": "2020-01-01T00:00:00.000Z",
                      "expiration_date": "2022-12-31T23:59:59.000Z",
                      "validity_timeframe": {
                        "interval": "P2D",
                        "duration": "PT1H"
                      },
                      "validity_day_of_week": [
                        1,
                        2,
                        3,
                        4,
                        5
                      ],
                      "active": false,
                      "additional_info": "This voucher will remain inactive until enabled.",
                      "metadata": {
                        "test": true,
                        "locale": "de-en"
                      },
                      "assets": {
                        "qr": {
                          "id": "U2FsdGVkX1+ocJBtZ9NqT97gZ/QTfOz54TAoRoKO3tnCYBtHZWMghEHT0b2aFrPSL1lqMyf6fYy6DH2/DkH5p5Vd8dOozW1LV6wPVatWpa1lZMeMIB0OcARCW3q+3QydoW2KdliLKyksFwumH9C7Fsnj6HTaEbUjSttTZE/be+o=",
                          "url": "https://dev.dl.voucherify.io/api/v1/assets/qr/U2FsdGVkX1%2BocJBtZ9NqT97gZ%2FQTfOz54TAoRoKO3tnCYBtHZWMghEHT0b2aFrPSL1lqMyf6fYy6DH2%2FDkH5p5Vd8dOozW1LV6wPVatWpa1lZMeMIB0OcARCW3q%2B3QydoW2KdliLKyksFwumH9C7Fsnj6HTaEbUjSttTZE%2Fbe%2Bo%3D"
                        },
                        "barcode": {
                          "id": "U2FsdGVkX1+Sly3IYj3EbZFHGGNxV6Ns4j76O8d0kRQe3WriJz5qY6s4GBIwlsdy13AciaQuiVt232HlOlZ4TzGaSSk3+ZMldwBGaTp/fIN9SGBW/NVUtfDOI2sIDLZCBBrdK7WVvtCQQ+1Y+6qClYg/QurJExCFRkDeKpKjDug=",
                          "url": "https://dev.dl.voucherify.io/api/v1/assets/barcode/U2FsdGVkX1%2BSly3IYj3EbZFHGGNxV6Ns4j76O8d0kRQe3WriJz5qY6s4GBIwlsdy13AciaQuiVt232HlOlZ4TzGaSSk3%2BZMldwBGaTp%2FfIN9SGBW%2FNVUtfDOI2sIDLZCBBrdK7WVvtCQQ%2B1Y%2B6qClYg%2FQurJExCFRkDeKpKjDug%3D"
                        }
                      },
                      "is_referral_code": false,
                      "created_at": "2022-02-18T06:27:45.619Z",
                      "updated_at": "2022-02-18T06:31:08.630Z",
                      "validation_rules_assignments": {
                        "object": "list",
                        "data_ref": "data",
                        "data": [],
                        "total": 0
                      },
                      "redemption": {
                        "quantity": 5,
                        "redeemed_quantity": 0,
                        "object": "list",
                        "url": "/v1/vouchers/MultipleUnitTypesUnitDiscount/redemptions?page=1&limit=10"
                      },
                      "publish": {
                        "object": "list",
                        "count": 0,
                        "url": "/v1/vouchers/MultipleUnitTypesUnitDiscount/publications?page=1&limit=10"
                      },
                      "object": "voucher"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Voucher",
        "tags": [
          "VOUCHERS API"
        ],
        "operationId": "delete-vouchers-code",
        "description": "Deletes a voucher. This operation cannot be undone. Additionally, this operation immediately removes any redemptions on the voucher.",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          },
          {
            "$ref": "#/components/parameters/force"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      },
      "post": {
        "summary": "Create Voucher",
        "tags": [
          "VOUCHERS API"
        ],
        "operationId": "post-vouchers-code",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ],
        "description": "Create a standalone voucher. You can choose to create a `GIFT_VOUCHER`, a `DISCOUNT_VOUCHER`, or a `LOYALTY_CARD`. The code path parameter can use all letters of the English alphabet, Arabic numerals, and special characters.  \n\nWhen you create a new voucher, you can specify a type to create it.\nCreating a new voucher will create a new stand alone voucher if no `campaign` name or `campaign_id` is provided. In case of the loyalty card, a campaign name is required.\n\nThis method will return an error when trying to create a voucher that already exists.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/1_req_vouchers_code_POST"
              },
              "examples": {
                "example-1-Create-Percentage-Discount": {
                  "value": {
                    "category": "New Customers",
                    "type": "DISCOUNT_VOUCHER",
                    "discount": {
                      "percent_off": 10,
                      "type": "PERCENT",
                      "effect": "APPLY_TO_ORDER"
                    },
                    "start_date": "2022-01-01T00:00:00Z",
                    "expiration_date": "2022-12-31T23:59:59Z",
                    "validity_timeframe": {
                      "duration": "PT1H",
                      "interval": "P2D"
                    },
                    "validity_day_of_week": [
                      1,
                      2,
                      3,
                      4,
                      5
                    ],
                    "active": false,
                    "additional_info": "This voucher will remain inactive until enabled.",
                    "redemption": {
                      "quantity": 10
                    },
                    "metadata": {
                      "test": true,
                      "locale": "de-en"
                    },
                    "validation_rules": [
                      "val_4j7DCRm2IS59"
                    ]
                  }
                },
                "example-2-Create-Gift-Card": {
                  "value": {
                    "category": "New Customers",
                    "type": "GIFT_VOUCHER",
                    "gift": {
                      "amount": 10000,
                      "effect": "APPLY_TO_ORDER"
                    },
                    "start_date": "2022-01-01T00:00:00Z",
                    "active": true,
                    "additional_info": "This gift card is enabled immediately upon creation.",
                    "metadata": {
                      "test": true,
                      "locale": "de-en"
                    }
                  }
                },
                "example-3-Create-Loyalty-Card": {
                  "value": {
                    "category": "New Customers",
                    "campaign": "camp_E87CubZLZ8eoQt3c4kAEZsx0",
                    "type": "LOYALTY_CARD",
                    "loyalty_card": {
                      "points": 10000
                    },
                    "additional_info": "This loyalty card is enabled immediately upon creation.",
                    "metadata": {
                      "test": true,
                      "locale": "de-en"
                    }
                  }
                }
              }
            }
          },
          "description": "Specify the details of the voucher that you would like to create."
        },
        "responses": {
          "200": {
            "description": "Returns a voucher object if the call succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/1_obj_voucher_object"
                },
                "examples": {
                  "example-1-Response-Percentage-Discount": {
                    "value": {
                      "id": "v_MBOEmHelKwvykVZ8JcT4TE5Kla5IMJyc",
                      "code": "welcome",
                      "campaign": null,
                      "campaign_id": null,
                      "category": "New Customers",
                      "type": "DISCOUNT_VOUCHER",
                      "discount": {
                        "type": "PERCENT",
                        "percent_off": 10,
                        "effect": "APPLY_TO_ORDER"
                      },
                      "gift": null,
                      "loyalty_card": null,
                      "start_date": "2022-01-01T00:00:00.000Z",
                      "expiration_date": "2022-12-31T23:59:59.000Z",
                      "validity_timeframe": {
                        "interval": "P2D",
                        "duration": "PT1H"
                      },
                      "validity_day_of_week": [
                        1,
                        2,
                        3,
                        4,
                        5
                      ],
                      "active": false,
                      "additional_info": "This voucher will remain inactive until enabled.",
                      "metadata": {
                        "test": true,
                        "locale": "de-en"
                      },
                      "assets": {
                        "qr": {
                          "id": "U2FsdGVkX1+by33CNzWu6xXjCrLKRr1+H9K3I9wOSa7idiHrMYJe0HlrWiy7INhaJf1BnaKJjLKcUC+4/hCbILtJ9lHXZWhewG5q5rmx29gK0IH2eRauw1qCZKIlXfqeGTG2T5ftPsEl1D4xf8W2MA==",
                          "url": "https://dev.dl.voucherify.io/api/v1/assets/qr/U2FsdGVkX1%2Bby33CNzWu6xXjCrLKRr1%2BH9K3I9wOSa7idiHrMYJe0HlrWiy7INhaJf1BnaKJjLKcUC%2B4%2FhCbILtJ9lHXZWhewG5q5rmx29gK0IH2eRauw1qCZKIlXfqeGTG2T5ftPsEl1D4xf8W2MA%3D%3D"
                        },
                        "barcode": {
                          "id": "U2FsdGVkX19wOdFeXYXZ4Xu22L0Ummk03Urz/ZTnXUFeHeehtK4L6RTvNgVeSR+McTZR4DYNLEGydZ+Fo2xEqqM1UWyl8Bx22Pi1CxghADOcy3bAvSca7EEPpvKrCY403UWUDvaO/OEAjvVoiEuaHA==",
                          "url": "https://dev.dl.voucherify.io/api/v1/assets/barcode/U2FsdGVkX19wOdFeXYXZ4Xu22L0Ummk03Urz%2FZTnXUFeHeehtK4L6RTvNgVeSR%2BMcTZR4DYNLEGydZ%2BFo2xEqqM1UWyl8Bx22Pi1CxghADOcy3bAvSca7EEPpvKrCY403UWUDvaO%2FOEAjvVoiEuaHA%3D%3D"
                        }
                      },
                      "is_referral_code": false,
                      "created_at": "2022-02-17T09:05:34.668Z",
                      "updated_at": null,
                      "validation_rules_assignments": {
                        "object": "list",
                        "data_ref": "data",
                        "data": [
                          {
                            "id": "asgm_74F7QZoYbUoljwQO",
                            "rule_id": "val_4j7DCRm2IS59",
                            "related_object_id": "v_MBOEmHelKwvykVZ8JcT4TE5Kla5IMJyc",
                            "related_object_type": "voucher",
                            "created_at": "2022-02-17T09:05:34.642Z",
                            "object": "validation_rules_assignment"
                          }
                        ],
                        "total": 1
                      },
                      "redemption": {
                        "quantity": 10,
                        "redeemed_quantity": 0,
                        "object": "list",
                        "url": "/v1/vouchers/welcome/redemptions?page=1&limit=10"
                      },
                      "publish": {
                        "object": "list",
                        "count": 0,
                        "url": "/v1/vouchers/welcome/publications?page=1&limit=10"
                      },
                      "object": "voucher"
                    }
                  },
                  "example-2-Response-Gift-Card": {
                    "value": {
                      "id": "v_7xaObxyK5LG62Rp0Xqpez7lqiBFL62pL",
                      "code": "welcomegiftcard",
                      "campaign": null,
                      "campaign_id": null,
                      "category": "New Customers",
                      "type": "GIFT_VOUCHER",
                      "discount": null,
                      "gift": {
                        "amount": 10000,
                        "balance": 10000,
                        "effect": "APPLY_TO_ORDER"
                      },
                      "loyalty_card": null,
                      "start_date": "2022-01-01T00:00:00.000Z",
                      "expiration_date": null,
                      "validity_timeframe": null,
                      "validity_day_of_week": null,
                      "active": true,
                      "additional_info": "This gift card is enabled immediately upon creation.",
                      "metadata": {
                        "test": true,
                        "locale": "de-en"
                      },
                      "assets": {
                        "qr": {
                          "id": "U2FsdGVkX1+mTbI2MdzBdMJ7AsOPKvGGgRB7O4oHZv5qq8I3M/OBPJm4PV8bTtBgR+oXOU4Jv1ucbIV7yg1mzC86LVFKjO7Ptnj+63mS9QdHvvILEAulBuZZQ+hZ0HmFXjDl4Quz/kUqGwffKGTziQ==",
                          "url": "https://dev.dl.voucherify.io/api/v1/assets/qr/U2FsdGVkX1%2BmTbI2MdzBdMJ7AsOPKvGGgRB7O4oHZv5qq8I3M%2FOBPJm4PV8bTtBgR%2BoXOU4Jv1ucbIV7yg1mzC86LVFKjO7Ptnj%2B63mS9QdHvvILEAulBuZZQ%2BhZ0HmFXjDl4Quz%2FkUqGwffKGTziQ%3D%3D"
                        },
                        "barcode": {
                          "id": "U2FsdGVkX184KgQ11OfpqB4WkJuH9ushSwZb0YrcN+8OaGPHxBQMiBr2axwnvQlZYv6YhqWtnc5iHByHrkg+6qYHxOLBPRMWCysIhcuUEB57IDhgYUHRPyM2bWjQadVHngGfVGCQ0CUy4PO/71RdMw==",
                          "url": "https://dev.dl.voucherify.io/api/v1/assets/barcode/U2FsdGVkX184KgQ11OfpqB4WkJuH9ushSwZb0YrcN%2B8OaGPHxBQMiBr2axwnvQlZYv6YhqWtnc5iHByHrkg%2B6qYHxOLBPRMWCysIhcuUEB57IDhgYUHRPyM2bWjQadVHngGfVGCQ0CUy4PO%2F71RdMw%3D%3D"
                        }
                      },
                      "is_referral_code": false,
                      "created_at": "2022-02-17T09:09:49.665Z",
                      "updated_at": null,
                      "redemption": {
                        "quantity": null,
                        "redeemed_quantity": 0,
                        "redeemed_amount": 0,
                        "object": "list",
                        "url": "/v1/vouchers/welcomegiftcard/redemptions?page=1&limit=10"
                      },
                      "publish": {
                        "object": "list",
                        "count": 0,
                        "url": "/v1/vouchers/welcomegiftcard/publications?page=1&limit=10"
                      },
                      "object": "voucher"
                    }
                  },
                  "example-3-Response-Loyalty-Card": {
                    "value": {
                      "id": "v_l84t3fy3keMUiOeaHbN1cbTdW8O5eUlm",
                      "code": "welcomeloyalty",
                      "campaign": "Loyalty Campaign",
                      "campaign_id": "camp_E87CubZLZ8eoQt3c4kAEZsx0",
                      "category": "New Customers",
                      "type": "LOYALTY_CARD",
                      "discount": null,
                      "gift": null,
                      "loyalty_card": {
                        "points": 10000,
                        "balance": 10000
                      },
                      "start_date": null,
                      "expiration_date": null,
                      "validity_timeframe": null,
                      "validity_day_of_week": null,
                      "active": true,
                      "additional_info": "This loyalty card is enabled immediately upon creation.",
                      "metadata": {
                        "test": true,
                        "locale": "de-en"
                      },
                      "assets": {
                        "qr": {
                          "id": "U2FsdGVkX186PCWooyrNsjfI+nb+Y9ziUZ1k7xe+nJQ53Ms1ynNJOX6JXC6SwxS1WDhYwAKX5FxaDoKyuPf5MkQrkeB6u5bSx333ldAyLypNnqwBD2N17S64WFnTqV7eXUk3hS30wDYcz0cQAJFDcQ==",
                          "url": "https://dev.dl.voucherify.io/api/v1/assets/qr/U2FsdGVkX186PCWooyrNsjfI%2Bnb%2BY9ziUZ1k7xe%2BnJQ53Ms1ynNJOX6JXC6SwxS1WDhYwAKX5FxaDoKyuPf5MkQrkeB6u5bSx333ldAyLypNnqwBD2N17S64WFnTqV7eXUk3hS30wDYcz0cQAJFDcQ%3D%3D"
                        },
                        "barcode": {
                          "id": "U2FsdGVkX1/FWUg0RbOU7R7Zqg7/8Ba6oYuXrmIl7EdXGgaPMPfpePNGRzxBu4LP2dNEUO9h1Sh37MR1PxOoaemPwlgTDo/1G8dX1JjSppNoaTHhkzk2w4yutNhP7o8cq3ZBbT3TNMTKb2H3fUMc7A==",
                          "url": "https://dev.dl.voucherify.io/api/v1/assets/barcode/U2FsdGVkX1%2FFWUg0RbOU7R7Zqg7%2F8Ba6oYuXrmIl7EdXGgaPMPfpePNGRzxBu4LP2dNEUO9h1Sh37MR1PxOoaemPwlgTDo%2F1G8dX1JjSppNoaTHhkzk2w4yutNhP7o8cq3ZBbT3TNMTKb2H3fUMc7A%3D%3D"
                        }
                      },
                      "is_referral_code": false,
                      "created_at": "2022-02-17T09:12:01.428Z",
                      "updated_at": null,
                      "redemption": {
                        "quantity": null,
                        "redeemed_quantity": 0,
                        "redeemed_points": 0,
                        "object": "list",
                        "url": "/v1/vouchers/welcomeloyalty/redemptions?page=1&limit=10"
                      },
                      "publish": {
                        "object": "list",
                        "count": 0,
                        "url": "/v1/vouchers/welcomeloyalty/publications?page=1&limit=10"
                      },
                      "object": "voucher"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/vouchers/": {
      "post": {
        "summary": "Create Voucher",
        "operationId": "post-vouchers",
        "responses": {
          "200": {
            "description": "Returns a voucher object if the call succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/1_obj_voucher_object"
                },
                "examples": {
                  "example-1-Response-Percentage-Discount": {
                    "value": {
                      "id": "v_YJYfeKoR0XAGIvaM7k51wTbDjU4WIpC5",
                      "code": "NEW-WELCOME-COUPON",
                      "campaign": "Bug fix",
                      "campaign_id": "camp_Y6dLsYIZloGqP8izufXY6SSJ",
                      "category": "New Customers",
                      "type": "DISCOUNT_VOUCHER",
                      "discount": {
                        "type": "PERCENT",
                        "percent_off": 10,
                        "effect": "APPLY_TO_ORDER"
                      },
                      "gift": null,
                      "loyalty_card": null,
                      "start_date": "2016-01-01T00:00:00.000Z",
                      "expiration_date": "2022-12-31T23:59:59.000Z",
                      "validity_timeframe": {
                        "interval": "P2D",
                        "duration": "PT1H"
                      },
                      "validity_day_of_week": [
                        1,
                        2,
                        3,
                        4,
                        5
                      ],
                      "active": false,
                      "additional_info": "This voucher will remain inactive until enabled.",
                      "metadata": {
                        "test": true,
                        "locale": "de-en"
                      },
                      "assets": {
                        "qr": {
                          "id": "U2FsdGVkX180g6GhUA0kT47tHGvZ5thjCgY5nbsPtiecixkkEznFVg2v3SDG9dpCbXR6BSUdM/d78Wm/zru1ybT4+AQ2X0JnEy86N7TZ/aoezZORjcBRUfyVM/scUUF/vmD4Ezn+Elp2+V9AFcAXN/WthaRMl9e7xvEeIEQ5nao=",
                          "url": "https://dev.dl.voucherify.io/api/v1/assets/qr/U2FsdGVkX180g6GhUA0kT47tHGvZ5thjCgY5nbsPtiecixkkEznFVg2v3SDG9dpCbXR6BSUdM%2Fd78Wm%2Fzru1ybT4%2BAQ2X0JnEy86N7TZ%2FaoezZORjcBRUfyVM%2FscUUF%2FvmD4Ezn%2BElp2%2BV9AFcAXN%2FWthaRMl9e7xvEeIEQ5nao%3D"
                        },
                        "barcode": {
                          "id": "U2FsdGVkX1/AynivxYCEIxfTnf3A1lO0xsNihOlbUMo6Y6873LQ2qpmkk90aUFnaFKd7pVumcirRweblzGVSxy24Phhd174VSPaLxxmSKp0FPv0dRos/XWBg8zu0Kta0pA/yvFK3WWGlNoPPPnvEhVWKKzOr09Gj94SMrr+TGlI=",
                          "url": "https://dev.dl.voucherify.io/api/v1/assets/barcode/U2FsdGVkX1%2FAynivxYCEIxfTnf3A1lO0xsNihOlbUMo6Y6873LQ2qpmkk90aUFnaFKd7pVumcirRweblzGVSxy24Phhd174VSPaLxxmSKp0FPv0dRos%2FXWBg8zu0Kta0pA%2FyvFK3WWGlNoPPPnvEhVWKKzOr09Gj94SMrr%2BTGlI%3D"
                        }
                      },
                      "is_referral_code": false,
                      "created_at": "2022-02-17T07:14:40.096Z",
                      "updated_at": null,
                      "validation_rules_assignments": {
                        "object": "list",
                        "data_ref": "data",
                        "data": [
                          {
                            "id": "asgm_COu5PJAsWmAwuCqR",
                            "rule_id": "val_4j7DCRm2IS59",
                            "related_object_id": "v_YJYfeKoR0XAGIvaM7k51wTbDjU4WIpC5",
                            "related_object_type": "voucher",
                            "created_at": "2022-02-17T07:14:40.280Z",
                            "object": "validation_rules_assignment"
                          }
                        ],
                        "total": 1
                      },
                      "redemption": {
                        "quantity": 10,
                        "redeemed_quantity": 0,
                        "object": "list",
                        "url": "/v1/vouchers/NEW-WELCOME-COUPON/redemptions?page=1&limit=10"
                      },
                      "publish": {
                        "object": "list",
                        "count": 0,
                        "url": "/v1/vouchers/NEW-WELCOME-COUPON/publications?page=1&limit=10"
                      },
                      "object": "voucher"
                    }
                  },
                  "example-2-Response-Gift-Voucher": {
                    "value": {
                      "id": "v_yAZyBimXtF9yQ2C5BEF9WMhNzOMJNfz6",
                      "code": "New-GIFT-CARD-8tqB6FcyhE0",
                      "campaign": null,
                      "campaign_id": null,
                      "category": "New Customers",
                      "type": "GIFT_VOUCHER",
                      "discount": null,
                      "gift": {
                        "amount": 10000,
                        "balance": 10000,
                        "effect": "APPLY_TO_ORDER"
                      },
                      "loyalty_card": null,
                      "start_date": "2022-01-01T00:00:00.000Z",
                      "expiration_date": null,
                      "validity_timeframe": null,
                      "validity_day_of_week": null,
                      "active": true,
                      "additional_info": "This gift card is enabled immediately upon creation.",
                      "metadata": {
                        "test": true,
                        "locale": "de-en"
                      },
                      "assets": {
                        "qr": {
                          "id": "U2FsdGVkX1+pm0q3U4i/KrjResuZpwDigEa5WcDOlwYS/bj3rsesZXDpJF5MNHMUsKqy0+wn5tY3QbjPGv0dwbqRn/OjrIRgNlP99azD0n0n9C/chiTABp8BxlJmMKKFo5AggBbQu4+Mw8Cv8V3+0Ga7ETzeehS+Yrj6c+3ioxg=",
                          "url": "https://dev.dl.voucherify.io/api/v1/assets/qr/U2FsdGVkX1%2Bpm0q3U4i%2FKrjResuZpwDigEa5WcDOlwYS%2Fbj3rsesZXDpJF5MNHMUsKqy0%2Bwn5tY3QbjPGv0dwbqRn%2FOjrIRgNlP99azD0n0n9C%2FchiTABp8BxlJmMKKFo5AggBbQu4%2BMw8Cv8V3%2B0Ga7ETzeehS%2BYrj6c%2B3ioxg%3D"
                        },
                        "barcode": {
                          "id": "U2FsdGVkX1/UaGX0zV8oXbpYah2G76V1ljYSy6hDSnWAZhpz5v10vRibGaOJUahyLcClMyxAsUhU9WXWi4BUGWIEEu510AxzxyGHOTDTjavJH0Q79PI0ciLHdujNFOgLOXWe9Ffwzj+Kvjmbhb22/SVZd/xzQlUBJcv7XboJYU0=",
                          "url": "https://dev.dl.voucherify.io/api/v1/assets/barcode/U2FsdGVkX1%2FUaGX0zV8oXbpYah2G76V1ljYSy6hDSnWAZhpz5v10vRibGaOJUahyLcClMyxAsUhU9WXWi4BUGWIEEu510AxzxyGHOTDTjavJH0Q79PI0ciLHdujNFOgLOXWe9Ffwzj%2BKvjmbhb22%2FSVZd%2FxzQlUBJcv7XboJYU0%3D"
                        }
                      },
                      "is_referral_code": false,
                      "created_at": "2022-02-17T07:49:10.834Z",
                      "updated_at": null,
                      "redemption": {
                        "quantity": null,
                        "redeemed_quantity": 0,
                        "redeemed_amount": 0,
                        "object": "list",
                        "url": "/v1/vouchers/New-GIFT-CARD-8tqB6FcyhE0/redemptions?page=1&limit=10"
                      },
                      "publish": {
                        "object": "list",
                        "count": 0,
                        "url": "/v1/vouchers/New-GIFT-CARD-8tqB6FcyhE0/publications?page=1&limit=10"
                      },
                      "object": "voucher"
                    }
                  },
                  "example-3-Response-Loyalty-Card": {
                    "value": {
                      "id": "v_tVkcOhjHCz9W7q8QnuJnTGPBR2hdaYrC",
                      "code": "New-LOYALTY-CARD-UC1",
                      "campaign": "Loyalty Campaign",
                      "campaign_id": "camp_E87CubZLZ8eoQt3c4kAEZsx0",
                      "category": "New Customers",
                      "type": "LOYALTY_CARD",
                      "discount": null,
                      "gift": null,
                      "loyalty_card": {
                        "points": 10000,
                        "balance": 10000
                      },
                      "start_date": null,
                      "expiration_date": null,
                      "validity_timeframe": null,
                      "validity_day_of_week": null,
                      "active": true,
                      "additional_info": "This loyalty card is enabled immediately upon creation.",
                      "metadata": {
                        "test": true,
                        "locale": "de-en"
                      },
                      "assets": {
                        "qr": {
                          "id": "U2FsdGVkX1+6lGBFlqtS9OoY2wbAsoSupV43qa+g5sGu+R0IDTq2k85LIfbKfV9sDSYv80pP9ucsazJ6qGI9ineqQyhv9VVHdsJ2qGRiuZzpw/vRkSA0a7J9N1MpANgzqpIULZHLjYtrCQ/2el72nZ6Hpr2NkWtk19JTpNwB8tk=",
                          "url": "https://dev.dl.voucherify.io/api/v1/assets/qr/U2FsdGVkX1%2B6lGBFlqtS9OoY2wbAsoSupV43qa%2Bg5sGu%2BR0IDTq2k85LIfbKfV9sDSYv80pP9ucsazJ6qGI9ineqQyhv9VVHdsJ2qGRiuZzpw%2FvRkSA0a7J9N1MpANgzqpIULZHLjYtrCQ%2F2el72nZ6Hpr2NkWtk19JTpNwB8tk%3D"
                        },
                        "barcode": {
                          "id": "U2FsdGVkX180bvJVsyZvpAqwYXTnm4MvvH4Rur+ZhM+Mbmnva/fgYUcUbOttsFXPY/PMZ9Xi8pomVp26a7amIPguNimD8w4PMZLMavMtH7EtJ4k+0V0Wp7JUkudIKeRw2fDnQ3/0cgqvK6PMReUwFWb5nUT3ABpZDAdaOVoMDhE=",
                          "url": "https://dev.dl.voucherify.io/api/v1/assets/barcode/U2FsdGVkX180bvJVsyZvpAqwYXTnm4MvvH4Rur%2BZhM%2BMbmnva%2FfgYUcUbOttsFXPY%2FPMZ9Xi8pomVp26a7amIPguNimD8w4PMZLMavMtH7EtJ4k%2B0V0Wp7JUkudIKeRw2fDnQ3%2F0cgqvK6PMReUwFWb5nUT3ABpZDAdaOVoMDhE%3D"
                        }
                      },
                      "is_referral_code": false,
                      "created_at": "2022-02-17T08:06:41.091Z",
                      "updated_at": null,
                      "redemption": {
                        "quantity": null,
                        "redeemed_quantity": 0,
                        "redeemed_points": 0,
                        "object": "list",
                        "url": "/v1/vouchers/New-LOYALTY-CARD-UC1/redemptions?page=1&limit=10"
                      },
                      "publish": {
                        "object": "list",
                        "count": 0,
                        "url": "/v1/vouchers/New-LOYALTY-CARD-UC1/publications?page=1&limit=10"
                      },
                      "object": "voucher"
                    }
                  },
                  "example-4-Response-Unit-Discount-Multiple-Items": {
                    "value": {
                      "id": "v_cu8nyozvTDA413H17bH5BLha0cjxt7s8",
                      "code": "MultipleUnitTypesUnitDiscount",
                      "campaign": null,
                      "campaign_id": null,
                      "category": "New Customers",
                      "type": "DISCOUNT_VOUCHER",
                      "discount": {
                        "type": "UNIT",
                        "effect": "ADD_MANY_ITEMS",
                        "units": [
                          {
                            "unit_off": 1,
                            "unit_type": "prod_0a9f9ab4ab019a42d5",
                            "effect": "ADD_NEW_ITEMS"
                          },
                          {
                            "unit_off": 1,
                            "unit_type": "prod_0a9f9aeddb019a42db",
                            "effect": "ADD_MISSING_ITEMS"
                          }
                        ]
                      },
                      "gift": null,
                      "loyalty_card": null,
                      "start_date": "2020-01-01T00:00:00.000Z",
                      "expiration_date": "2022-12-31T23:59:59.000Z",
                      "validity_timeframe": {
                        "interval": "P2D",
                        "duration": "PT1H"
                      },
                      "validity_day_of_week": [
                        1,
                        2,
                        3,
                        4,
                        5
                      ],
                      "active": false,
                      "additional_info": "This voucher will remain inactive until enabled.",
                      "metadata": {
                        "test": true,
                        "locale": "de-en"
                      },
                      "assets": {
                        "qr": {
                          "id": "U2FsdGVkX1+ocJBtZ9NqT97gZ/QTfOz54TAoRoKO3tnCYBtHZWMghEHT0b2aFrPSL1lqMyf6fYy6DH2/DkH5p5Vd8dOozW1LV6wPVatWpa1lZMeMIB0OcARCW3q+3QydoW2KdliLKyksFwumH9C7Fsnj6HTaEbUjSttTZE/be+o=",
                          "url": "https://dev.dl.voucherify.io/api/v1/assets/qr/U2FsdGVkX1%2BocJBtZ9NqT97gZ%2FQTfOz54TAoRoKO3tnCYBtHZWMghEHT0b2aFrPSL1lqMyf6fYy6DH2%2FDkH5p5Vd8dOozW1LV6wPVatWpa1lZMeMIB0OcARCW3q%2B3QydoW2KdliLKyksFwumH9C7Fsnj6HTaEbUjSttTZE%2Fbe%2Bo%3D"
                        },
                        "barcode": {
                          "id": "U2FsdGVkX1+Sly3IYj3EbZFHGGNxV6Ns4j76O8d0kRQe3WriJz5qY6s4GBIwlsdy13AciaQuiVt232HlOlZ4TzGaSSk3+ZMldwBGaTp/fIN9SGBW/NVUtfDOI2sIDLZCBBrdK7WVvtCQQ+1Y+6qClYg/QurJExCFRkDeKpKjDug=",
                          "url": "https://dev.dl.voucherify.io/api/v1/assets/barcode/U2FsdGVkX1%2BSly3IYj3EbZFHGGNxV6Ns4j76O8d0kRQe3WriJz5qY6s4GBIwlsdy13AciaQuiVt232HlOlZ4TzGaSSk3%2BZMldwBGaTp%2FfIN9SGBW%2FNVUtfDOI2sIDLZCBBrdK7WVvtCQQ%2B1Y%2B6qClYg%2FQurJExCFRkDeKpKjDug%3D"
                        }
                      },
                      "is_referral_code": false,
                      "created_at": "2022-02-18T06:27:45.619Z",
                      "updated_at": null,
                      "redemption": {
                        "quantity": 5,
                        "redeemed_quantity": 0,
                        "object": "list",
                        "url": "/v1/vouchers/MultipleUnitTypesUnitDiscount/redemptions?page=1&limit=10"
                      },
                      "publish": {
                        "object": "list",
                        "count": 0,
                        "url": "/v1/vouchers/MultipleUnitTypesUnitDiscount/publications?page=1&limit=10"
                      },
                      "object": "voucher"
                    }
                  },
                  "example-5-Response-Unit-Discount-Single-Item": {
                    "value": {
                      "id": "v_NQdraO4fXWYvMMWYL9OY22hRernr553n",
                      "code": "AddMissingItemDiscount",
                      "campaign": null,
                      "campaign_id": null,
                      "category": "New Customers",
                      "type": "DISCOUNT_VOUCHER",
                      "discount": {
                        "type": "UNIT",
                        "unit_off": 1,
                        "unit_type": "prod_0a9f9ab4ab019a42d5",
                        "effect": "ADD_MISSING_ITEMS"
                      },
                      "gift": null,
                      "loyalty_card": null,
                      "start_date": "2020-01-01T00:00:00.000Z",
                      "expiration_date": "2022-12-31T23:59:59.000Z",
                      "validity_timeframe": null,
                      "validity_day_of_week": null,
                      "active": false,
                      "additional_info": "This voucher will remain inactive until enabled.",
                      "metadata": {},
                      "assets": {
                        "qr": {
                          "id": "U2FsdGVkX19Yh7LTNyOVKSXQ+ceTr023saElWAUeucwOgjTH50x1SoSF/PP1aoGBr6sSxHZNZOvBGumWNHjsF85y7cPY7La/4a0d1kWqnAiBWeWnGOgDFeQFqthGswypFOK1jdAzUPqLSbxW3O6q936N6Bsmoz4QHYE//kfWFhs=",
                          "url": "https://dev.dl.voucherify.io/api/v1/assets/qr/U2FsdGVkX19Yh7LTNyOVKSXQ%2BceTr023saElWAUeucwOgjTH50x1SoSF%2FPP1aoGBr6sSxHZNZOvBGumWNHjsF85y7cPY7La%2F4a0d1kWqnAiBWeWnGOgDFeQFqthGswypFOK1jdAzUPqLSbxW3O6q936N6Bsmoz4QHYE%2F%2FkfWFhs%3D"
                        },
                        "barcode": {
                          "id": "U2FsdGVkX1+RqzgyYsIJzAEBxmQt1OZLu4+PSUDQBldDKK1o5XsEoBSQEMPWHis1wJSg4ZNqJ9ZdJ0Ukc+K6X1fjg0ggDsCdXP2ZxpyGPD8/1ReggJZ/tq823ji7A5pzhG1TljA6+vmISuHvs2wkcum0djN9AWuAlB0F/vbXexo=",
                          "url": "https://dev.dl.voucherify.io/api/v1/assets/barcode/U2FsdGVkX1%2BRqzgyYsIJzAEBxmQt1OZLu4%2BPSUDQBldDKK1o5XsEoBSQEMPWHis1wJSg4ZNqJ9ZdJ0Ukc%2BK6X1fjg0ggDsCdXP2ZxpyGPD8%2F1ReggJZ%2Ftq823ji7A5pzhG1TljA6%2BvmISuHvs2wkcum0djN9AWuAlB0F%2FvbXexo%3D"
                        }
                      },
                      "is_referral_code": false,
                      "created_at": "2022-02-18T06:46:44.536Z",
                      "updated_at": null,
                      "redemption": {
                        "quantity": 3,
                        "redeemed_quantity": 0,
                        "object": "list",
                        "url": "/v1/vouchers/AddMissingItemDiscount/redemptions?page=1&limit=10"
                      },
                      "publish": {
                        "object": "list",
                        "count": 0,
                        "url": "/v1/vouchers/AddMissingItemDiscount/publications?page=1&limit=10"
                      },
                      "object": "voucher"
                    }
                  }
                }
              }
            }
          }
        },
        "description": "Create a standalone voucher. You can choose to create a `GIFT_VOUCHER`, a `DISCOUNT_VOUCHER`, or a `LOYALTY_CARD`. \n\nWhen you create a new voucher, you can specify a type to create it.\nCreating a new voucher will create a new stand alone voucher if no `campaign` name or `campaign_id` is provided. In case of the loyalty card, a campaign name is required.\n\nYou can optionally use the `code` parameter to define a specific code or the `code_config` parameter to design rules for Voucherify API to create a random code. If neither of the two parameters are passed, then a random code is generated by the Voucherify API.\n\nThis method will return an error when trying to create a voucher that already exists.",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/1_req_vouchers__POST"
              },
              "examples": {
                "example-1-Create-Percentage-Discount": {
                  "value": {
                    "category": "New Customers",
                    "code": "NEW-WELCOME-COUPON",
                    "type": "DISCOUNT_VOUCHER",
                    "campaign_id": "camp_Y6dLsYIZloGqP8izufXY6SSJ",
                    "discount": {
                      "percent_off": 10,
                      "type": "PERCENT",
                      "effect": "APPLY_TO_ORDER"
                    },
                    "start_date": "2016-01-01T00:00:00Z",
                    "expiration_date": "2022-12-31T23:59:59Z",
                    "validity_timeframe": {
                      "duration": "PT1H",
                      "interval": "P2D"
                    },
                    "validity_day_of_week": [
                      1,
                      2,
                      3,
                      4,
                      5
                    ],
                    "active": false,
                    "additional_info": "This voucher will remain inactive until enabled.",
                    "redemption": {
                      "quantity": 10
                    },
                    "metadata": {
                      "test": true,
                      "locale": "de-en"
                    },
                    "validation_rules": [
                      "val_4j7DCRm2IS59"
                    ]
                  }
                },
                "example-2-Create-Gift-Card": {
                  "value": {
                    "category": "New Customers",
                    "type": "GIFT_VOUCHER",
                    "gift": {
                      "amount": 10000,
                      "effect": "APPLY_TO_ORDER"
                    },
                    "start_date": "2022-01-01T00:00:00Z",
                    "active": true,
                    "additional_info": "This gift card is enabled immediately upon creation.",
                    "metadata": {
                      "test": true,
                      "locale": "de-en"
                    },
                    "code_config": {
                      "pattern": "GIFT-CARD-##########",
                      "prefix": "New-",
                      "postfix": "0",
                      "charset": "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
                    }
                  }
                },
                "example-3-Create-Loyalty-Card": {
                  "value": {
                    "category": "New Customers",
                    "campaign": "camp_E87CubZLZ8eoQt3c4kAEZsx0",
                    "type": "LOYALTY_CARD",
                    "loyalty_card": {
                      "points": 10000
                    },
                    "additional_info": "This loyalty card is enabled immediately upon creation.",
                    "metadata": {
                      "test": true,
                      "locale": "de-en"
                    },
                    "code_config": {
                      "pattern": "LOYALTY-CARD-##",
                      "prefix": "New-",
                      "postfix": "1",
                      "charset": "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
                    }
                  }
                },
                "example-4-Create-Unit-Discount-Multiple-Items": {
                  "value": {
                    "category": "New Customers",
                    "code": "MultipleUnitTypesUnitDiscount",
                    "type": "DISCOUNT_VOUCHER",
                    "discount": {
                      "type": "UNIT",
                      "effect": "ADD_MANY_ITEMS",
                      "units": [
                        {
                          "unit_off": 1,
                          "unit_type": "prod_0a9f9ab4ab019a42d5",
                          "effect": "ADD_NEW_ITEMS"
                        },
                        {
                          "unit_off": 1,
                          "unit_type": "prod_0a9f9aeddb019a42db",
                          "effect": "ADD_MISSING_ITEMS"
                        }
                      ]
                    },
                    "start_date": "2020-01-01T00:00:00Z",
                    "expiration_date": "2022-12-31T23:59:59Z",
                    "validity_timeframe": {
                      "duration": "PT1H",
                      "interval": "P2D"
                    },
                    "validity_day_of_week": [
                      1,
                      2,
                      3,
                      4,
                      5
                    ],
                    "active": false,
                    "additional_info": "This voucher will remain inactive until enabled.",
                    "redemption": {
                      "quantity": 5
                    },
                    "metadata": {
                      "test": true,
                      "locale": "de-en"
                    }
                  }
                },
                "example-5-Create-Unit-Discount-Single-Item": {
                  "value": {
                    "category": "New Customers",
                    "code": "AddMissingItemDiscount",
                    "type": "DISCOUNT_VOUCHER",
                    "discount": {
                      "type": "UNIT",
                      "unit_off": 1,
                      "unit_type": "prod_0a9f9ab4ab019a42d5",
                      "effect": "ADD_MISSING_ITEMS"
                    },
                    "start_date": "2020-01-01T00:00:00Z",
                    "expiration_date": "2022-12-31T23:59:59Z",
                    "active": false,
                    "additional_info": "This voucher will remain inactive until enabled.",
                    "redemption": {
                      "quantity": 3
                    }
                  }
                }
              }
            }
          },
          "description": "Specify the details of the voucher that you would like to create."
        },
        "tags": [
          "VOUCHERS API"
        ]
      }
    },
    "/vouchers": {
      "get": {
        "summary": "List Vouchers",
        "tags": [
          "VOUCHERS API"
        ],
        "operationId": "get-vouchers",
        "description": "Returns a list of your vouchers. The vouchers are returned sorted by creation date, with the most recent vouchers appearing first.\n\nWhen you get a list of vouchers, you can optionally specify query parameters to customize the amount of vouchers returned per call using `limit`, which page of vouchers to return using `page`, sort the vouchers using the `order` query parameter and more.\n\nThis method will return an error when trying to return a limit of more than 100 vouchers.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/category"
          },
          {
            "in": "query",
            "name": "campaign_id",
            "description": "Limit search results to vouchers within the specified campaign",
            "schema": {
              "type": "string",
              "example": "camp_Pfja7X91b1GoyH5wnpzCwlP3"
            }
          },
          {
            "$ref": "#/components/parameters/customer"
          },
          {
            "$ref": "#/components/parameters/campaign"
          },
          {
            "$ref": "#/components/parameters/created_at"
          },
          {
            "$ref": "#/components/parameters/created_at[after]"
          },
          {
            "$ref": "#/components/parameters/created_at[before]"
          },
          {
            "$ref": "#/components/parameters/updated_at"
          },
          {
            "$ref": "#/components/parameters/updated_at[after]"
          },
          {
            "$ref": "#/components/parameters/updated_at[before]"
          },
          {
            "$ref": "#/components/parameters/order"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a dictionary that contains an array of vouchers. Each entry in the array is a separate voucher object. If no more vouchers are available (query parameter `page` incremented over and above the voucher count), the resulting array will be empty. The result can be narrowed down according to specified (or default) filters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/1_res_vouchers_GET"
                }
              }
            }
          }
        }
      }
    },
    "/vouchers/{code}/enable": {
      "parameters": [
        {
          "$ref": "#/components/parameters/code"
        }
      ],
      "post": {
        "summary": "Enable Voucher",
        "tags": [
          "VOUCHERS API"
        ],
        "operationId": "post-vouchers-code-enable",
        "description": "There are various times when you'll want to manage a voucher's accessibility. This can be done by two API methods for managing the voucher state - *enable* and *disable*.  \n___\nSets voucher state to **active**. The voucher can be redeemed - only if the redemption occurs after the start date and the voucher is not expired.",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a voucher object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/1_obj_voucher_object"
                }
              }
            }
          },
          "404": {
            "description": "Not Found. If the voucher code does not exist, this call returns an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/e_404_not_found"
                },
                "examples": {
                  "example-1-Not-Found": {
                    "value": {
                      "code": 404,
                      "key": "not_found",
                      "message": "Resource not found",
                      "details": "Cannot find voucher with id IrKORhS",
                      "request_id": "v-0a96cd820301c0483a",
                      "resource_id": "IrKORhS",
                      "resource_type": "voucher"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/vouchers/{code}/disable": {
      "parameters": [
        {
          "$ref": "#/components/parameters/code"
        }
      ],
      "post": {
        "summary": "Disable Voucher",
        "tags": [
          "VOUCHERS API"
        ],
        "operationId": "post-vouchers-code-disable",
        "description": "There are various times when you'll want to manage a voucher's accessibility. This can be done by two API methods for managing the voucher state - *enable* and *disable*.  \n___\nSets voucher state to **inactive**. The voucher cannot be redeemed.",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns a voucher object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/1_obj_voucher_object"
                }
              }
            }
          },
          "404": {
            "description": "Not Found. If the voucher code does not exist, this call returns an error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/e_404_not_found"
                },
                "examples": {
                  "example-1-Not-Found": {
                    "value": {
                      "code": 404,
                      "key": "not_found",
                      "message": "Resource not found",
                      "details": "Cannot find voucher with id IrKORhS",
                      "request_id": "v-0a96cd820301c0483a",
                      "resource_id": "IrKORhS",
                      "resource_type": "voucher"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/vouchers/{code}/balance": {
      "parameters": [
        {
          "$ref": "#/components/parameters/code"
        }
      ],
      "post": {
        "summary": "Add Gift Card Balance",
        "tags": [
          "VOUCHERS API"
        ],
        "operationId": "post-vouchers-code-balance",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ],
        "description": "Add balance to an existing gift card.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/1_req_vouchers_code_balance"
              },
              "examples": {
                "example-1": {
                  "value": {
                    "amount": 10000
                  }
                }
              }
            }
          },
          "required": true,
          "description": "Provide the amount to be added to the gift card."
        },
        "responses": {
          "200": {
            "description": "Returns a balance object if the operation succeeded.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/1_res_vouchers_code_balance"
                },
                "examples": {
                  "example-1-Balance": {
                    "value": {
                      "amount": 10000,
                      "total": 20100,
                      "balance": 20100,
                      "type": "gift_voucher",
                      "object": "balance",
                      "related_object": {
                        "type": "voucher",
                        "id": "v_4Bd3aX7eXjHbe7Ef7on8YsLWBynsT4jq"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found. A common source of error is an invalid type of voucher, or non-existent code.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/e_404_not_found"
                },
                "examples": {
                  "example-1-Not-Found": {
                    "value": {
                      "code": 404,
                      "key": "not_found",
                      "message": "Resource not found",
                      "details": "Cannot find voucher with id IrKORhS",
                      "request_id": "v-0a96cd820301c0483a",
                      "resource_id": "IrKORhS",
                      "resource_type": "voucher"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/vouchers/import": {
      "post": {
        "summary": "Import Vouchers",
        "tags": [
          "VOUCHERS API"
        ],
        "operationId": "post-vouchers-import",
        "description": "Import standalone vouchers and gift cards into the repository.\n\n<!-- theme: info -->\n\n> #### Important notes\n>\n> - Start and expiration dates need to be provided in compliance with the ISO 8601 norms. For example, 2020-03-11T09:00:00.000Z.\n> - Custom code attributes (not supported by-default) need to be added as code metadata.\n> - You cannot import the same codes to a single Voucherify Project.\n\nAny parameters not provided in the payload will be left blank or null.\n\nFor both standalone discount vouchers and gift cards, you can import the following fields:  \n\n- `code`\n- `category`\n- `active`\n- `type`\n- `start_date`\n- `expiration_date`\n- `redemption` &rarr; `quantity`\n- `additional_info`\n- `metadata`\n\nFor gift cards, you can import the following field:\n\n- `gift` &rarr; `amount`\n\nFor discount vouchers, you can import the `discount` field; the object will slightly vary depending on the type of discount. Each discount type **requires** the `type` to be defined in the import.\n\n- `discount` &darr;\n  - Amount type &rarr; `amount_off`, `effect`\n  - Percent type &rarr; `percent_off`, `effect`\n  - Fixed type &rarr; `fixed_amount`, `effect`\n  - Unit type &darr; \n    - One item &rarr; `unit_off`, `unit_type`, `effect`\n    - Multiple item types &rarr; `unit_off`, `unit_type`, `effect`\n  - Shipping type &rarr; `unit_off`, `unit_type`, `effect`\n\nFields other than the ones listed above won't be imported. Even if provided, they will be silently skipped.",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/1_req_vouchers_import"
              },
              "examples": {
                "example-1-Array-Of-Vouchers": {
                  "value": [
                    {
                      "code": "PROMO-CODE30OFF-NO-EFFECT",
                      "category": "new customer acquisition",
                      "type": "DISCOUNT_VOUCHER",
                      "active": true,
                      "discount": {
                        "amount_off": 3000,
                        "type": "AMOUNT"
                      },
                      "start_date": "2020-12-01T23:00:00Z",
                      "expiration_date": "2023-12-19T23:00:00Z",
                      "redemption": {
                        "quantity": 1
                      },
                      "metadata": {
                        "unit": "EUR"
                      },
                      "additional_info": "secret-code1"
                    },
                    {
                      "code": "PROMO-CODE30-PERCENT-NO-EFFECT",
                      "type": "DISCOUNT_VOUCHER",
                      "active": false,
                      "discount": {
                        "percent_off": 30,
                        "type": "PERCENT"
                      },
                      "start_date": "2020-12-10T23:00:00Z",
                      "expiration_date": "2023-12-31T23:00:00Z",
                      "redemption": {
                        "quantity": 1
                      },
                      "metadata": {
                        "unit": "EUR"
                      },
                      "additional_info": "secret-code2"
                    },
                    {
                      "code": "GIFT-CARD-100",
                      "type": "GIFT_VOUCHER",
                      "active": true,
                      "category": "new customer acquisition",
                      "gift": {
                        "amount": 10000
                      },
                      "start_date": "2020-12-10T23:00:00Z",
                      "expiration_date": "2023-12-31T23:00:00Z",
                      "redemption": {
                        "quantity": 5
                      },
                      "metadata": {
                        "unit": "EUR"
                      },
                      "additional_info": "secret-GIFT-code2"
                    },
                    {
                      "code": "PROMO-CODE1-PERCENT-EFFECT-ORDER",
                      "type": "DISCOUNT_VOUCHER",
                      "active": false,
                      "discount": {
                        "percent_off": 30,
                        "type": "PERCENT",
                        "effect": "APPLY_TO_ORDER"
                      },
                      "start_date": "2020-12-10T23:00:00Z",
                      "expiration_date": "2023-12-31T23:00:00Z",
                      "redemption": {
                        "quantity": 1
                      },
                      "metadata": {
                        "unit": "EUR"
                      },
                      "additional_info": "secret-code2"
                    },
                    {
                      "code": "PROMO-CODE2-PERCENT-EFFECT-ITEM",
                      "type": "DISCOUNT_VOUCHER",
                      "active": false,
                      "discount": {
                        "percent_off": 30,
                        "type": "PERCENT",
                        "effect": "APPLY_TO_ITEMS"
                      },
                      "start_date": "2020-12-10T23:00:00Z",
                      "expiration_date": "2023-12-31T23:00:00Z",
                      "redemption": {
                        "quantity": 1
                      },
                      "metadata": {
                        "unit": "EUR"
                      },
                      "additional_info": "secret-code2"
                    },
                    {
                      "code": "PROMO-CODE1-PERCENT-NO-EFFECT-REDEEMED-QUANTITY-ATTRIBUTE-DOESNT-GET-PASSED",
                      "type": "DISCOUNT_VOUCHER",
                      "active": false,
                      "discount": {
                        "percent_off": 30,
                        "type": "PERCENT"
                      },
                      "start_date": "2020-12-10T23:00:00Z",
                      "expiration_date": "2023-12-31T23:00:00Z",
                      "redemption": {
                        "quantity": 1,
                        "redeemed_quantity": 1
                      },
                      "metadata": {
                        "unit": "EUR"
                      },
                      "additional_info": "secret-code2"
                    },
                    {
                      "code": "PROMO-CODE1-AMOUNT-EFFECT-ITEMS-PROPORTIONALLY",
                      "type": "DISCOUNT_VOUCHER",
                      "active": false,
                      "discount": {
                        "amount_off": 30,
                        "type": "AMOUNT",
                        "effect": "APPLY_TO_ITEMS_PROPORTIONALLY"
                      },
                      "start_date": "2020-12-10T23:00:00Z",
                      "expiration_date": "2023-12-31T23:00:00Z",
                      "redemption": {
                        "quantity": 1
                      },
                      "metadata": {
                        "unit": "EUR"
                      },
                      "additional_info": "secret-code2"
                    },
                    {
                      "code": "PROMO-CODE1-FIXED-EFFECT-ORDER",
                      "type": "DISCOUNT_VOUCHER",
                      "active": false,
                      "discount": {
                        "fixed_amount": 30,
                        "type": "FIXED",
                        "effect": "APPLY_TO_ORDER"
                      },
                      "start_date": "2020-12-10T23:00:00Z",
                      "expiration_date": "2023-12-31T23:00:00Z",
                      "redemption": {
                        "quantity": 1
                      },
                      "metadata": {
                        "unit": "EUR"
                      },
                      "additional_info": "secret-code2"
                    },
                    {
                      "code": "PROMO-CODE1-UNIT-SINGLE-ITEM-EFFECT-MISSING",
                      "type": "DISCOUNT_VOUCHER",
                      "active": false,
                      "discount": {
                        "unit_off": 1,
                        "unit_type": "prod_0a9f9aeddb019a42db",
                        "type": "UNIT",
                        "effect": "ADD_MISSING_ITEMS"
                      },
                      "start_date": "2020-12-10T23:00:00Z",
                      "expiration_date": "2023-12-31T23:00:00Z",
                      "redemption": {
                        "quantity": 1
                      },
                      "metadata": {
                        "unit": "EUR"
                      },
                      "additional_info": "secret-code2"
                    },
                    {
                      "code": "PROMO-CODE2-UNIT-MULTIPLE-ITEMS",
                      "type": "DISCOUNT_VOUCHER",
                      "active": true,
                      "discount": {
                        "type": "UNIT",
                        "effect": "ADD_MANY_ITEMS",
                        "units": [
                          {
                            "unit_off": 1,
                            "unit_type": "prod_0a9f9aeddb019a42db",
                            "effect": "ADD_MISSING_ITEMS"
                          },
                          {
                            "unit_off": 1,
                            "unit_type": "prod_0a9f9aeddb019a42db",
                            "effect": "ADD_NEW_ITEMS"
                          }
                        ]
                      },
                      "start_date": "2020-12-10T23:00:00Z",
                      "expiration_date": "2023-12-31T23:00:00Z",
                      "redemption": {
                        "quantity": 1
                      },
                      "metadata": {
                        "unit": "EUR"
                      },
                      "additional_info": "secret-code2"
                    },
                    {
                      "code": "PROMO-CODE1-SHIPPING",
                      "type": "DISCOUNT_VOUCHER",
                      "active": false,
                      "discount": {
                        "type": "UNIT",
                        "unit_off": 1,
                        "unit_type": "prod_5h1pp1ng",
                        "effect": "ADD_MISSING_ITEMS"
                      },
                      "start_date": "2020-12-10T23:00:00Z",
                      "expiration_date": "2023-12-31T23:00:00Z",
                      "redemption": {
                        "quantity": 1
                      },
                      "metadata": {
                        "unit": "EUR"
                      },
                      "additional_info": "secret-code2"
                    }
                  ]
                }
              }
            }
          },
          "required": true,
          "description": "The request body is an array of objects. Each object contains details about a specific voucher. "
        },
        "responses": {
          "202": {
            "description": "Returns id of scheduled async action. The response informs you that your request has been accepted and vouchers will be added to the repository asynchronously. To check the import status and result, copy the `async_action_id` from the response and pass it using the Get Async Action endpoint.[hyperlink to Get async action endpoint].",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/1_res_vouchers_import"
                },
                "examples": {
                  "example-1-Async-Action-Id": {
                    "value": {
                      "async_action_id": "aa_0aac93c6af84485df3"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/vouchers/importCSV": {
      "post": {
        "summary": "Import Vouchers using CSV",
        "tags": [
          "VOUCHERS API"
        ],
        "operationId": "post-vouchers-importCSV",
        "description": "Import standalone vouchers into the repository using a CSV file.\n\nThe CSV file has to include headers in the first line. All properties listed in the file headers that cannot be mapped to standard voucher fields will be added to the metadata object.\n\nYou can find an example CSV file [here](https://support.voucherify.io/article/45-import-codes-and-share-them-digitally#coupons).\n___\nCurl Example\n<!--\ntitle: \"Example Request\"\nlineNumbers: true\n-->\n```cURL\ncurl -X POST \\\n  https://api.voucherify.io/v1/vouchers/importCSV \\\n  -F file=@/path/to/vouchers.csv \\\n  -H \"X-App-Id: c70a6f00-cf91-4756-9df5-47628850002b\" \\\n  -H \"X-App-Token: 3266b9f8-e246-4f79-bdf0-833929b1380c\"\n```\n\n<!-- theme: info -->\n\n> #### Standard voucher fields mapping\n>\n> Go to the [import vouchers](OpenAPI.json/paths/~1vouchers~1import) to see all standard CSV fields description(section body params).\n> - Supported CSV file headers: Code,Voucher Type,Value,Discount Type,Category,Start Date,Expiration Date,Redemption Limit,Active,Additional Info,Spotlight\n>- Start and expiration dates need to be provided in compliance with the ISO 8601 norms. For example, 2020-03-11T09:00:00.000Z.\n> - Custom code attributes (not supported by-default) need to be added as code metadata.\n> - You cannot import the same codes to a single Voucherify Project.\n\n<!-- theme: info -->\n\n> #### Standard voucher fields mapping\n>\n> In the structure representing your data, you can define a category that the voucher belongs to. You can later use the category of a voucher to group and search by specific criteria.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/1_req_vouchers_importCSV"
              }
            }
          },
          "description": "The file path is stored in the form `file` header."
        },
        "responses": {
          "200": {
            "description": "Returns id of scheduled async action. The response informs you that your request has been accepted and vouchers will be added to the repository asynchronously. To check the import status and result, copy the `async_action_id` from the response and pass it using the Get Async Action endpoint.[hyperlink to Get async action endpoint].",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/1_res_vouchers_import"
                }
              }
            }
          }
        }
      }
    },
    "/vouchers/qualification": {
      "post": {
        "summary": "Examine Qualification",
        "tags": [
          "VOUCHERS API"
        ],
        "operationId": "post-vouchers-qualification",
        "description": "Display vouchers qualified to the given customer and context (e.g., order, [loyalty reward]double check this). Checks up to 50 **standalone vouchers**. \n\n__How does this endpoint work?__ \n\n A property's value that does not meet a validation rule requirement will disqualify that particular voucher and it will not be listed in the results.\n\nAs a sample use case, you can imagine a requirement of displaying coupons available for the customer below the shopping cart. The customer can choose and apply the proposed voucher.\n\n__What's excluded?__\n\n The verification logic won't run against coupons from bulk unique code campaigns. For campaigns with multiple unique codes, you should run a [dedicated function]\"hyperlink when create this endpoint in openapi create-qualification-request\" for searching and identifying qualified campaigns.\n\n<!-- theme: info -->\n\n> #### Query parameters let you sort and filter the returned vouchers\n>\n> Customize your response:\n> - If you only care about verifying a customer, use `audienceRulesOnly` set to `true`. \n>- If you want to limit the number of vouchers to be returned from the entire pool of eligible vouchers, set a `limit`. This will return vouchers sorted by `-created_at`, by default beginning with the most recent vouchers listed at the top.\n> - If you have a preference on the sorting order of the returned vouchers, you can use `order` to customize your response.\n __Prevailing assumption__: data is synced with Voucherify.\n\n_Aside:_ You have the option of sending customer data via the dedicated `customer` object in the request body or a nested `customer` object within the `order` object.\n #### Quick Guide on sending request body payload\n<!--\ntype: tab\n\ntitle: Customer\n-->\n\n #### Available options:\n\n - You can either pass a customer `id` (Voucherify system generated),\n\n - a `source_id` (your own unique internal customer identifier e.g., email, database ID, CRM id), \n\n - a combination of the remaining parameters in the customer object, \n\n - a combination of customer `id` and remaining parameters excluding `source_id`, or\n\n - a combination of `source_id` and remaining parameters excluding `id`\n\n #### Note:\n\n For the latter two options, if you pass the `source_id` or the `id` with the other parameters, the logic will run independently for parameters explicitly passed in the request body versus those not explicitly passed in the request body. For _parameters not explicitly listed in the payload_, the verification will be against the data stored for that customer in the system. On the otherhand, for any _parameter values explicitly passed in the payload_, the logic will ignore those stored in the system and will use the new values provided in the qualification request body. \n\n The qualification runs against rules that are defined through the [Create Validation Rules](https://docs.voucherify.io/reference/create-validation-rules) endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Audience_ &rarr; _Customer segment_ or _Basic Builder_ &rarr; _Customer Activity_. [Read more](https://support.voucherify.io/article/148-how-to-build-a-rule). \n\n<!--\ntype: tab\ntitle: Order\n-->\n\n  #### Available options:\n\n - You can either pass an order `id` (Voucherify system generated),\n\n - a `source_id` (your own unique internal order identifier), \n\n - a combination of the remaining parameters in the order object, \n\n - a combination of order `id` and remaining parameters excluding `source_id`, or\n\n - a combination of `source_id` and remaining parameters excluding `id`\n\n #### Note:\n\n For the latter two options, if you pass the `source_id` or the `id` with the other parameters, the logic will run independently for parameters explicitly passed in the request body versus those not explicitly passed in the request body. For _parameters not explicitly listed in the payload_, the verification will be against the data stored for that order in the system. On the otherhand, for any _parameter values explicitly passed in the payload_, the logic will ignore those stored in the system and will use the new values provided in the qualification request body. \n\n The qualification runs against rules that are defined through the [Create Validation Rules](https://docs.voucherify.io/reference/create-validation-rules) endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Order structure/Order volume_ or _Basic Builder_ &rarr; _Order_. [Read more](https://support.voucherify.io/article/148-how-to-build-a-rule).\n\n __Guidelines:__ \n\nTo validate against vouchers with total order `amount` requirements, make sure to include the total order `amount` in the order object or alternatively the `amount` for _every_ order item (the application will then add each amount to get the total and perform the qualification checks). If the total order `amount` is provided along with the individual items' amounts, the total order `amount` will take precedence.\n\n<!-- title: Payload configuration -->\n| **Case** | **Order-Level Parameter Included** | **Item-Level Parameter Included** | **Precedence** | **Calculation Result** | **Parameter included in payload accounts for checks against requirements in these validation rules** |\n|:---:|:---:|:---:|:---:|---|---|\n| **1** | `amount` | `amount` | Order-level | Uses order-level `amount` | - Total order amount |\n| **2** |  | `amount` | Item-level | Sums each item-level `amount` | - Total order amount  <br>- subtotal of matched items |\n| **3** |  | `price`<br>`quantity` | Item-level | Multiplies each item's (`price` x `quantity`) to get item `amount` and then adds each item's `amount` to get total order `amount`  | - Total order amount<br>- Subtotal of matched items<br>- Unit price of any matching order line<br>- Price of each item/Price of any item |\n| **4** |  | `amount`  <br>`price`    <br>`quantity` | Item-level `amount` | Uses item-level `amount` for  total order `amount` calculation, ignores (`price` x `quantity`) calculation | - Total order amount (uses item `amount` if provided or `price` x `quantity` for items without `amount` property; `amount` takes precedence in case all 3 properties are provided for an item)<br>- Subtotal of matched items (uses item `amount`, takes precedence if all 3 properties are provided)<br>- Unit price of any matching order line<br>- Price of each item/Price of any item |\n| **5** | `amount` | `amount`  <br>`price`  <br>`quantity` | Order-level  | Uses order-level `amount` for total order `amount` | - Total order amount (uses order-level `amount`). <br>- Subtotal of matched items (see case **4** for details). <br>- Unit price of any matching order line  <br>- Price of each item/Price of any item |\n  \n\n<!--\ntype: tab\ntitle: Reward\n-->\n\nNeed to figure out what the proper format is and what is this object validated against. Also is the is referral reward or is this a loyalty reward.\n\n<!--\ntype: tab\ntitle: Gift\n-->\n\nNot supported? Can't you also verify if you can use a particular gift card.\n\n<!--\ntype: tab\ntitle: Metadata\n-->\n\nYou can send **redemption** metadata in the payload to return vouchers that meet requirements set by validation rules on redemption metadata.\n\n The qualification runs against rules that are defined through the [Create Validation Rules](https://docs.voucherify.io/reference/create-validation-rules) endpoint or via the Dashboard; in the _Advanced Rule Builder_ &rarr; _Advanced_ &rarr; _Redemption metadata satisfy_ or _Basic Builder_ &rarr; _Attributes match_ &rarr; _REDEMPTION METADATA_. [Read more](https://support.voucherify.io/article/148-how-to-build-a-rule).\n\n<!-- type: tab-end -->",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          },
          {
            "$ref": "#/components/parameters/audienceRulesOnly"
          },
          {
            "schema": {
              "type": "integer",
              "maximum": 50
            },
            "in": "query",
            "name": "limit",
            "description": "The number of vouchers to be qualified."
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "created_at",
                "-created_at",
                "updated_at",
                "-updated_at",
                "type",
                "-type",
                "code",
                "-code",
                "category",
                "-category"
              ]
            },
            "in": "query",
            "name": "order",
            "description": "Sorts the results using one of the filtering options, where the dash `-` means sorting in a descending order."
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/1_req_vouchers_qualification"
              },
              "examples": {
                "example-1-Qualify-product-using-product_id": {
                  "value": {
                    "customer": {
                      "id": "cust_J1CDUdbqn5Exva8ASWk1Fq0j",
                      "source_id": "firstname.lastname@mycompany.com",
                      "name": "FirstName LastName",
                      "email": "firstname.lastname@mycompany.com",
                      "phone": "string",
                      "address": {
                        "city": "New York",
                        "country": "United States of America",
                        "postal_code": "10001",
                        "state": "NY"
                      },
                      "metadata": {},
                      "birthdate": "YYYY-MM-DD"
                    },
                    "order": {
                      "id": "ord_gqj1QYW2j2A1E3Ula2YjdPf4",
                      "source_id": "string",
                      "amount": 10000,
                      "items": [
                        {
                          "source_id": "product_1234",
                          "product_id": "prod_0a9f9aeddb019a42db",
                          "amount": 10000,
                          "quantity": 1,
                          "price": 10000,
                          "metadata": {},
                          "related_object": "product",
                          "product": {
                            "source_id": "product_1234",
                            "name": "Phone",
                            "price": 10000,
                            "metadata": {}
                          }
                        }
                      ],
                      "customer": {
                        "id": "cust_J1CDUdbqn5Exva8ASWk1Fq0j",
                        "source_id": "firstname.lastname@mycompany.com",
                        "name": "FirstName LastName",
                        "email": "firstname.lastname@mycompany.com",
                        "phone": "string",
                        "address": {
                          "city": "New York",
                          "country": "United States of America",
                          "postal_code": "10001",
                          "state": "NY"
                        },
                        "metadata": {},
                        "birthdate": "YYYY-MM-DD"
                      },
                      "referrer": {},
                      "metadata": "string"
                    },
                    "reward": {
                      "points": 0,
                      "assignment_id": "string",
                      "id": "string"
                    },
                    "metadata": {}
                  }
                },
                "example-2-Qualify-product-using-source_id": {
                  "value": {
                    "customer": {
                      "id": "cust_J1CDUdbqn5Exva8ASWk1Fq0j",
                      "source_id": "firstname.lastname@mycompany.com",
                      "name": "FirstName LastName",
                      "email": "firstname.lastname@mycompany.com",
                      "phone": "string",
                      "address": {
                        "city": "New York",
                        "country": "United States of America",
                        "postal_code": "10001",
                        "state": "NY"
                      },
                      "metadata": {},
                      "birthdate": "YYYY-MM-DD"
                    },
                    "order": {
                      "id": "ord_gqj1QYW2j2A1E3Ula2YjdPf4",
                      "source_id": "string",
                      "amount": 10000,
                      "items": [
                        {
                          "source_id": "product_1234",
                          "product_id": "prod_0a9f9aeddb019a42db",
                          "amount": 10000,
                          "quantity": 1,
                          "price": 10000,
                          "metadata": {},
                          "related_object": "product",
                          "product": {
                            "source_id": "product_1234",
                            "name": "Phone",
                            "price": 10000,
                            "metadata": {}
                          }
                        }
                      ],
                      "customer": {
                        "id": "cust_J1CDUdbqn5Exva8ASWk1Fq0j",
                        "source_id": "firstname.lastname@mycompany.com",
                        "name": "FirstName LastName",
                        "email": "firstname.lastname@mycompany.com",
                        "phone": "string",
                        "address": {
                          "city": "New York",
                          "country": "United States of America",
                          "postal_code": "10001",
                          "state": "NY"
                        },
                        "metadata": {},
                        "birthdate": "YYYY-MM-DD"
                      },
                      "referrer": {},
                      "metadata": "string"
                    },
                    "reward": {
                      "points": 0,
                      "assignment_id": "string",
                      "id": "string"
                    },
                    "metadata": {}
                  }
                },
                "example-3-Qualify-SKU-using-sku_id": {
                  "value": {
                    "customer": {
                      "id": "cust_J1CDUdbqn5Exva8ASWk1Fq0j",
                      "source_id": "firstname.lastname@mycompany.com",
                      "name": "FirstName LastName",
                      "email": "firstname.lastname@mycompany.com",
                      "phone": "string",
                      "address": {
                        "city": "New York",
                        "country": "United States of America",
                        "postal_code": "10001",
                        "state": "NY"
                      },
                      "metadata": {},
                      "birthdate": "YYYY-MM-DD"
                    },
                    "order": {
                      "id": "ord_gqj1QYW2j2A1E3Ula2YjdPf4",
                      "source_id": "string",
                      "amount": 10000,
                      "items": [
                        {
                          "source_id": "product_1234",
                          "product_id": "prod_0a9f9aeddb019a42db",
                          "amount": 10000,
                          "quantity": 1,
                          "price": 10000,
                          "metadata": {},
                          "related_object": "product",
                          "product": {
                            "source_id": "product_1234",
                            "name": "Phone",
                            "price": 10000,
                            "metadata": {}
                          }
                        }
                      ],
                      "customer": {
                        "id": "cust_J1CDUdbqn5Exva8ASWk1Fq0j",
                        "source_id": "firstname.lastname@mycompany.com",
                        "name": "FirstName LastName",
                        "email": "firstname.lastname@mycompany.com",
                        "phone": "string",
                        "address": {
                          "city": "New York",
                          "country": "United States of America",
                          "postal_code": "10001",
                          "state": "NY"
                        },
                        "metadata": {},
                        "birthdate": "YYYY-MM-DD"
                      },
                      "referrer": {},
                      "metadata": "string"
                    },
                    "reward": {
                      "points": 0,
                      "assignment_id": "string",
                      "id": "string"
                    },
                    "metadata": {}
                  }
                },
                "example-4-Qualify-SKU-using-source_id": {
                  "value": {
                    "customer": {
                      "id": "cust_J1CDUdbqn5Exva8ASWk1Fq0j",
                      "source_id": "firstname.lastname@mycompany.com",
                      "name": "FirstName LastName",
                      "email": "firstname.lastname@mycompany.com",
                      "phone": "string",
                      "address": {
                        "city": "New York",
                        "country": "United States of America",
                        "postal_code": "10001",
                        "state": "NY"
                      },
                      "metadata": {},
                      "birthdate": "YYYY-MM-DD"
                    },
                    "order": {
                      "id": "ord_gqj1QYW2j2A1E3Ula2YjdPf4",
                      "source_id": "string",
                      "amount": 10000,
                      "items": [
                        {
                          "source_id": "product_1234",
                          "product_id": "prod_0a9f9aeddb019a42db",
                          "amount": 10000,
                          "quantity": 1,
                          "price": 10000,
                          "metadata": {},
                          "related_object": "product",
                          "product": {
                            "source_id": "product_1234",
                            "name": "Phone",
                            "price": 10000,
                            "metadata": {}
                          }
                        }
                      ],
                      "customer": {
                        "id": "cust_J1CDUdbqn5Exva8ASWk1Fq0j",
                        "source_id": "firstname.lastname@mycompany.com",
                        "name": "FirstName LastName",
                        "email": "firstname.lastname@mycompany.com",
                        "phone": "string",
                        "address": {
                          "city": "New York",
                          "country": "United States of America",
                          "postal_code": "10001",
                          "state": "NY"
                        },
                        "metadata": {},
                        "birthdate": "YYYY-MM-DD"
                      },
                      "referrer": {},
                      "metadata": "string"
                    },
                    "reward": {
                      "points": 0,
                      "assignment_id": "string",
                      "id": "string"
                    },
                    "metadata": {}
                  }
                },
                "example-5-Qualify-redemption-metadata": {
                  "value": {
                    "customer": {
                      "id": "cust_J1CDUdbqn5Exva8ASWk1Fq0j",
                      "source_id": "firstname.lastname@mycompany.com",
                      "name": "FirstName LastName",
                      "email": "firstname.lastname@mycompany.com",
                      "phone": "string",
                      "address": {
                        "city": "New York",
                        "country": "United States of America",
                        "postal_code": "10001",
                        "state": "NY"
                      },
                      "metadata": {},
                      "birthdate": "YYYY-MM-DD"
                    },
                    "order": {
                      "id": "ord_gqj1QYW2j2A1E3Ula2YjdPf4",
                      "source_id": "string",
                      "amount": 10000,
                      "items": [
                        {
                          "source_id": "product_1234",
                          "product_id": "prod_0a9f9aeddb019a42db",
                          "amount": 10000,
                          "quantity": 1,
                          "price": 10000,
                          "metadata": {},
                          "related_object": "product",
                          "product": {
                            "source_id": "product_1234",
                            "name": "Phone",
                            "price": 10000,
                            "metadata": {}
                          }
                        }
                      ],
                      "customer": {
                        "id": "cust_J1CDUdbqn5Exva8ASWk1Fq0j",
                        "source_id": "firstname.lastname@mycompany.com",
                        "name": "FirstName LastName",
                        "email": "firstname.lastname@mycompany.com",
                        "phone": "string",
                        "address": {
                          "city": "New York",
                          "country": "United States of America",
                          "postal_code": "10001",
                          "state": "NY"
                        },
                        "metadata": {},
                        "birthdate": "YYYY-MM-DD"
                      },
                      "referrer": {},
                      "metadata": "string"
                    },
                    "reward": {
                      "points": 0,
                      "assignment_id": "string",
                      "id": "string"
                    },
                    "metadata": {}
                  }
                },
                "example-6-Qualify-order-line-item-metadata": {
                  "value": {
                    "customer": {
                      "id": "cust_J1CDUdbqn5Exva8ASWk1Fq0j",
                      "source_id": "firstname.lastname@mycompany.com",
                      "name": "FirstName LastName",
                      "email": "firstname.lastname@mycompany.com",
                      "phone": "string",
                      "address": {
                        "city": "New York",
                        "country": "United States of America",
                        "postal_code": "10001",
                        "state": "NY"
                      },
                      "metadata": {},
                      "birthdate": "YYYY-MM-DD"
                    },
                    "order": {
                      "id": "ord_gqj1QYW2j2A1E3Ula2YjdPf4",
                      "source_id": "string",
                      "amount": 10000,
                      "items": [
                        {
                          "source_id": "product_1234",
                          "product_id": "prod_0a9f9aeddb019a42db",
                          "amount": 10000,
                          "quantity": 1,
                          "price": 10000,
                          "metadata": {},
                          "related_object": "product",
                          "product": {
                            "source_id": "product_1234",
                            "name": "Phone",
                            "price": 10000,
                            "metadata": {}
                          }
                        }
                      ],
                      "customer": {
                        "id": "cust_J1CDUdbqn5Exva8ASWk1Fq0j",
                        "source_id": "firstname.lastname@mycompany.com",
                        "name": "FirstName LastName",
                        "email": "firstname.lastname@mycompany.com",
                        "phone": "string",
                        "address": {
                          "city": "New York",
                          "country": "United States of America",
                          "postal_code": "10001",
                          "state": "NY"
                        },
                        "metadata": {},
                        "birthdate": "YYYY-MM-DD"
                      },
                      "referrer": {},
                      "metadata": "string"
                    },
                    "reward": {
                      "points": 0,
                      "assignment_id": "string",
                      "id": "string"
                    },
                    "metadata": {}
                  }
                }
              }
            }
          },
          "required": true,
          "description": "Should contain given customer and context such as an order."
        },
        "responses": {
          "200": {
            "description": "This operation returns the list of valid and active vouchers based on the qualification of given context (e.g., customer profile, redemptions metadata, order).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/1_res_vouchers_qualification"
                }
              }
            }
          }
        }
      }
    },
    "/vouchers/bulk/async": {
      "post": {
        "summary": "Update Vouchers in bulk",
        "tags": [
          "VOUCHERS API"
        ],
        "operationId": "post-vouchers-bulk-async",
        "description": "Use this endpoint to update specific metadata parameters for each code, respectively.  \nYou can update each code's metadata property separately.\n\n\nUpdate up to **100 records** in one request.\nUpserts are not supported.  \n\n**NOTE:** Currently only **metadata** updates are supported.",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/1_req_vouchers_bulk_async"
              },
              "examples": {
                "example-1-Update-Metadata": {
                  "value": [
                    {
                      "code": "example_code",
                      "metadata": {
                        "lang": "en",
                        "test": false,
                        "MetadataTest": "Update metadata",
                        "update_value": 1,
                        "next_update_date": "2022-11-11T09:00:00.000Z"
                      }
                    },
                    {
                      "code": "example_code2",
                      "metadata": {
                        "lang": "pl",
                        "test": false,
                        "MetadataTest": "Update metadata",
                        "update_value": 2
                      }
                    }
                  ]
                }
              }
            }
          },
          "required": true,
          "description": "List of objects, each containing a code that is being updated and the metadata key/value pairs for that code."
        },
        "responses": {
          "202": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/1_res_vouchers_bulk_async"
                },
                "examples": {
                  "example-1-Update-Metadata": {
                    "value": {
                      "async_action_id": "aa_0ab2df092385be5ca5"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/vouchers/metadata/async": {
      "post": {
        "summary": "Update Vouchers' metadata in bulk",
        "tags": [
          "VOUCHERS API"
        ],
        "operationId": "post-vouchers-metadata-async",
        "description": "Use this endpoint to update the same metadata parameters for a list of codes.   \nUpdate up to **100 records** in one request. Upserts are not supported. ",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ],
        "responses": {
          "202": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/1_res_async_actions"
                },
                "examples": {
                  "example-1-Update-Same-Metadata-Parameters-Bulk": {
                    "value": {
                      "async_action_id": "aa_0a875d56c805df6601"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "default",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/e_400_invalid_payload"
                    },
                    {
                      "$ref": "#/components/schemas/e_400_not_enough_codes"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "key"
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/1_req_vouchers_metadata_async"
              },
              "examples": {
                "example-1-Update-Same-Metadata-Parameters-Bulk": {
                  "value": {
                    "codes": [
                      "PROMO-CODE810",
                      "PROMO-CODE726"
                    ],
                    "metadata": {
                      "lang": "en",
                      "authorized_internally": true
                    }
                  }
                }
              }
            }
          },
          "required": true,
          "description": "Request to update vouchers metadata in bulk. Provide an array of voucher codes in the `codes` parameter along with the `metadata` object. The `metadata` object should contain the key value pairs that you would like to update for all the vouchers included in the `codes` parameter."
        }
      }
    },
    "/vouchers/{code}/sessions/{session_key}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/code"
        },
        {
          "$ref": "#/components/parameters/session_key"
        }
      ],
      "delete": {
        "summary": "Release Validation Session",
        "tags": [
          "VOUCHERS API"
        ],
        "operationId": "delete-vouchers-code-sessions-session_key",
        "description": "Manually release a validation session that has been set up for the voucher.",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ]
      }
    },
    "/loyalties/{campaignId}/earning-rules": {
      "parameters": [
        {
          "$ref": "#/components/parameters/campaignId"
        }
      ],
      "post": {
        "summary": "Create Earning Rules",
        "tags": [
          "LOYALTIES API"
        ],
        "operationId": "post-loyalties-campaignId-earning-rules",
        "description": "Create earning rules for a loyalty campaign.",
        "responses": {
          "200": {
            "description": "Returns an array of earning rule objects.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/obj_earning_rule_object"
                },
                "examples": {
                  "example-1": {
                    "value": [
                      {
                        "id": "ern_IXHyK6CDgfrG1Fr79Bh7PFKd",
                        "created_at": "2022-02-07T12:05:40.149Z",
                        "updated_at": null,
                        "loyalty": {
                          "points": 1000,
                          "type": "FIXED"
                        },
                        "event": "order.paid",
                        "source": {
                          "banner": "Order paid 1000 points",
                          "object_id": "camp_Pfja7X91b1GoyH5wnpzCwlP3",
                          "object_type": "campaign"
                        },
                        "active": true,
                        "start_date": "2022-02-02T13:00:00.000Z",
                        "expiration_date": "2022-03-03T14:30:00.000Z",
                        "validity_timeframe": {
                          "duration": "PT1H",
                          "interval": "P1D"
                        },
                        "validity_day_of_week": [
                          4
                        ],
                        "object": "earning_rule",
                        "automation_id": "auto_axpvVsodCE2Yi0RZIeH2KsJA"
                      },
                      {
                        "id": "ern_hSlULe1KZhqn7v4bBhOMLAaD",
                        "created_at": "2022-02-07T12:05:40.149Z",
                        "updated_at": null,
                        "loyalty": {
                          "type": "PROPORTIONAL",
                          "order": {
                            "amount": {
                              "every": 1,
                              "points": 1
                            }
                          }
                        },
                        "event": "order.paid",
                        "source": {
                          "banner": "Order paid 1 point for 1 dollar.",
                          "object_id": "camp_Pfja7X91b1GoyH5wnpzCwlP3",
                          "object_type": "campaign"
                        },
                        "active": true,
                        "start_date": "2022-02-02T13:00:00.000Z",
                        "expiration_date": "2022-03-03T14:30:00.000Z",
                        "validity_timeframe": {
                          "duration": "PT1H",
                          "interval": "P1D"
                        },
                        "validity_day_of_week": [
                          1,
                          2,
                          3,
                          4,
                          5
                        ],
                        "object": "earning_rule",
                        "automation_id": "auto_91DDzufPFsvAz5wUeHlMjgBe"
                      },
                      {
                        "id": "ern_G1k25SkjhVh7KawNHFbweGEw",
                        "created_at": "2022-02-07T12:05:40.149Z",
                        "updated_at": null,
                        "loyalty": {
                          "points": 1000,
                          "type": "FIXED"
                        },
                        "segment": {
                          "id": "seg_WJv55MbzQwnr56ttJ2xUrSgt"
                        },
                        "event": "customer.segment.entered",
                        "source": {
                          "banner": "Entered segment 100 points.",
                          "object_id": "camp_Pfja7X91b1GoyH5wnpzCwlP3",
                          "object_type": "campaign"
                        },
                        "active": true,
                        "start_date": "2022-02-02T13:00:00.000Z",
                        "expiration_date": "2022-03-03T14:30:00.000Z",
                        "validity_timeframe": {
                          "duration": "PT1H",
                          "interval": "P1D"
                        },
                        "validity_day_of_week": [
                          1,
                          2,
                          3,
                          4,
                          5
                        ],
                        "object": "earning_rule",
                        "automation_id": "auto_y2WLEn0AsjvVN8ZoNk2Jq2Cj"
                      },
                      {
                        "id": "ern_vMtOopc25BJruc0oP90A5NEC",
                        "created_at": "2022-02-07T12:05:40.149Z",
                        "updated_at": null,
                        "loyalty": {
                          "points": 1000,
                          "type": "FIXED"
                        },
                        "custom_event": {
                          "schema_id": "ms_fi47Dcu5T0m3v3nT5ch3ma"
                        },
                        "event": "payment_placed",
                        "source": {
                          "banner": "Entered segment 100 points.",
                          "object_id": "camp_Pfja7X91b1GoyH5wnpzCwlP3",
                          "object_type": "campaign"
                        },
                        "active": true,
                        "start_date": "2022-02-02T13:00:00.000Z",
                        "expiration_date": "2022-03-03T14:30:00.000Z",
                        "validity_timeframe": {
                          "duration": "PT1H",
                          "interval": "P1D"
                        },
                        "validity_day_of_week": [
                          1,
                          2,
                          3,
                          4,
                          5
                        ],
                        "object": "earning_rule",
                        "automation_id": "auto_lRiGaYlBwsH9o1PczVHIRDoO"
                      },
                      {
                        "id": "ern_0NZaprRK1xeaxVB76CeCEuik",
                        "created_at": "2022-02-07T12:05:40.149Z",
                        "updated_at": null,
                        "loyalty": {
                          "points": 1000,
                          "type": "FIXED"
                        },
                        "custom_event": {
                          "schema_id": "ms_fi47Dcu5T0m3v3nT5ch3ma"
                        },
                        "event": "payment_placed",
                        "source": {
                          "banner": "Entered segment 100 points.",
                          "object_id": "camp_Pfja7X91b1GoyH5wnpzCwlP3",
                          "object_type": "campaign"
                        },
                        "active": true,
                        "validity_day_of_week": [
                          1,
                          2,
                          3,
                          4,
                          5
                        ],
                        "object": "earning_rule",
                        "automation_id": "auto_Y6ivqDUl7dmYPjW9eWGHcCGI"
                      }
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "default",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/e_400_missing_param"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/req_loyalties_campaignId_earning-rules"
              },
              "examples": {
                "example-1": {
                  "value": [
                    {
                      "event": "order.paid",
                      "validation_rule_id": "val_248vs7tUjlIE",
                      "loyalty": {
                        "points": 1000,
                        "type": "FIXED"
                      },
                      "source": {
                        "banner": "Order Paid - You will get 100 points"
                      },
                      "active": true,
                      "start_date": "2022-02-02T13:00:00.000Z",
                      "expiration_date": "2022-03-03T14:30:00.000Z",
                      "validity_timeframe": {
                        "duration": "PT1H",
                        "interval": "P2D"
                      },
                      "validity_day_of_week": [
                        "[ 1, 2 ]"
                      ],
                      "custom_event": null,
                      "segment": null
                    }
                  ]
                },
                "example-2": {
                  "value": [
                    {
                      "event": "order.paid",
                      "validation_rule_id": null,
                      "loyalty": {
                        "points": 1000,
                        "type": "FIXED"
                      },
                      "source": {
                        "banner": "Order paid 1000 points"
                      },
                      "active": true,
                      "start_date": "2022-02-02T13:00:00.000Z",
                      "expiration_date": "2022-03-03T14:30:00.000Z",
                      "validity_timeframe": {
                        "duration": "PT1H",
                        "interval": "P1D"
                      },
                      "validity_day_of_week": [
                        4
                      ],
                      "segment": null,
                      "custom_event": null
                    },
                    {
                      "event": "order.paid",
                      "validation_rule_id": null,
                      "loyalty": {
                        "type": "PROPORTIONAL",
                        "order": {
                          "amount": {
                            "every": 1,
                            "points": 1
                          }
                        }
                      },
                      "source": {
                        "banner": "Order paid 1 point for 1 dollar."
                      },
                      "active": true,
                      "start_date": "2022-02-02T13:00:00.000Z",
                      "expiration_date": "2022-03-03T14:30:00.000Z",
                      "validity_timeframe": {
                        "duration": "PT1H",
                        "interval": "P1D"
                      },
                      "validity_day_of_week": [
                        1,
                        2,
                        3,
                        4,
                        5
                      ],
                      "custom_event": null
                    },
                    {
                      "event": "customer.segment.entered",
                      "validation_rule_id": null,
                      "loyalty": {
                        "points": 1000,
                        "type": "FIXED"
                      },
                      "source": {
                        "banner": "Entered segment 100 points."
                      },
                      "active": true,
                      "start_date": "2022-02-02T13:00:00.000Z",
                      "expiration_date": "2022-03-03T14:30:00.000Z",
                      "validity_timeframe": {
                        "duration": "PT1H",
                        "interval": "P1D"
                      },
                      "validity_day_of_week": [
                        1,
                        2,
                        3,
                        4,
                        5
                      ],
                      "segment": {
                        "id": "seg_WJv55MbzQwnr56ttJ2xUrSgt"
                      },
                      "custom_event": null
                    },
                    {
                      "event": "payment_placed",
                      "validation_rule_id": null,
                      "loyalty": {
                        "points": 1000,
                        "type": "FIXED"
                      },
                      "source": {
                        "banner": "Entered segment 100 points."
                      },
                      "active": true,
                      "start_date": "2022-02-02T13:00:00.000Z",
                      "expiration_date": "2022-03-03T14:30:00.000Z",
                      "validity_timeframe": {
                        "duration": "PT1H",
                        "interval": "P1D"
                      },
                      "validity_day_of_week": [
                        1,
                        2,
                        3,
                        4,
                        5
                      ],
                      "custom_event": {
                        "schema_id": "ms_fi47Dcu5T0m3v3nT5ch3ma"
                      }
                    },
                    {
                      "event": "payment_placed",
                      "validation_rule_id": null,
                      "loyalty": {
                        "points": 1000,
                        "type": "FIXED"
                      },
                      "source": {
                        "banner": "Entered segment 100 points."
                      },
                      "active": true,
                      "start_date": null,
                      "expiration_date": null,
                      "validity_day_of_week": [
                        1,
                        2,
                        3,
                        4,
                        5
                      ],
                      "custom_event": {
                        "schema_id": "ms_fi47Dcu5T0m3v3nT5ch3ma"
                      }
                    }
                  ]
                }
              }
            }
          },
          "description": "Customize the request body based on the type of earning rules you would like to create. The request body is an array of objects. The required minimum properties to include in the payload for each object are `event` and `loyalty`. Additionally, if you choose to add a `validity_timeframe`, you must include a `start_date`. Furthermore, an earning rule `event` type:  \n\n- `customer.segment.entered` requires a `segment` object\n- a custom event requires a `custom_event` object"
        }
      }
    },
    "/campaigns": {
      "post": {
        "summary": "Create Campaign",
        "operationId": "post-campaigns",
        "responses": {
          "200": {
            "description": "Returns a campaign object if the call succeeded. The returned object will have information about the discount type and the discount amount."
          }
        },
        "tags": [
          "CAMPAIGNS API"
        ],
        "description": "Method to create a batch of vouchers aggregated in one campaign. You can choose a variety of voucher types and define a unique pattern for generating codes.  \n<!-- theme: info -->\n\n> #### Global uniqueness\n>\n> All campaign codes are unique across the whole project. Voucherify will not allow you to generate 2 campaigns with the same coupon code.  \n<!-- theme: warning -->\n> #### Code generation status\n>\n> This is an asynchronous action; you can't read or modify a newly created campaign until the code generation is completed. See the `creation_status` field in [the campaign object descriptionref:the-campaign-object].",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      },
      "get": {
        "summary": "List Campaigns",
        "operationId": "get-campaigns",
        "responses": {
          "200": {
            "description": "A dictionary with a data property that contains an array of campaigns. The maximum number of campaigns returned is determined by the `limit` query parameter. Each entry in the array is a separate campaign object. If no more campaigns are available, the resulting array on a given page will be empty."
          }
        },
        "tags": [
          "CAMPAIGNS API"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/campaign_type"
          }
        ],
        "description": "Returns a list of your campaigns. The campaigns are returned sorted by creation date, with the most recent campaigns appearing first.  \n\nWhen you get a list of campaignss, you can optionally specify query parameters to customize the amount of campaigns returned per call using `limit`, which page of campaigns to return using `page`, sort the campaigns using the `order` query parameter and filter by the `campaign_type`.\n\nThis method will return an error when trying to return a limit of more than XXX campaigns."
      }
    },
    "/campaigns/{campaign_id}": {
      "parameters": [
        {
          "in": "path",
          "name": "campaign_id",
          "description": "You can either pass the `campaign_id`, which was assigned by Voucherify, or the `name` of the campaign as the path parameter value, e.g., `Loyalty%20Campaign`. ",
          "schema": {
            "type": "string",
            "example": "camp_BcHeMm4QaKjqCWMQFecMp1U0"
          }
        }
      ],
      "get": {
        "summary": "Get Campaign",
        "tags": [
          "CAMPAIGNS API"
        ],
        "responses": {
          "200": {
            "description": "Returns a campaign object if a valid identifier was provided. When requesting the campaign that has been deleted, the resource will not be returned, including a 404 HTTP status code."
          }
        },
        "operationId": "get-campaigns-campaignId",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ],
        "description": "Retrieves the campaign with the given `campaign_id` or campaign `name`."
      },
      "put": {
        "summary": "Update Campaign",
        "operationId": "put-campaigns-campaign_id",
        "responses": {
          "200": {
            "description": "Returns the campaign object if the update succeeded. Returns an error if update parameters are invalid (e.g. specifying an invalid campaign type)."
          }
        },
        "description": "Updates the specified campaign by setting the values of the parameters passed in the request body. Any parameters not provided in the payload will be left unchanged. \n\nYou can modify the following fields:  \n\n- `start_date`\n- `expiration_date`\n- `metadata`\n- `description`\n- `type` \n\nFields other than the ones listed above won't be modified. Even if provided, they will be silently skipped.   \n<!-- theme: warning -->\n> #### Vouchers will be affected\n>\n> This method will update vouchers aggregated in the campaign. It will affect all vouchers that are not published or redeemed yet.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ],
        "tags": [
          "CAMPAIGNS API"
        ]
      },
      "delete": {
        "summary": "Delete Campaign",
        "operationId": "delete-campaigns-campaign_id",
        "responses": {
          "200": {
            "description": "Returns an `200` HTTP status code on success and an `async_action_id`. If the campaign does not exist, the API returns an error (`404` - resource not found). To check the status and result of the async action, call Get Async Action get-async-actions-1 endpoint."
          }
        },
        "description": "Permanently deletes a campaign and all related vouchers. It cannot be undone. Also, the method immediately removes any redemptions on the voucher.",
        "parameters": [
          {
            "schema": {
              "type": "boolean"
            },
            "in": "query",
            "description": "If this flag is set to true, the campaign and related vouchers will be removed permanently. It means that afterwards, the user will be able to create the next campaign with the same name.",
            "name": "force"
          },
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ],
        "tags": [
          "CAMPAIGNS API"
        ]
      }
    },
    "/campaigns/{campaign_id}/vouchers": {
      "parameters": [
        {
          "schema": {
            "type": "string",
            "example": "camp_BcHeMm4QaKjqCWMQFecMp1U0"
          },
          "name": "campaign_id",
          "in": "path",
          "required": true,
          "description": "The `campaign_id` or `name` of the campaign to which voucher(s) will be added. You can either pass the `campaign_id`, which was assigned by Voucherify, or the `name` of the campaign as the path parameter value, e.g., `Loyalty%20Campaign`. "
        }
      ],
      "post": {
        "summary": "Add Vouchers to Campaign",
        "operationId": "post-campaigns-campaign_id-vouchers",
        "responses": {
          "200": {
            "description": "Returns a voucher object if the call succeeded. The returned object will have information about discount type, and discount amount, and all other which you provided to overwrite the origin one from campaign definition."
          }
        },
        "tags": [
          "CAMPAIGNS API"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          },
          {
            "schema": {
              "type": "integer"
            },
            "in": "query",
            "name": "vouchers_count",
            "description": "Number of vouchers that should be added"
          }
        ],
        "description": "This method gives the possibility to push new vouchers to an existing campaign. New vouchers will inherit properties from the campaign profile. However, it is possible to overwrite some of them in the request body: `metadata`, `additional_info`, `redemption.quantity`, `category`, `code_config`. If you provide an optional `code_config` parameter with a voucher code configuration, then it will be used to generate new voucher codes. Otherwise, the voucher code configuration from the campaign will be used.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/campaigns/{campaign_id}/vouchers/{code}": {
      "parameters": [
        {
          "schema": {
            "type": "string",
            "example": "camp_BcHeMm4QaKjqCWMQFecMp1U0"
          },
          "name": "campaign_id",
          "in": "path",
          "required": true,
          "description": "The `campaign_id` or `name` of the campaign to which voucher will be added. You can either pass the `campaign_id`, which was assigned by Voucherify, or the `name` of the campaign as the path parameter value, e.g., `Loyalty%20Campaign`. "
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "code",
          "in": "path",
          "required": true,
          "description": "A custom **code** that identifies the voucher."
        }
      ],
      "post": {
        "summary": "Add Voucher with certain code to Campaign",
        "operationId": "post-campaigns-campaign_id-vouchers-code",
        "responses": {
          "200": {
            "description": "Returns a voucher object if the call succeeded. The returned object will have information about discount type, and discount amount, and all other which you provided to overwrite the origin one from campaign definition."
          }
        },
        "tags": [
          "CAMPAIGNS API"
        ],
        "description": "This method gives a possibility to push new vouchers to existing campaign. Voucher definition will be inherited from this one kept in campaign profile. However you are able to overwrite few properties inherited from campaign: `metadata`, `additional_info`, `redemption.quantity`, `category`.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          },
          "description": ""
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ]
      }
    },
    "/campaigns/{campaign_id}/import": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "campaign_id",
          "in": "path",
          "required": true,
          "description": "The ID of an existing campaign to which you're importing the codes."
        }
      ],
      "post": {
        "summary": "Import Vouchers to Campaign",
        "operationId": "post-campaigns-campaign_id-import",
        "responses": {
          "200": {
            "description": "Returns `202` HTTP status code on success and id of the scheduled asynchronous action. It informs that your request has been accepted and vouchers will be added to the repository asynchronously. To check the result and status, pass the async action id using Get Async Actionrefget-async-actions-1 endpoint.\n\nReturns `400` HTTP error status code when the request includes incorrect data e.g. wrong data type or duplicated codes."
          }
        },
        "tags": [
          "CAMPAIGNS API"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          },
          "description": "Discount type, expiration date and the remaining attributes will be taken from the Campaignrefthe-campaign-object settings."
        },
        "description": "Imports vouchers to an **existing** campaign."
      }
    },
    "/campaigns/{campaign_id}/importCSV": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "campaign_id",
          "in": "path",
          "required": true
        }
      ],
      "post": {
        "summary": "Import Vouchers to Campaign by CSV",
        "operationId": "post-campaigns-campaign_id-importCSV",
        "responses": {
          "200": {
            "description": "Returns `202` HTTP status code on success and id of scheduled async action . It informs that your request has been accepted and vouchers will be added to the repository asynchronously.  To check the result and status, pass the async action id using Get Async Actionget-async-actions-1 endpoint.\n\n\nReturns `400` HTTP error status code when the CSV file includes incorrect data e.g. wrong data type or duplicated codes."
          }
        },
        "tags": [
          "CAMPAIGNS API"
        ],
        "description": "Imports vouchers to an **existing** campaign.  \n\n\nThe CSV file has to include headers in the first line. \n\nCurl Example\n<!--\ntitle: \"Example Request\"\nlineNumbers: true\n-->\n```cURL\ncurl -X POST \\\n  https://api.voucherify.io/v1/campaigns/TEST-CAMPAIGN/importCSV \\\n  -F file=@/path/to/campaigns.csv \\\n  -H \"X-App-Id: c70a6f00-cf91-4756-9df5-47628850002b\" \\\n  -H \"X-App-Token: 3266b9f8-e246-4f79-bdf0-833929b1380c\"\n```\n\nYou can import values for the following fields: `Code` (required), `Category`, and `Active`. In gift cards import, you can also include the current card balance using the `Gift Amount` header. In loyalty cards import, you can also include the current loyalty card score in points using the `Loyalty Points` header. Other CSV columns will be mapped to metadata properties. \n\nGo to the description of Import Vouchers to Campaignrefimport-vouchers to see the detailed description of supported code attributes that you can include in CSV.\n\n\n\nDiscount type, time limits, and validation rules will be taken from the campaign objectrefthe-campaign-object settings. \n\n<!-- theme: info -->\n\n> #### Active\n>\n> The CSV file is allowed in two versions - either with or without `Active` column. It indicates if voucher is enabled after import event.  ",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ]
      }
    },
    "/campaigns/qualification": {
      "post": {
        "summary": "Examine Qualification",
        "operationId": "post-campaigns-qualification",
        "responses": {
          "200": {
            "description": "This operation returns the list of valid and active campaigns based on the qualification of given context (e.g., customer profile, redemptions metadata, order).\n\n[Read](https://docs.voucherify.io/docs/checking-eligibility-for-coupons) about Qualification API limits before you start."
          }
        },
        "tags": [
          "CAMPAIGNS API"
        ],
        "description": "The method can be used for sending a request to display all campaigns qualified to the given customer and context (e.g., order). The maximum number of returned campaigns is 50. A checking logic will be run only among campaigns and will ignore standalone vouchers. As a recommended subsequent step after selecting qualified campaign is to publish voucher code from that campaign. The API method for publishing will return a unique code which will belong to a given customer.\n\nAs a sample use case, you can imagine a requirement of displaying below cart the coupons (grouped in campaigns) eligible to a customer. The customer should get assigned to the particular voucher from the campaign and then might redeem that code when he places an order.\n\n[Read](https://docs.voucherify.io/docs/checking-eligibility-for-coupons) about Qualification API limits before you start.",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "audienceRulesOnly",
            "description": "This parameter set to true will ask only for verifying vouchers' validation rules only against conditions applied to audiences' attributes (belonging into segment and Customer metadata)"
          },
          {
            "schema": {
              "type": "integer",
              "maximum": 50
            },
            "in": "query",
            "name": "limit",
            "description": "The number of campaigns to be qualified."
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "created_at",
                "-created_at",
                "updated_at",
                "-updated_at",
                "type",
                "-type",
                "code",
                "-code",
                "category",
                "-category",
                "campaign",
                "-campaign"
              ]
            },
            "in": "query",
            "name": "order",
            "description": "Sorts the results using one of the filtering options, where the dash `-` means sorting in a descending order."
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/campaigns/{campaign_id}/disable": {
      "post": {
        "summary": "Disable Campaign",
        "operationId": "post-campaigns-disable",
        "responses": {
          "200": {
            "description": "Returns 200 HTTP status code on success and an empty json `{}`."
          },
          "": {
            "description": "Returns 200 HTTP status code on success. It informs that your request has been accepted and vouchers will be added to the repository asynchronously. To learn about operation status and result, copy the async action id from the API response and use Get Async Actionrefget-async-actions-1 endpoint."
          }
        },
        "tags": [
          "CAMPAIGNS API"
        ],
        "description": "There are various times when you'll want to manage a campaign's accessibility. This can be done by two API methods for managing the campaign state - *enable* and *disable*.  \n___  \nSets campaign state to **inactive**. The vouchers in this campaign can no longer be redeemed.",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ]
      },
      "parameters": [
        {
          "schema": {
            "type": "string",
            "example": "camp_BcHeMm4QaKjqCWMQFecMp1U0"
          },
          "name": "campaign_id",
          "in": "path",
          "required": true,
          "description": "The `campaign_id` or `name` of the campaign being disabled. You can either pass the `campaign_id`, which was assigned by Voucherify, or the `name` of the campaign as the path parameter value, e.g., `Loyalty%20Campaign`. "
        }
      ]
    },
    "/campaigns/{campaign_id}/enable": {
      "post": {
        "summary": "Enable Campaign",
        "operationId": "post-campaigns-disable",
        "responses": {
          "200": {
            "description": "Returns 200 HTTP status code on success and an empty json `{}`."
          }
        },
        "tags": [
          "CAMPAIGNS API"
        ],
        "description": "There are various times when you'll want to manage a campaign's accessibility. This can be done by two API methods for managing the campaign state - *enable* and *disable*.  \n___  \nSets campaign state to **active**. The vouchers in this campaign can be redeemed - only if the redemption occurs after the start date and the voucher is not expired.",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ]
      },
      "parameters": [
        {
          "schema": {
            "type": "string",
            "example": "camp_BcHeMm4QaKjqCWMQFecMp1U0"
          },
          "name": "campaign_id",
          "in": "path",
          "required": true,
          "description": "The `campaign_id` or `name` of the campaign being enabled. You can either pass the `campaign_id`, which was assigned by Voucherify or the `name` of the campaign as the path parameter value, e.g., `Loyalty%20Campaign`. "
        }
      ]
    },
    "/promotions/{campaign_id}/tiers": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "campaign_id",
          "in": "path",
          "required": true,
          "description": "Id of the campaign."
        }
      ],
      "get": {
        "summary": "List Promotion Tiers from Campaign",
        "tags": [
          "PROMOTIONS API"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "operationId": "get-promotions-campaign_id-tiers",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ],
        "description": "This method enables you to list promotion tiers from a specified campaign."
      },
      "post": {
        "summary": "Add Promotion Tier to Campaign",
        "operationId": "post-promotions-campaign_id-tiers",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "PROMOTIONS API"
        ],
        "description": "This method gives a possibility to push new promotion tier to existing campaign.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ]
      }
    },
    "/promotions/tiers/{promotion_tier_id}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "promotion_tier_id",
          "in": "path",
          "required": true,
          "description": "Id of the promotion"
        }
      ],
      "put": {
        "summary": "Update Promotion Tier",
        "operationId": "put-promotions-tiers-promotion_tier_id",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "This method updates a promotion tier.",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ],
        "tags": [
          "PROMOTIONS API"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Promotion Tier",
        "operationId": "delete-promotions-tiers-promotion_tier_id",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "PROMOTIONS API"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ],
        "description": "This method deletes a promotion tier."
      }
    },
    "/promotions/tiers": {
      "get": {
        "summary": "List Promotion Tiers",
        "tags": [
          "PROMOTIONS API"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "operationId": "get-promotions-tiers",
        "description": "This method enables you to list promotion tiers.\n\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          },
          {
            "schema": {
              "type": "boolean"
            },
            "in": "query",
            "name": "is_available",
            "description": "This parameter allows filtering only available promotions in the moment. It can select only not expired and active promotions."
          },
          {
            "schema": {
              "type": "integer"
            },
            "in": "query",
            "name": "limit",
            "description": "A limit on the number of objects to be returned. Limit can range between 1 and 100 items."
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "description": "Which page of results to return.",
            "name": "page"
          }
        ]
      }
    },
    "/promotions/tiers/{promotion_tier_id}/enable": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "promotion_tier_id",
          "in": "path",
          "required": true,
          "description": "Id of the promotion tier"
        }
      ],
      "post": {
        "summary": "Enable Promotion Tier",
        "operationId": "post-promotions-tiers-promotion_tier_id-enable",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "PROMOTIONS API"
        ],
        "description": "This method updates a promotion tier.",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ]
      }
    },
    "/promotions/tiers/{promotion_tier_id}/disable": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "promotion_tier_id",
          "in": "path",
          "required": true,
          "description": "Id of the promotion tier"
        }
      ],
      "post": {
        "summary": "Enable Promotion Tier",
        "operationId": "post-promotions-tiers-promotion_tier_id-enable",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "PROMOTIONS API"
        ],
        "description": "This method updates a promotion tier.",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ]
      }
    },
    "/promotions/{campaign_id}/stacks": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "campaign_id",
          "in": "path",
          "required": true,
          "description": "Id of the campaign"
        }
      ],
      "get": {
        "summary": "List Promotion Stacks",
        "tags": [
          "PROMOTIONS API"
        ],
        "responses": {
          "200": {
            "description": "Returns a list if a valid promotion campaign identifier was provided in the path.\n\n`data` An array of stack objects.\n`id` An internal id corresponding to the stack id.\n`name` Contains the name of the stack.\n`tiers` An object containing the `ids` of the stacked promotion tiers.  \n\nReturns an error if an incorrect campaign id is provided."
          }
        },
        "operationId": "get-promotions-campaign_id-stacks",
        "description": "This method enables you to list promotion stacks from a specified campaign.",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ]
      },
      "post": {
        "summary": "Create Promotion Stack",
        "operationId": "post-promotions-campaign_id-stacks",
        "responses": {
          "200": {
            "description": "Returns a new stack object if a valid promotion campaign identifier was provided in the path and available promotion ids in the payload.\n\n`id` An internal id corresponding to the stack id.\n`name` Contains the name of the stack.\n`tiers` An object containing the `ids` of the stacked promotion tiers.  \n\nReturns an error if an incorrect campaign id or promotion id is provided."
          }
        },
        "tags": [
          "PROMOTIONS API"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ],
        "description": "This method creates one promotion stack given promotion tier ids.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/promotions/{campaign_id}/stacks/{stack_id}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "campaign_id",
          "in": "path",
          "required": true,
          "description": "Id of the promotion campaign."
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "stack_id",
          "in": "path",
          "required": true,
          "description": "Id of the promotion stack."
        }
      ],
      "get": {
        "summary": "Get Promotion Stack",
        "tags": [
          "PROMOTIONS API"
        ],
        "responses": {
          "200": {
            "description": "Returns a stack object if valid identifiers were provided in the path.\n\n`id` Corresponds to the internal stack id.\n`name` Contains the name of the stack.\n`tiers` An object containing the `ids` of the stacked promotion tiers.\n\nReturns an error if incorrect `campaign id` or `stack id` is provided."
          }
        },
        "operationId": "get-promotions-campaign_id-stacks-stack_id",
        "description": "This method returns the details of a promotion stack, including the promotion tiers grouped within the stack.",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ]
      },
      "put": {
        "summary": "Update Promotion Stack",
        "operationId": "put-promotions-campaign_id-stacks-stack_id",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "PROMOTIONS API"
        ],
        "description": "This methods allows for editing an existing stack.",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Promotion Stack",
        "operationId": "delete-promotions-campaign_id-stacks-stack_id",
        "responses": {
          "200": {
            "description": "Returns a 200 OK response if deletion is successful and a 404 message indicating that the stack or campaign of given id was not found."
          }
        },
        "tags": [
          "PROMOTIONS API"
        ],
        "description": "This method lets you delete promotion stacks.",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ]
      }
    },
    "/rewards": {
      "get": {
        "summary": "List Rewards",
        "tags": [
          "REWARDS API"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "operationId": "get-rewards",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ]
      },
      "post": {
        "summary": "Create Reward",
        "operationId": "post-rewards",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "REWARDS API"
        ],
        "description": "",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/rewards/{reward_id}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "reward_id",
          "in": "path",
          "required": true,
          "description": "A unique reward identifier"
        }
      ],
      "get": {
        "summary": "Get Reward",
        "tags": [
          "REWARDS API"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "operationId": "get-rewards-reward_id",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ]
      },
      "put": {
        "summary": "Update Reward",
        "operationId": "put-rewards-reward_id",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "REWARDS API"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ]
      },
      "delete": {
        "summary": "Delete Reward",
        "operationId": "delete-rewards-reward_id",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ],
        "tags": [
          "REWARDS API"
        ]
      }
    },
    "/rewards/{reward_id}/assignments": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "reward_id",
          "in": "path",
          "required": true,
          "description": "A unique reward identifier"
        }
      ],
      "get": {
        "summary": "List Reward Assignments",
        "tags": [
          "REWARDS API"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "operationId": "get-rewards-reward_id-assignments",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ]
      },
      "post": {
        "summary": "Create Reward Assignment",
        "operationId": "post-rewards-reward_id-assignments",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "REWARDS API"
        ],
        "description": "Assigns a reward to a specified loyalty campaign.",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/rewards/{reward_id}/assignments/{assignment_id}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "reward_id",
          "in": "path",
          "required": true,
          "description": "A unique reward identifier"
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "assignment_id",
          "in": "path",
          "required": true,
          "description": "A unique reward assignment identifier"
        }
      ],
      "put": {
        "summary": "Update Reward Assignment",
        "operationId": "put-rewards-reward_id-assignments-assignment_id",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "REWARDS API"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ]
      },
      "delete": {
        "summary": "Delete Reward Assignment",
        "operationId": "delete-rewards-reward_id-assignments-assignment_id",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "REWARDS API"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ]
      }
    },
    "/exports/{export_id}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "export_id",
          "in": "path",
          "required": true,
          "description": "Export object id/Id of previously created order export."
        }
      ],
      "get": {
        "summary": "Get/Download Export",
        "tags": [
          "DISTRIBUTIONS API",
          "ORDERS API"
        ],
        "responses": {
          "200": {
            "description": "Returns an export object if a valid identifier was provided in the path.\n\n`id` An internal id corresponding to the exported object.\n`status` Indicates whether the file containing the orders has been generated.\n`result` Contains the url address of the generated CSV file.\n\nReturns an error if an incorrect id is provided in the path."
          }
        },
        "operationId": "get-exports-export_id",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ],
        "description": "Retrieves the url of the downloadable file, which was generated via the Create Exportref:create-export-1 method."
      },
      "delete": {
        "summary": "Delete Export",
        "operationId": "delete-exports-export_id",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "DISTRIBUTIONS API"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ]
      }
    },
    "/exports": {
      "post": {
        "summary": "Create Export",
        "operationId": "post-exports",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "tags": [
          "DISTRIBUTIONS API"
        ]
      },
      "get": {
        "summary": "List Exports",
        "operationId": "get-exports",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "DISTRIBUTIONS API"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ]
      }
    },
    "/exports/{exportId}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "exportId",
          "in": "path",
          "required": true,
          "description": "Export object id"
        }
      ],
      "get": {
        "summary": "Download Export",
        "tags": [
          "DISTRIBUTIONS API"
        ],
        "responses": {},
        "operationId": "get-exports-export_id-?token=-token",
        "description": "This API provides a secure way to download generated exports.\nIf you have a valid token and do not provide X-App-Id and X-App-Token headers, then your link will work for 15 minutes only. In a short future, authentication headers will be obligatory.",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "token",
            "description": "Token used for authorization"
          }
        ]
      }
    },
    "/publications": {
      "get": {
        "summary": "List Publications",
        "tags": [
          "DISTRIBUTIONS API"
        ],
        "responses": {
          "200": {
            "description": "Returns a list of publications you’ve previously created with create publicationref:create-publication or implicitly by the distribution manager. The publications are returned in sorted order, with the most recent ones appearing first.  \n\n<!-- theme: warning -->\n> #### Pagination!\n>\n> If you want to scroll through a huge set of records, it is recommended to use [Exports API](https://docs.voucherify.io/reference#the-export-object). This API will return an error `page_over_limit` if you reach a page above 1000.\n\n`filters` query param allow for joining multiple parameters with logical operators. The syntax looks as follows:\n\n`filters[<field_name>][conditions][<operator>][<index>]=<value>`\n\nOperators:\n```\n    \"$in\"\n    \"$not_in\"\n    \"$is\"\n    \"$is_not\"\n    \"$has_value\"\n    \"$is_unknown\"\n    \"$contains\"\n    \"$starts_with\"\n    \"$ends_with\"\n    \"$more_than\"\n    \"$less_than\"\n    \"$more_than_equal\"\n    \"$less_than_equal\"\n```\n\nExample 1 - list publications of a given customer\n```\nGET /v1/publications?filters[customer_id][conditions][$is][0]=cust_lUET6gRpO5Wxlg5p2j2gRCgL\n```\n\nExample 2 - list publications of 2 customers\n```\nGET /v1/publications?filters[customer_id][conditions][$in][0]=cust_lUET6gRpO5Wxlg5p2j2gRCgL&filters[customer_id][conditions][$in][1]=cust_aR7NfHusxT7PdTMAKMfWDXnc\n```\nor with the `junction` operator\n```\nGET /v1/publications?filters[customer_id][conditions][$is][0]=cust_lUET6gRpO5Wxlg5p2j2gRCgL&filters[customer_id][conditions][$is][1]=cust_aR7NfHusxT7PdTMAKMfWDXnc&filters[junction]=OR\n```"
          }
        },
        "operationId": "get-publications",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "order",
            "description": "Sorts the results, options: `\"id\", \"voucher_code\", \"tracking_id\", \"customer_id\", \"created_at\", \"channel\"`"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "campaign",
            "description": "Filters by a given campaign"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "customer",
            "description": "Filters by a customer"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "voucher",
            "description": "Filters by a given voucher code"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "result",
            "description": "Filters by a publication result"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "voucher_type",
            "description": "Filters by a voucher typerefthe-voucher-object"
          },
          {
            "schema": {
              "type": "boolean"
            },
            "in": "query",
            "name": "is_referral_code",
            "description": "If true, the query returns only publications of codes from a referral campaign. Otherwise, only publications from coupon campaigns"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "filters",
            "description": "Allows for combining the filters mentioned above, see below for the reference"
          }
        ]
      },
      "post": {
        "summary": "Create Publication",
        "operationId": "post-publications",
        "responses": {
          "200": {
            "description": "Returns a publication object if a valid identifier was provided. Object will contain single published voucher object or list of published voucher codes in case of multiple publication."
          }
        },
        "tags": [
          "DISTRIBUTIONS API"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          },
          {
            "schema": {
              "type": "boolean"
            },
            "in": "query",
            "name": "join_once",
            "description": "Through this flag, you can control if a particular person gets only one and always the same code even if the app sends multiple publications requests. It means that if you have a referral program, a referrer is assigned only to one code also if an integration sends publication requests more than once for the same customer."
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "description": "This method selects vouchers that are suitable for publication, adds a publish entry and returns the publication.\n\nA voucher is suitable for publication when it's active and hasn't been published yet.  \n\n<!-- theme: warning -->\n> #### Clearly define the source of the voucher\n>\n> You must clearly define which source you want to publish voucher code from. It can be either a code from a campaign or a specific voucher identified by code.  \n<!-- theme: warning -->\n> #### Publish multiple vouchers\n> In case you want to publish multiple vouchers within single publication you need to specify campaign name and number of vouchers you want to publish.  \n<!-- theme: info -->\n\n> #### Auto-update campaign\n>\n> In case you want to ensure the number of publishable codes increases automatically with the number of customers, you should use **auto-update** campaign."
      }
    },
    "/vouchers/{code}/validate": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "code",
          "in": "path",
          "required": true,
          "description": "A code that identifies the voucher (e.g., Testing7fjWdr)."
        }
      ],
      "post": {
        "summary": "Validate Voucher",
        "operationId": "post-vouchers-code-validate",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "VALIDATIONS API"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ],
        "description": "To verify a voucher code given by customer, you can use this method. It is designed for server side integration which means that is accessible only through private keys.  \n\n#### Gift Vouchers - validate Gift Card and control amount to redeem\nVoucherify also gives the possibility to create a gift card, which allows using credits to fulfill the order. A user can specify how many credits he wants to use from the gift card. The available balance of credits is counted based on policy rules attached to the Gift Voucher definition.  \n\nThis operation returns information about the validity of the code. Moreover, it returns hashed source identifier which can be used as tracking id in future calls.\n\nIf a validation session is established then the session details will be returned as well. Read more about sessions: Validation Sessionvalidation-session\n\nVoucher validation might fail because of one of these reasons:\n* `voucher not found` - voucher doesn't exist or was deletedref:delete-voucher\n* `voucher expired` - voucher is out of start date - expiration date time frame\n* `voucher is disabled` - learn more [disable voucher](#paths/vouchers/{code}/disable)\n* [disable voucher](#../paths/~1vouchers~1{code}~1disable/post)\n* [d](#/reference/OpenAPI.json/paths/~1vouchers~1{code}~1disable/post)\n* [dd](#/post-vouchers-code-disable)\n* `customer does not match segment rules` - learn more customer trackingdoc:customer-tracking \n* `order does not match validation rules` - learn more about validation rulesdoc:validation-rules"
      }
    },
    "/validate": {
      "get": {
        "summary": "Validate Voucher (client-side)",
        "tags": [
          "VALIDATIONS API"
        ],
        "responses": {
          "200": {
            "description": "This operation returns information about validity of the code. Moreover it returns hashed source identifier which can be used as tracking id in future calls.\n\nIf a validation session is established then the session details will be returned as well. Read more about sessions: Validation Sessionref:validation-session .\n\nVoucher validation might fail because of one of these reasons:\n* `voucher not found` - voucher doesn't exist or was deletedref:delete-voucher\n* `voucher expired` - voucher is out of [start date - expiration date] time frame\n* `voucher is disabled` - learn more disable voucherdisable-voucher \n* `customer does not match segment rules` - learn more customer trackingcustomer-tracking\n* `order does not match validation rules` - learn more about validation rulesvalidation-rules"
          }
        },
        "operationId": "get-validate",
        "description": "To verify a voucher code given by customer, you can use this method. It is designed for client side integration which means that is accessible only through public keys. This method is designed to be run directly either in web browsers or mobile apps.\n\n\n[block:api-header]\n{\n  \"title\": \"Set customer identity (optional)\"\n}\n[/block]\nVoucherify can help you track anonymous customers. Once you integrate Voucherify.js into your web app and call validate method, Voucherify will return a tracking ID and the script will store it in a cookie. Every next validate call will be using the same tracking ID.\n\nWe are tracking users who are validating vouchers with those who consume them by a tracking_id. For that, we are setting up an identity for the user. We will generate a tracking_id on the server side unless you specify it on your own. In both cases, you will receive it in the validation response.\n\nThe returned tracking_id field should be used as customer source_id in subsequent redemption requests. The tracking_id returned from Validation API is encoded. Voucherify will recognize both values for identifying customer - the one before encryption send as a query parameter to `GET validate` request, and the version encrypted and returned as part of the validation request.\n[block:api-header]\n{\n  \"title\": \"Sample workflow\"\n}\n[/block]\nCustomer tracking workflow in a nutshell:\n\n**Client-side:**\n  * A customer visits your website.\n  * A customer validates a voucher code. That triggers a validate request to Voucherify. In request, you pass tracking_id or customer.source_id. As a result, it returns **encoded tracking_id**.\n\n**Backend:**\n  * Once the customer finishes the checkout process, your website passes the tracking_id to your backend during a redemption. It is sent as a property *source_id* in a customer object.\n  * A customer object is created and within the redemption response, you get a customer.id.\n  * You can use the customer.id or customer.source_id to fetch or modify the customer details.\n  \nA customer is created (upserted) automatically with a redemption call. Alternatively, you can create a new profile by creating a customer via a dedicated API method. Take a look at the customer object to understand the [entity's structure](https://docs.voucherify.io/reference#the-customer-object). \n[block:callout]\n{\n  \"type\": \"info\",\n  \"body\": \"Source id of the customer may be either already hashed version of tracking id you received in a response from a validation request or a custom ID you predefined (email address). Nevertheless, we recommend using identifiers delivered by Voucherify API.\",\n  \"title\": \"Customer identifier\"\n}\n[/block]\n\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"curl -X GET \\\\\\n  -H \\\"X-Client-Application-Id: 011240bf-d5fc-4ef1-9e82-11eb68c43bf5\\\" \\\\\\n  -H \\\"X-Client-Token: 9e2230c5-71fb-460a-91c6-fbee64707a20\\\" \\\\\\n  -H \\\"Content-Type: application/json\\\" \\\\\\n  -H \\\"origin: yourdomain.com\\\" \\\\\\n  'https://api.voucherify.io/client/v1/validate?code=5OFF5&amount=1500&item[0][sku_id]=sku_13SWYzm3tuMXSP&item[0][quantity]=2&item[1][product_id]=prod_DSFGCz3IFxpkiL&item[1][quantity]=2'\",\n      \"language\": \"curl\",\n      \"name\": \"Example Request - Readable form\"\n    }\n  ],\n  \"sidebar\": true\n}\n[/block]\n\n[block:textarea]\n{\n  \"text\": \"[JSFiddle example](https://jsfiddle.net/voucherify/gfu2bgn5/)\",\n  \"sidebar\": true\n}\n[/block]\n\n[block:code]\n{\n  \"codes\": [\n    {\n      \"code\": \"<script type=\\\"text/javascript\\\" src=\\\"https://cdn.rawgit.com/rspective/voucherify.js/v1.4.5/dist/voucherify-1.4.5.js\\\"></script>\\n\\n<script type=\\\"text/javascript\\\">\\n  function init() {\\n    Voucherify.initialize(\\n      \\\"011240bf-d5fc-4ef1-9e82-11eb68c43bf5\\\", //YOUR-CLIENT-APPLICATION-ID-FROM-SETTINGS\\n      \\\"9e2230c5-71fb-460a-91c6-fbee64707a20\\\" //YOUR-CLIENT-TOKEN-FROM-SETTINGS\\n    );\\n  };\\n  init();\\n  \\n  //-- [Optional] If you want us to track your customers' activity, then you should invoke the following function to set identity. You have to do it only once. If the identity parameter is not passed, then we will generate it for you.\\n  Voucherify.setIdentity(\\\"your-customer-uniq-id\\\");\\n  Voucherify.validate(\\\"Testing7fjWdr\\\", function callback (response) {\\n    console.log(response);\\n  });\\n</script>\",\n      \"language\": \"html\",\n      \"name\": \"Example Code - Voucherify.js\"\n    }\n  ]\n}\n[/block]\n\n[block:api-header]\n{\n  \"title\": \"Examples\"\n}\n[/block]\n\n[block:parameters]\n{\n  \"data\": {\n    \"h-1\": \"Example Request\",\n    \"0-0\": \"Shortcut - `customer` query param instead of `customer[source_id]`\",\n    \"0-1\": \"`https://api.voucherify.io/client/v1/validate?code=sKKFCKLZ&amount=10100&customer=customer_id`\",\n    \"1-0\": \"Pass `customer`'s and `redemption`'s context `metadata` in query parameters\",\n    \"1-1\": \"`https://api.voucherify.io/client/v1/validate?code=sKKFCKLZ&amount=10100&customer=sure_he_is_new&metadata[shop]=1&customer[metadata][propsy]=2&metadata[test]=true`\",\n    \"2-0\": \"Use `tracking_id` instead of `source_id`\",\n    \"2-1\": \"`https://api.voucherify.io/client/v1/validate?code=IKU-mvS-JOG&amount=10100&tracking_id=sure_he_is_new_5&metadata[shop]=1&metadata[test]=true`\"\n  },\n  \"cols\": 2,\n  \"rows\": 3\n}\n[/block]\n\n[block:api-header]\n{\n  \"type\": \"basic\",\n  \"title\": \"Returns\"\n}\n[/block]",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-Client-Token"
          },
          {
            "$ref": "#/components/parameters/X-Client-Application-Id"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "code",
            "description": "A code that identifies the voucher (e.g., `Testing7fjWdr`)."
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "tracking_id",
            "description": "A tracking identifier of a user that validated a voucher. Identifier generated during voucher validation based on your internal id during the first request (e.g., email, database ID). If you do request a first time, you should pass your internal id to track customer. **Although not all information is required, the extra info helps prevent fraud.**"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "amount",
            "description": "A positive integer representing the total amount for the order."
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "order.items"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "customer.source_id"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "customer.metadata"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "session_type",
            "description": "Required for session to be setup. Possible values are: LOCK"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "session_key",
            "description": "The session unique identifier. Sending existing identifier will result in overwriting the existing session. If none provided then new id will be generated"
          },
          {
            "schema": {
              "type": "integer"
            },
            "in": "query",
            "name": "session_ttl",
            "description": "The value of session's lifetime in time units"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "session_ttl_unit",
            "description": " The time unit for session's lifetime. Possible values are: MILLISECONDS, SECONDS, MINUTES, HOURS, DAYS"
          }
        ]
      }
    },
    "/promotions/validation": {
      "post": {
        "summary": "Validate Promotions",
        "operationId": "post-promotions-validation",
        "responses": {
          "200": {
            "description": "This operation returns a list of valid promotions for a given context (customer and order). You can choose which promotion to apply for example by the highest discount amount."
          }
        },
        "description": "Use this method to get valid promotions for a given customer and order (private keys)\n\n[/block]\nIf a validation session is established then the session details will be returned as well. Read more about sessions: [Validation Session](ref:validation-session)\n[block:api-header]\n{\n  \"title\": \"Advanced validation filters\"\n}\n[/block]\nYou can narrow down validation to specific promotion ID or tier metadata. Here are the examples of filtering queries you can use:\n[block:parameters]\n{\n  \"data\": {\n    \"h-0\": \"Filter\",\n    \"h-1\": \"Example\",\n    \"0-0\": \"promotion_id\",\n    \"1-0\": \"tier metadata\",\n    \"0-1\": \"[filters][promotion_id][conditions][$is]={{Campaign_id}}\",\n    \"1-1\": \"[filters][metadata.{{Promotion tier metadata key}}][conditions][$is]={{Promotion tier metadata value}}\"\n  },\n  \"cols\": 2,\n  \"rows\": 2\n}\n[/block]",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "audienceRulesOnly",
            "description": "If you add a query param AudienceRulesOnly=true, the request will be validated against customer-related rules only, the rest of attached limits and rules will be ignored."
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "tags": [
          "VALIDATIONS API"
        ]
      }
    },
    "/promotions/tiers/{tier_id}/validation": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "tier_id",
          "in": "path",
          "required": true,
          "description": "Id of the promotion tier"
        }
      ],
      "post": {
        "summary": "Validate Promotion Tier",
        "operationId": "post-promotions-tiers-tier_id-validation",
        "responses": {
          "200": {
            "description": "Returns validation result in `valid` key of the promotion tier object. Returns `true` if the promotion tier rules and validation rules are satisfied given the request body parameters. Returns `false` if the data provided in the payload does not meet validation rules or promotion tier requirements."
          }
        },
        "description": "To verify whether the promotion tier discount can be applied to an order. This method is designed for server side integration which means that it is accessible only through private keys.",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "tags": [
          "VALIDATIONS API"
        ]
      }
    },
    "/vouchers/{code}/redemption": {
      "parameters": [
        {
          "$ref": "#/components/parameters/code"
        }
      ],
      "get": {
        "summary": "Get Voucher's Redemption",
        "tags": [
          "REDEMPTIONS API"
        ],
        "responses": {
          "200": {
            "description": "A dictionary with a `redemption_entries` property that contains an array of voucher's redemptions."
          }
        },
        "operationId": "get-vouchers-code-redemption",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ]
      },
      "post": {
        "summary": "Redeem Voucer",
        "operationId": "post-vouchers-code-redemption",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "REDEMPTIONS API"
        ],
        "description": "To redeem a voucher, you create a redemption object. It increments redemption counter and updates history of the voucher. \n\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "tracking_id",
            "description": "A tracking identifier of a user that redeemed a voucher. Identifier generated during voucher validation based on your internal id (e.g., email, database ID). If you also pass a customer ID, the tracking ID must be the ID of a source of the customer object. Otherwise, if you do not pass a customer ID, the tracking you provide must either be a token, like the ones returned by **Voucherify.js (voucher validation)**, or a string identifying customer, with the options described below. **Although not all information is required, the extra info helps prevent fraud.**"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/redemptions": {
      "get": {
        "summary": "List Redemptions",
        "tags": [
          "REDEMPTIONS API"
        ],
        "responses": {
          "200": {
            "description": "Returns a list of redemptions of all vouchers. The result can be narrowed according to specified (or default) filters, for example, you can sort redemptions by date:\n`https://api.voucherify.io/v1/redemptions?limit=3&[created_at][before]=2017-09-08T13:52:18.227Z`\n\nA dictionary with a `redemptions` property that contains an array of up to limit redemptions, starting after `created_at.after`. Each entry in the array is a separate redemption object. If no more redemptions are available, the resulting array will be empty. If you provide a non-existent customer ID, this call returns an empty object."
          }
        },
        "operationId": "get-redemptions",
        "description": "Returns a list of redemptions you’ve previously created. The redemptions are returned in sorted order, with the most recent redemptions appearing first.  \n\n#### Failed Redemptions\n\nA redemption may fail for various reasons. You can figure out an exact reason from `failure_code`:\n- `resource_not_found` - voucher with given code does not exist\n- `voucher_not_active` - voucher is not active yet (before start date)\n- `voucher_expired` - voucher has already expired (after expiration date)\n- `voucher_disabled` -  voucher has been disabled (`active: false`)\n- `quantity_exceeded` - voucher's redemptions limit has been exceeded\n- `gift_amount_exceeded` - gift amount has been exceeded\n- `customer_rules_violated` - customer did not match to the segment\n- `order_rules_violated` - order did not match validation rules\n- `invalid_order` - order was specified incorrectly\n- `invalid_amount` - order amount was specified incorrectly\n- `missing_amount` - order amount was not specified\n- `missing_order_items` - order items was not specified\n- `missing_customer` - customer was not specified",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "result",
            "description": "A filter on the list based on the redemption result. Available options are: `SUCCESS`, `FAILURE`. You can provide multiple values by repeating the param."
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "campaign",
            "description": "A filter by the campaign redemptions originate from"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "customer",
            "description": "Return redemptions performed by the customer with given `id`."
          },
          {
            "schema": {
              "type": "string",
              "example": "2016-11-16T14:14:31Z or 2016-11-16"
            },
            "in": "query",
            "name": "[created_at]",
            "description": "A filter based on the object `created_at` field. Narrows down the results and lists redemptions done before or after a particular date time. You can use the following options: `[created_at][after]`, `[created_at][before]`. A date value must be presented in ISO 8601 format (`2016-11-16T14:14:31Z` or `2016-11-16`). An example: `[created_at][before]=2017-09-08T13:52:18.227Z`"
          }
        ]
      },
      "post": {
        "summary": "Redeem Stackable Discounts (Beta)",
        "operationId": "post-redemptions",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "tags": [
          "STACKABLE DISCOUNTS API"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ],
        "description": "Use this method to redeem up to 5 redeemables in the single API request."
      }
    },
    "/redemptions/{redemption_id}/rollback": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "redemption_id",
          "in": "path",
          "required": true,
          "description": "Identifier of original redemption which is supposed to be rolled back."
        }
      ],
      "post": {
        "summary": "Rollback Redemption",
        "operationId": "post-redemptions-redemption_id-rollback",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "REDEMPTIONS API"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "reason",
            "description": "Reason for the rollback."
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "description": "Your business logic may include a case when you need to undo a redemption. You can revert a redemption by calling this API endpoint. The operation creates a rollback entry in voucher's redemption history (`redemption.redemption_entries`) and gives 1 redemption back to the pool (decreases `redeemed_quantity` by 1). In case of gift vouchers, method returns funds back according to source redemption."
      }
    },
    "/redemptions/{redemption_id}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "redemption_id",
          "in": "path",
          "required": true,
          "description": "ID of previously created redemption."
        }
      ],
      "get": {
        "summary": "Get Redemption",
        "tags": [
          "REDEMPTIONS API"
        ],
        "responses": {
          "200": {
            "description": "It returns a redemption you’ve previously created."
          }
        },
        "operationId": "get-redemptions-redemption_id",
        "description": "Return a redemption you’ve previously created.",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ]
      }
    },
    "/promotions/tiers/{promotion_tier_id}/redemption": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "promotion_tier_id",
          "in": "path",
          "required": true,
          "description": "Id of the promotion to be redeemed."
        }
      ],
      "post": {
        "summary": "Redeem Promotion",
        "operationId": "post-promotions-tiers-promotion_tier_id-redemption",
        "responses": {
          "200": {
            "description": "Returns a redemption object if the redeem operation succeeded. Returns an error if something goes wrong."
          }
        },
        "tags": [
          "REDEMPTIONS API"
        ],
        "description": "To redeem a promotion, you create a redemption object passing a context. In the previous step, you should learn about active promotions through API method for validation. That validation method will return a list of active​ promotion tiers identified by ID.  \n> #### Redemption rollback\n>\n> Do you need to undo a redemption? You can do it with redemption rollbackref:rollback-redemption.",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/validations": {
      "post": {
        "summary": "Validate Stackable Discounts (Beta)",
        "operationId": "post-validations",
        "responses": {
          "200": {
            "description": "All codes and tiers provided in redeemables are validated during the request and the result of their validation is returned in the API response."
          }
        },
        "tags": [
          "STACKABLE DISCOUNTS API"
        ],
        "description": "To verify redeemables given in the request, you can use this method. It is designed for server side integration which means that is accessible only through private keys.  \n\n\n[block:api-header]\n{\n  \"title\": \"Response schema\"\n}\n[/block]\nAll codes and tiers provided in redeemables are validated during the request and the result of their validation is returned in the API response. \n[block:parameters]\n{\n  \"data\": {\n    \"h-0\": \"Response\",\n    \"h-1\": \"Description\",\n    \"0-0\": \"valid `boolean`\",\n    \"0-1\": \"If all redeemables can be applied in the given context, the API returns `true` if at least one redeemable can't be applied, the API returns `false`.\",\n    \"1-0\": \"redeemables `array of objects`\",\n    \"1-1\": \"redeemables array lists results of validation of each redeemable. If a redeemable can be applied, the API returns \\\"status\\\": \\\"APPLICABLE\\\"\",\n    \"2-0\": \"order `object`\",\n    \"2-1\": \"order object presents details of the order provided in the request after all discounts are applied. [Read more](https://docs.voucherify.io/reference/redeem-stacked-discounts#how-api-returns-calculated-discounts-and-order-amounts-in-the-response) about returned order object.\",\n    \"h-2\": \"\",\n    \"0-2\": \"\"\n  },\n  \"cols\": 2,\n  \"rows\": 3\n}\n[/block]\n\n[block:api-header]\n{\n  \"title\": \"Expanded Response\"\n}\n[/block]\nResponses will vary depending on the strings passed in the options.expand string array.\n[block:parameters]\n{\n  \"data\": {\n    \"h-0\": \"Expand Option\",\n    \"h-1\": \"Response Body\",\n    \"0-0\": \"[\\\"order\\\"]\",\n    \"1-0\": \"[\\\"redeemable\\\"]\",\n    \"2-0\": \"[\\\"order\\\", \\\"redeemable\\\"]\",\n    \"0-1\": \"- Same response as fallback response (without an options object). \\n- Order data with calculated discounts are listed in each child redeemable object. \\n- Metadata *not* included for each discount type.\",\n    \"1-1\": \"Expands redeemable objects by including `metadata` for each discount type.\",\n    \"2-1\": \"- Order data with calculated discounts are listed in each child redeemable object.\\n- Includes `metadata` for each discount type.\"\n  },\n  \"cols\": 2,\n  \"rows\": 3\n}\n[/block]\n\n[block:api-header]\n{\n  \"title\": \"Parameters\"\n}\n[/block]\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ]
      }
    },
    "/redemptions/{parent_redemption_id}/rollbacks": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "parent_redemption_id",
          "in": "path",
          "required": true,
          "description": "Unique identifier of a parent redemption, e.g. r_JQfm73zWSJFQxs3bGxweYjgm"
        }
      ],
      "post": {
        "summary": "Rollback Stackable Redemptions (Beta)",
        "operationId": "post-redemptions-parent_redemption_id-rollbacks",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "STACKABLE DISCOUNTS API"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/loyalties": {
      "get": {
        "summary": "List Loyalty Campaigns",
        "tags": [
          "LOYALTIES API"
        ],
        "responses": {
          "200": {
            "description": "`campaigns` which is an array of loyalty campaigns objects of the size of `limit`"
          }
        },
        "operationId": "get-loyalties",
        "description": "Returns a list of your loyalty campaigns. The campaigns are sorted by creation date, with the most recent campaigns appearing first.  ",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ]
      },
      "post": {
        "summary": "Create Loyalty Cards",
        "operationId": "post-loyalties",
        "responses": {
          "200": {
            "description": "Returns a campaign object with its settings but without the loyalty card codes."
          }
        },
        "tags": [
          "LOYALTIES API"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ],
        "description": "Creates a batch of loyalty cards vouchersref:the-voucher-object aggregated in a single loyalty campaign. It also allows to define a custom codes pattern.  \n\n<!-- theme: info -->\n\n> #### Global uniqueness\n>In the structure representing your data, you can define a category that the voucher belongs to. You can later use the category of a voucher to group and search by specific criteria.  \n\n<!-- theme: warning -->\n> #### Asyncronous action!\n>\n> This is an asynchronous action, you can't read or modify a newly created campaign until the code generation is completed. See `creation_status` field in the campaign object descriptionref:the-campaign-object.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/loyalties/{loyalty_campaign_id_or_name}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "loyalty_campaign_id_or_name",
          "in": "path",
          "required": true,
          "description": "Campaign identifier or name."
        }
      ],
      "get": {
        "summary": "Get Loyalty Campaign",
        "tags": [
          "LOYALTIES API"
        ],
        "responses": {
          "200": {
            "description": "Returns a campaign object for a given campaign ID. When requesting the campaign that has been deleted, the resource will not be returned with 404 status code."
          }
        },
        "operationId": "get-loyalties-loyalty_campaign_id_or_name",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ],
        "description": "Get campaign by ID (e.g., camp_2boIBNQe7O9FzrwFJv0j4rUs)"
      },
      "post": {
        "summary": "Update Loyalty Campaign",
        "operationId": "post-loyalties-loyalty_campaign_id_or_name",
        "responses": {
          "200": {
            "description": "Returns the campaign object if the update succeeded. Returns an error if update parameters are invalid (e.g. specifying an invalid campaign type)."
          }
        },
        "tags": [
          "LOYALTIES API"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ],
        "description": "Updates a loyalty program for the following fields: `start_date`, `expiration_date`, `metadata`, `description`, `type`. Other fields won't be modified (even if provided they are silently skipped). Any parameters not provided will be left unchanged. \n\nThis method will update the loyalty cards vouchersref:the-voucher-object which have not been published or redeemed yet.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Loyalty Campaign",
        "operationId": "delete-loyalties-loyalty_campaign_id_or_name",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "LOYALTIES API"
        ],
        "description": "Permanently deletes a campaign and all related loyalty cards. It cannot be undone. Also immediately removes any redemptions on loyalty cards.",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          },
          {
            "schema": {
              "type": "boolean"
            },
            "in": "query",
            "name": "force",
            "description": "If this flag is set to true, campaign and related vouchers will be removed permanently. It means that afterwards you will be able to create next campaign with the same name."
          }
        ]
      }
    },
    "/loyalties/{campaign_id}/rewards": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "campaign_id",
          "in": "path",
          "required": true,
          "description": "A unique campaign identifier"
        }
      ],
      "get": {
        "summary": "List Reward Assignments",
        "tags": [
          "LOYALTIES API"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "operationId": "get-loyalties-campaign_id-rewards",
        "description": "Returns active rewardsref:the-reward-object from a given loyalty campaign.",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ]
      },
      "post": {
        "summary": "Create Reward Assignment",
        "operationId": "post-loyalties-campaign_id-rewards",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "LOYALTIES API"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "description": "Add a rewardref:the-reward-object to a loyalty campaign."
      }
    },
    "/loyalties/{campaign_id}/rewards/{assignment_id}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "campaign_id",
          "in": "path",
          "required": true,
          "description": "A unique campaign identifier"
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "assignment_id",
          "in": "path",
          "required": true,
          "description": "A unique reward assignment identifier"
        }
      ],
      "put": {
        "summary": "Update Reward Assignment",
        "operationId": "put-loyalties-campaign_id-rewards-assignment_id",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "LOYALTIES API"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ],
        "description": "Updates rewards parameters e.g., point cost.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Reward Assignment",
        "operationId": "delete-loyalties-campaign_id-rewards-assignment_id",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "LOYALTIES API"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ]
      }
    },
    "/loyalties/{campaign_id}/earning-rules/{earning_rule_id}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "campaign_id",
          "in": "path",
          "required": true
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "earning_rule_id",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get Earning Rule",
        "tags": [
          "LOYALTIES API"
        ],
        "responses": {
          "200": {
            "description": "Returns an earning rule object with the earning rule details."
          }
        },
        "operationId": "get-loyalties-campaign_id-earning-rules-earning_rule_id",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ],
        "description": "Retrieves an earning rule assigned to a campaign"
      },
      "put": {
        "summary": "Update Earning Rule",
        "operationId": "put-loyalties-campaign_id-earning-rules-earning_rule_id",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "LOYALTIES API"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Earning Rule",
        "operationId": "delete-loyalties-campaign_id-earning-rules-earning_rule_id",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "LOYALTIES API"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ]
      }
    },
    "/loyalties/{campaign_id}/earning-rules": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "campaign_id",
          "in": "path",
          "required": true,
          "description": "A unique campaign identifier"
        }
      ],
      "get": {
        "summary": "List Earning Rules",
        "tags": [
          "LOYALTIES API"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "operationId": "get-loyalties-campaign_id-earning-rules",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ],
        "description": ""
      },
      "post": {
        "summary": "Create Earning Rule",
        "operationId": "post-loyalties-campaign_id-earning-rules",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "LOYALTIES API"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/loyalties/{campaign_id}/earning-rules/{earning_rule_id}/enable": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "campaign_id",
          "in": "path",
          "required": true,
          "description": "A unique campaign identifier"
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "earning_rule_id",
          "in": "path",
          "required": true,
          "description": "A unique earning rule identifier"
        }
      ],
      "post": {
        "summary": "Enable Earning Rule",
        "operationId": "post-loyalties-campaign_id-earning-rules-earning_rule_id-enable",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "LOYALTIES API"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ],
        "description": ""
      }
    },
    "/loyalties/{campaign_id}/earning-rules/{earning_rule_id}/disable": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "campaign_id",
          "in": "path",
          "required": true,
          "description": "A unique campaign identifier"
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "earning_rule_id",
          "in": "path",
          "required": true,
          "description": "A unique earning rule identifier"
        }
      ],
      "post": {
        "summary": "Disable Earning Rule",
        "operationId": "post-loyalties-campaign_id-earning-rules-earning_rule_id-enable",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "LOYALTIES API"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ],
        "description": ""
      }
    },
    "/loyalties/{campaign_id}/members": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "campaign_id",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "List Members",
        "tags": [
          "LOYALTIES API"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "operationId": "get-loyalties-campaign_id-members",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/created_at"
          },
          {
            "$ref": "#/components/parameters/updated_at"
          }
        ],
        "description": "Returns a list of your loyalty cards holders. The vouchers are sorted by creation date, with the most recent vouchers appearing first."
      },
      "post": {
        "summary": "Add Member",
        "operationId": "post-loyalties-campaign_id-members",
        "responses": {
          "200": {
            "description": "Returns a publication object if a valid identifier was provided. The object will contain a single published voucher object."
          }
        },
        "tags": [
          "LOYALTIES API"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          },
          "description": ""
        },
        "description": "This method assigns a loyalty card to a customer. It selects a loyalty card vouchersref:the-voucher-object suitable for publication, adds a publish entry, and returns the published voucher.  \n\nA voucher is suitable for publication when it's active and hasn't been published yet.  \n\n<!-- theme: info -->\n\n> #### Auto-update campaign\n>\n> In case you want to ensure the number of publishable codes increases automatically with the number of customers, you should use **auto-update** campaign.\n\n"
      }
    },
    "/loyalties/{campaign_id}/members/{member_id}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "campaign_id",
          "in": "path",
          "required": true,
          "description": "A unique campaign identifier"
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "member_id",
          "in": "path",
          "required": true,
          "description": "A code that identifies the loyalty card."
        }
      ],
      "get": {
        "summary": "Get Member",
        "tags": [
          "LOYALTIES API"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "operationId": "get-loyalties-campaign_id-members-member_id",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ],
        "description": "Retrieves the voucher with the given `member_id`."
      }
    },
    "/loyalties/{campaign_id}/members/{member_id}/balance": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "campaign_id",
          "in": "path",
          "required": true,
          "description": "A unique campaign identifier"
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "member_id",
          "in": "path",
          "required": true,
          "description": "A code that identifies the loyalty card."
        }
      ],
      "post": {
        "summary": "Add Loyalty Card Balance",
        "operationId": "post-loyalties-campaign_id-members-member_id-balance",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "description": "This method gives adds balance to an existing loyalty card.",
        "tags": [
          "LOYALTIES API"
        ]
      }
    },
    "/loyalties/{campaign_id}/members/{member_id}/transfers": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "campaign_id",
          "in": "path",
          "required": true,
          "description": "A unique identifier of the loyalty campaign containing the voucher to which the loyalty points will be sent."
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "member_id",
          "in": "path",
          "required": true,
          "description": "A unique code identifying the loyalty card to which the user wants to transfer loyalty points."
        }
      ],
      "post": {
        "summary": "Transfer Loyalty Points",
        "operationId": "post-loyalties-campaign_id-members-member_id-transfers",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "This HTTP POST request method gives a possibility to transfer points between different loyalty cards. In the request, you need to provide the campaign ID and the loyalty card ID you want the points to be transferred to in the URL. In the request body, you have to provide the loyalty cards you want the points to be transferred from and the number of points to transfer from each card.",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "tags": [
          "LOYALTIES API"
        ]
      }
    },
    "/loyalties/{campaign_id}/members/{member_id}/redemption": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "campaign_id",
          "in": "path",
          "required": true,
          "description": "A unique campaign identifier"
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "member_id",
          "in": "path",
          "required": true,
          "description": "A code that identifies the voucher (e.g., Testing7fjWdr)."
        }
      ],
      "post": {
        "summary": "Redeem Reward",
        "operationId": "post-loyalties-campaign_id-members-member_id-transfers",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "Through this method, an integration tries to exchange points from a loyalty card for a specified reward. This API method returns an assigned award in response. It means that if a requesting customer gets a coupon code with a discount for the next order, that discount code will be visible in response as part of the reward object definition.",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "tags": [
          "LOYALTIES API"
        ]
      }
    },
    "/loyalties/{campaign_id}/members/{member_id}/activities": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "campaign_id",
          "in": "path",
          "required": true,
          "description": "A unique campaign identifier"
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "member_id",
          "in": "path",
          "required": true,
          "description": "A code that identifies the voucher (e.g., Testing7fjWdr)."
        }
      ],
      "get": {
        "summary": "Get Member Activities",
        "operationId": "get-loyalties-campaign_id-members-member_id-activities",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ],
        "description": "Retrieves the list of activities for the given `member_id` related to voucher and customer who is a holder of the voucher",
        "tags": [
          "LOYALTIES API"
        ]
      }
    },
    "/loyalties/{campaign_id}/tiers/{tier_id}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "campaign_id",
          "in": "path",
          "required": true,
          "description": "a unique loyalty campaign identifier."
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "tier_id",
          "in": "path",
          "required": true,
          "description": "a unique loyalty tier identifier."
        }
      ],
      "get": {
        "summary": "Get Loyalty Tier",
        "tags": [
          "LOYALTIES API"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "operationId": "get-loyalties-campaign_id-tiers-tier_id",
        "description": "This HTTP GET request method gives a possibility to get a loyalty tier by ID which belongs to the loyalty program.",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ]
      }
    },
    "/loyalties/{campaign_id}/tiers": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "campaign_id",
          "in": "path",
          "required": true,
          "description": "a unique loyalty campaign identifier."
        }
      ],
      "get": {
        "summary": "List Loyalty Tiers",
        "tags": [
          "LOYALTIES API"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "operationId": "get-loyalties-campaign_id-tiers-tier_id",
        "description": "This HTTP GET request method gives a possibility to get a list of loyalty tiers which were added to the loyalty program.",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ]
      }
    },
    "/customers": {
      "get": {
        "summary": "List Customers",
        "tags": [
          "CUSTOMERS API"
        ],
        "responses": {
          "200": {
            "description": "A dictionary with a data (`customers`) property that contains an array of up to limit customers. Each entry in the array is a separate customer object. If no more customers are available, the resulting array will be empty. The result can be narrowed down according to specified (or default) filters.\n\n"
          }
        },
        "operationId": "get-customers",
        "description": "Returns a list of your customers. The customers are returned sorted by creation date, with the most recent customers appearing first.",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "email",
            "description": "Limit the customers to the ones that have this specific email address."
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "description": "Limit the customers to the ones that located in the specified city.",
            "name": "city"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "description": "Filter customers by name property.",
            "name": "name"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "order",
            "description": "This is a property that controls sorting direction. Returned customers are sorted by the `created_at` field (creation date). To get ascending order, you have to set as value `created_at` and for descending `-created_at`."
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "starting_after",
            "description": "A cursor for use in pagination. `starting_after` is a date-time value that defines your place in the list based on `created_at` property from the customer object. For instance, if you make a list request and receive 100 objects, ending with an object created at `2020-05-24T13:43:09.024Z`, your subsequent call can include `starting_after=2020-05-24T13:43:09.024Z` in order to fetch the next page of the list. When this filter is used the sorting order is changed to ascending."
          }
        ]
      },
      "post": {
        "summary": "Create Customer",
        "operationId": "post-customers",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "CUSTOMERS API"
        ],
        "description": "For details check out \"Customer tracking\" section\n\n<!-- theme: info -->\n\n> #### Upsert Mode\n>\n> If you pass a `source_id` that already exists in Customer database, Voucherify will return a related Customer object but all fields that differ will get updated beforehand.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ]
      }
    },
    "/customers/{customer_id}": {
      "get": {
        "summary": "Get Customer",
        "tags": [
          "CUSTOMERS API"
        ],
        "responses": {
          "200": {
            "description": "\n"
          },
          "": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          }
        },
        "operationId": "get-customers",
        "description": "For details check out \"Customer tracking\" section",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ]
      },
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "customer_id",
          "in": "path",
          "required": true,
          "description": "A Voucherify customer identifier or source_id"
        }
      ],
      "delete": {
        "summary": "Delete Customer",
        "operationId": "delete-customers-customer_id",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "CUSTOMERS API"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ]
      },
      "put": {
        "summary": "Update Customer",
        "operationId": "put-customers-customer_id",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "CUSTOMERS API"
        ],
        "description": "For details check out \"Customer tracking\" section",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/customers/importCSV": {
      "post": {
        "summary": "Import Customers using CSV",
        "operationId": "post-customers",
        "responses": {
          "200": {
            "description": "Returns 202 HTTP status code on success. It informs that your request has been accepted and vouchers will be added to the repository asynchronously. To learn about operation status and result, copy the async action id from the API response and use [Get Async Action](ref:get-async-actions-1) endpoint.\n\nReturns `400` HTTP error status code when the CSV file includes incorrect data e.g. with a wrong data type for the metadata properties."
          }
        },
        "tags": [
          "CUSTOMERS API"
        ],
        "description": "This API method that you can use to import or update customer data. To get a proper and valid response, please send a CSV file with data separated by commas.\n\n___\nCurl Example\n```\ncurl -X POST \\\n  https://api.voucherify.io/v1/customers/importCSV \\\n  -F file=@/path/to/customers.csv \\\n  -H \"X-App-Id: c70a6f00-cf91-4756-9df5-47628850002b\" \\\n  -H \"X-App-Token: 3266b9f8-e246-4f79-bdf0-833929b1380c\"\n```\nThe CSV file has to include headers in the first line. All properties which cannot be mapped to standard customer fields will be added to the metadata object.\n\n<!-- theme: info -->\n\n> #### Standard customer fields mapping\n>\n> \"Source_id\", \"Name\", \"Description\", \"Email\", \"City\", \"Country\", \"Address Postal Code\", \"Address State\", \"Address State\", \"Address line 1\", \"Address line 2\", \"Phone\", \"Birthday\".  \n\nIn the case you want to update customer's data, you can do it using the CSV file with new data. However, remember to include a customer_id or source_id in your CSV file to manage the update successfully.\n\nPlease note that while updating customers using CSV import, when you provide both customer id and source_id in the CSV file, the source_id field will be ignored.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ]
      },
      "parameters": []
    },
    "/customers/{customer_id}/permanent-deletion": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "customer_id",
          "in": "path",
          "required": true,
          "description": "A Voucherify customer identifier or source_id."
        }
      ],
      "post": {
        "summary": "Delete Customer Permanently",
        "operationId": "post-customers-customer_id-permanent-deletion",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "CUSTOMERS API"
        ],
        "description": "The organization user can remove consumer data permanently from the Voucherify system by using this API method. It d​eletes all customer data and connected resources. It makes customer profile forgotten by Voucherify.",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ]
      }
    },
    "/customers/metadata/async": {
      "post": {
        "summary": "Update Customers Metadata in bulk",
        "operationId": "post-customers-metadata-async",
        "responses": {
          "200": {
            "description": "Returns 202 HTTP status code on success. It informs that your request has been accepted and vouchers will be added to the repository asynchronously. To learn about operation status and result, copy the async action id from the API response and use Get Async Action- addlinkhere endpoint."
          }
        },
        "tags": [
          "CUSTOMERS API"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "description": "Using this endpoint you can update a customers' metadata in asynchronous operation. In one request it is possible to update a maximum of 100 records. In the response body, you get a unique async action identifier. If a requested object was not found then an upsert will happen, which will be shown as { found: false, updated: true } in the get async action request."
      }
    },
    "/customers/bulk/async": {
      "post": {
        "summary": "Update Customers in bulk",
        "operationId": "post-customers-bulk-async",
        "responses": {
          "200": {
            "description": "Returns 202 HTTP status code on success. It informs that your request has been accepted and vouchers will be added to the repository asynchronously. To learn about operation status and result, copy the async action id from the API response and use Get Async Action addlink endpoint."
          }
        },
        "tags": [
          "CUSTOMERS API"
        ],
        "description": "Using this endpoint you can update several customers in one asynchronous operation. In one request it is possible to update a maximum of 100 records. In the response body, you get a unique async action identifier. If a requested object was not found then an upsert will happen, which will be shown as { found: false, updated: true } in the get async action request.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ]
      }
    },
    "/customers/{customer_id}/consents": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "customer_id",
          "in": "path",
          "required": true,
          "description": "A Voucherify customer identifier or source_id"
        }
      ],
      "put": {
        "summary": "Update Customer's consents",
        "operationId": "put-customers-customer_id-consents",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "CUSTOMERS API"
        ],
        "description": "Update marketing permissions for the specified customer.",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          },
          "description": "Key-value pairs where the key is the consent identifier and value is a boolean that identifies if a customer has given the consent or not. To deny all consents use \"unsubscribed\" as a consent identifier and \"true\" as its value."
        }
      }
    },
    "/customers/{customer_id}/consents#": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "customer_id",
          "in": "path",
          "required": true,
          "description": "A Voucherify customer identifier or source_id"
        }
      ],
      "put": {
        "summary": "Update Customer's consents (client)",
        "operationId": "put-customers-customer_id-consents",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "CUSTOMERS API"
        ],
        "description": "Update marketing permissions for the specified customer.",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-Client-Application-Id"
          },
          {
            "$ref": "#/components/parameters/X-Client-Token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          },
          "description": "Key-value pairs where the key is the consent identifier and value is a boolean that identifies if a customer has given the consent or not. To deny all consents use \"unsubscribed\" as a consent identifier and \"true\" as its value."
        }
      }
    },
    "/customers/{customer_id}/activities": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "customer_id",
          "in": "path",
          "required": true,
          "description": "A source identifier of a customer who performed the activities. It can be ID generated by Voucherify or source_id."
        }
      ],
      "get": {
        "summary": "List Customer Activities",
        "tags": [
          "CUSTOMERS API"
        ],
        "responses": {
          "200": {
            "description": "A list that contains customer activities after a given starting date. Each entry in the list is a separate event object. If no more events are available, the resulting array will be empty. The result can be narrowed down according to specified (or default) filters."
          }
        },
        "operationId": "get-customers-customer_id-activities",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/order"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "starting_after",
            "description": "A cursor for use in pagination. `starting_after` is a date-time value that defines your place in the list based on `created_at` property from the activity object. For instance, if you make a list request and receive 100 objects, ending with an object created at 2020-05-24T13:43:09.024Z, your subsequent call can include starting_after=2020-05-24T13:43:09.024Z in order to fetch the next page of the list."
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "starting_after_id",
            "description": "By applying this filter value, you will get events starting after an event with the given ID."
          },
          {
            "schema": {
              "enum": [
                "DISCOUNT_COUPONS",
                "REFERRAL_PROGRAM",
                "GIFT_VOUCHERS",
                "PROMOTION",
                "LOYALTY_PROGRAM"
              ],
              "type": "string"
            },
            "in": "query",
            "name": "campaign_type",
            "description": "Through this parameter you can control a type of campaign by which Voucherify will filter related customer's activity. API will return only records related to that given type. Allowed values: DISCOUNT_COUPONS, REFERRAL_PROGRAM, GIFT_VOUCHERS, PROMOTION, LOYALTY_PROGRAM"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "campaign_id",
            "description": "By applying this parameter you request only events related to specific campaign identified by its ID."
          }
        ],
        "description": "This HTTP GET request method gives a possibility to get and filter all customer activities by date or event ID."
      }
    },
    "/orders": {
      "get": {
        "summary": "List Orders",
        "tags": [
          "ORDERS API"
        ],
        "responses": {
          "200": {
            "description": "A dictionary with a data property that contains an array of up to limit orders. Each entry in the array is a separate order object. If no more orders are available, the resulting array will be empty.\n\n"
          }
        },
        "operationId": "get-orders",
        "description": "Returns a list of your orders.\n\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ]
      },
      "post": {
        "summary": "Create Order",
        "operationId": "post-orders",
        "responses": {
          "200": {
            "description": "Returns an order object if the creating succeeded. Returns an error if something goes wrong."
          }
        },
        "tags": [
          "ORDERS API"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "description": "It creates an order object and triggers order creation event."
      }
    },
    "/orders/{order_id}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "order_id",
          "in": "path",
          "required": true,
          "description": "A Voucherify order identifier or source_id"
        }
      ],
      "get": {
        "summary": "Get Order",
        "tags": [
          "ORDERS API"
        ],
        "responses": {
          "200": {
            "description": "Returns an order object if a valid identifier was provided. When requesting the order that has been deleted, resource will not be returned, including a 404 HTTP status code."
          }
        },
        "operationId": "get-orders-order_id",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ]
      },
      "put": {
        "summary": "Update Order",
        "operationId": "put-orders-order_id",
        "responses": {
          "200": {
            "description": "Returns the order object if the update succeeded. Returns an error if update parameters are invalid."
          }
        },
        "tags": [
          "ORDERS API"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ],
        "description": "Updates the specified order by setting the values of the parameters passed. Any parameters not provided will be left unchanged."
      }
    },
    "/orders/export": {
      "post": {
        "summary": "Create Export",
        "operationId": "post-orders-export",
        "responses": {
          "200": {
            "description": "Returns the `id` of the export object and `status` of the file generation process. The `id` is used in the [Download Export]method to generate the url for the downloadable CSV file. The status indicates whether the file has been scheduled for creation."
          }
        },
        "tags": [
          "ORDERS API"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "description": "Creates a downloadable CSV file containing a list of orders.\n\nThe parameters listed in the payload resembles headers in the CSV file. To include a parameter to the file, add it to parameters.fields.\n\nThe available filters are all [order object]attributes. Additionally, any metadata defined in the metadata schema can be downloaded.\n\nPassing an empty JSON will generate a file containing three default fields: `id`, `source_id`, and `status`."
      }
    },
    "/products": {
      "get": {
        "summary": "List Products",
        "tags": [
          "PRODUCTS API"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "operationId": "get-products",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/page"
          }
        ]
      },
      "post": {
        "summary": "Create Product",
        "operationId": "post-products",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "PRODUCTS API"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/products/{product_id}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "product_id",
          "in": "path",
          "required": true,
          "description": "A Voucherify product identifier or source_id"
        }
      ],
      "get": {
        "summary": "Get Product",
        "tags": [
          "PRODUCTS API"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "operationId": "get-products-product_id",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ]
      },
      "put": {
        "summary": "Update Product",
        "operationId": "put-products-product_id",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "PRODUCTS API"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ],
        "description": "",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Product",
        "operationId": "delete-products-product_id",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          },
          {
            "$ref": "#/components/parameters/force"
          }
        ],
        "tags": [
          "PRODUCTS API"
        ]
      }
    },
    "/products/metadata/async": {
      "post": {
        "summary": "Update Products Metadata in bulk",
        "operationId": "post-products-metadata-async",
        "responses": {
          "200": {
            "description": "Returns 202 HTTP status code on success. It informs that your request has been accepted and updates will be added to the repository asynchronously. To learn about operation status and result, copy the async action id from the API response and use [Get Async Action] endpoint."
          }
        },
        "tags": [
          "PRODUCTS API"
        ],
        "description": "Using this endpoint you can update product metadata in asynchronous operation. In one request it is possible to update a maximum of 100 records. In the response body, you get a unique async action identifier. If a requested object was not found then an upsert will happen, which will be shown as { found: false, updated: true } in the get async action request.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          },
          "description": ""
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ]
      }
    },
    "/products/bulk/async": {
      "post": {
        "summary": "Update Products in bulk",
        "operationId": "post-products-bulk-async",
        "responses": {
          "200": {
            "description": "Returns 202 HTTP status code on success. It informs that your request has been accepted and updates will be added to the repository asynchronously. To check operation status and result, copy the async action id from the API response and use [Get Async Action]endpoint."
          }
        },
        "tags": [
          "PRODUCTS API"
        ],
        "description": "Using this endpoint you can update several products in one asynchronous operation. In one request it is possible to update a maximum of 100 records. In the response body, you get a unique async action identifier. If a requested object was not found then an upsert will happen, which will be shown as { found: false, updated: true } in the get async action request.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ]
      }
    },
    "/products/{product_id}/skus": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "product_id",
          "in": "path",
          "required": true,
          "description": "A [Voucherify product] the-product-object unique identifier or product source_id"
        }
      ],
      "get": {
        "summary": "List SKUs",
        "tags": [
          "PRODUCTS API"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "operationId": "get-products-product_id-skus",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ]
      },
      "post": {
        "summary": "Create SKU",
        "operationId": "post-products-product_id-skus",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "PRODUCTS API"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/skus/{sku_id}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "sku_id",
          "in": "path",
          "required": true,
          "description": "A Voucherify SKU identifier or SKU source_id"
        }
      ],
      "get": {
        "summary": "Get SKU",
        "tags": [
          "PRODUCTS API"
        ],
        "responses": {
          "200": {
            "description": "The API returns the requested SKU object with assigned attributes, metadata, and created_at date time."
          }
        },
        "operationId": "get-skus-sku_id",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ]
      }
    },
    "/products/{product_id}/skus/{sku_id}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "product_id",
          "in": "path",
          "required": true,
          "description": "A [Voucherify product]  (the-product-object) unique identifier or product source_id"
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "sku_id",
          "in": "path",
          "required": true,
          "description": "A Voucherify SKU identifier or SKU source_id"
        }
      ],
      "put": {
        "summary": "Update SKU",
        "operationId": "put-products-product_id-skus-sku_id",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "PRODUCTS API"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete SKU",
        "operationId": "delete-products-product_id-skus-sku_id",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "PRODUCTS API"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "force",
            "description": "If this flag is set to true, resource will be removed permanently. It means you will be able to create another object with the same source id."
          }
        ]
      }
    },
    "/product-collections/{product_collection_id}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "product_collection_id",
          "in": "path",
          "required": true,
          "description": "Unique identifier of Product Collection, example id: pc_13hIG3zDvaKrb6feNecV004A"
        }
      ],
      "get": {
        "summary": "Get Product Collection",
        "tags": [
          "PRODUCT COLLECTIONS API"
        ],
        "responses": {
          "200": {
            "description": "Returns a products collection object if a valid identifier was provided in the path.\n\n`id` An internal id corresponding to the products collection object.  \n`name` Indicates the user-defined collection name.  \n`type` Indicates whether the collection is dynamic `AUTO_UPDATE` or static `STATIC`.  \n`products` Returns an array of product objects for a static collection.  \n`filter` Returns filter boundary conditions for a dynamic collection.  \n\nReturns an error if an incorrect `id` is provided in the path."
          }
        },
        "operationId": "get-product-collections-product_collection_id",
        "description": "Retrieves the product collection.",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ]
      },
      "delete": {
        "summary": "Delete Product Collection",
        "operationId": "delete-product-collections-product_collection_id",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "PRODUCT COLLECTIONS API"
        ],
        "description": "Deletes product collection.",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ]
      }
    },
    "/product-collections/{product_collection_id}/products": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "product_collection_id",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "List Products in Collection",
        "tags": [
          "PRODUCT COLLECTIONS API"
        ],
        "responses": {
          "200": {
            "description": "Returns a list object if a valid identifier was provided in the path. The list contains products and/or SKUs grouped in the collection with each product's/SKU's details.\n\nReturns an error if an incorrect `id` is provided in the path."
          }
        },
        "operationId": "get-product-collections-product_collection_id-products",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ],
        "description": "Retrieves list of products from a products collection."
      }
    },
    "/validation-rules": {
      "get": {
        "summary": "List Validation Rules",
        "tags": [
          "VALIDATION RULES API"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "operationId": "get-validation-rules",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ]
      },
      "post": {
        "summary": "Create Validation Rules",
        "operationId": "post-validation-rules",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "VALIDATION RULES API"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/validation-rules/{validation_rule_id}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "validation_rule_id",
          "in": "path",
          "required": true,
          "description": "A unique validation rule identifier"
        }
      ],
      "get": {
        "summary": "Get Validation Rule",
        "tags": [
          "VALIDATION RULES API"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "operationId": "get-validation-rules-validation_rule_id",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ]
      },
      "put": {
        "summary": "Update Validation Rule",
        "operationId": "put-validation-rules-validation_rule_id",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "VALIDATION RULES API"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete Validation Rule",
        "operationId": "delete-validation-rules-validation_rule_id",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "VALIDATION RULES API"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ]
      }
    },
    "/validation-rules/{validation_rule_id}/assignments": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "validation_rule_id",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "List Validation Rule Assignments",
        "tags": [
          "VALIDATION RULES API"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "operationId": "get-validation-rules-validation_rule_id-assignments",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ]
      },
      "post": {
        "summary": "Create Validation Rules Assignments",
        "operationId": "post-validation-rules-validation_rule_id-assignments",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "VALIDATION RULES API"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "description": "Assign validation rule to either one of the object: `voucher`, `campaign` or `promotion_tier`"
      }
    },
    "/validation-rules/{validation_rule_id}/assignments/{assignment_id}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "validation_rule_id",
          "in": "path",
          "required": true,
          "description": "A unique validation rule identifier"
        },
        {
          "schema": {
            "type": "string"
          },
          "name": "assignment_id",
          "in": "path",
          "required": true,
          "description": "A unique validation rule assignment identifier"
        }
      ],
      "get": {
        "summary": "Delete Validation Rule Assignment",
        "tags": [
          "VALIDATION RULES API"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "operationId": "get-validation-rules-validation_rule_id-assignments-assignment_id",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ]
      }
    },
    "/segments": {
      "post": {
        "summary": "Create Segment",
        "operationId": "post-segments",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "SEGMENTS API"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ]
      }
    },
    "/segments/{segment_id}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "segment_id",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get Segment",
        "tags": [
          "SEGMENTS API"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "operationId": "get-segments-segment_id",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ]
      },
      "delete": {
        "summary": "Delete Segment",
        "operationId": "delete-segments-segment_id",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "SEGMENTS API"
        ]
      }
    },
    "/customers/{customer_id}/segments": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "customer_id",
          "in": "path",
          "required": true,
          "description": "Unique identifier of a customer represented by internal customer id or customer source id"
        }
      ],
      "get": {
        "summary": "List Segments",
        "tags": [
          "SEGMENTS API"
        ],
        "responses": {
          "200": {
            "description": "The method returns segment(s) to which the given customer belongs to."
          }
        },
        "operationId": "get-customers-customer_id-segments",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ],
        "description": "Returns the list of segments IDs to which customer belongs to."
      }
    },
    "/events": {
      "post": {
        "summary": "Track Custom Event",
        "operationId": "post-events",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "EVENTS API"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ],
        "description": "To track a custom event, you create an event object. It must be linked to the customer who performs the action. If a customer doesn't exist in Voucherify, the customer will be created.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/eventss": {
      "post": {
        "summary": "Track Custom Event (client-side)",
        "operationId": "post-eventss",
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "description": "To track a custom event, you create an event object. It must be linked to the customer who performs the action. If a customer doesn't exist in Voucherify, the customer will be created.\n\nThis method is accessible through public keys which you can use in client-side​ apps - mobile and web browser apps.\n\n",
        "tags": [
          "EVENTS API"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/X-Client-Application-Id"
          },
          {
            "$ref": "#/components/parameters/X-Client-Token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          }
        }
      }
    },
    "/consents": {
      "get": {
        "summary": "Get Consents",
        "tags": [
          "CONSENTS API"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "operationId": "get-consents",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ],
        "description": "List the Marketing Permission definitions within the project. It returns groups and opt-in consents."
      }
    },
    "/consents#": {
      "get": {
        "summary": "Get Consents (client)",
        "tags": [
          "CONSENTS API"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "operationId": "get-consents#",
        "description": "List the Marketing Permission definitions within the project. It returns groups and opt-in consents.",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-Client-Application-Id"
          },
          {
            "$ref": "#/components/parameters/X-Client-Token"
          }
        ]
      }
    },
    "/async-actions": {
      "get": {
        "summary": "List Async Actions",
        "tags": [
          "ASYNC ACTIONS API"
        ],
        "responses": {
          "200": {
            "description": "In response, you'll get the list of all scheduled async actions and detailed information on each of them.\n\nResponse schema type: object\n\nNote that status DONE doesn't include the result of the completed action. If you need more information about a result, use ID of the respective async action to call Get async actionsref:get-async-actions-1.\n\n{\n    \"object\": \"list\",// string\n    \"data_ref\": \"async_actions\", // string\n    \"async_actions\": [ // [object]\n        {\n            \"id\": \"aa_09414733b84a1ed3c4\", // string, unique id of the async action\n            \"type\": \"CAMPAIGN.VOUCHERS_IMPORT_CSV\", // string, type of async action is different for each endpoint managed via async actions API\n            \"status\": \"DONE\", // string, informs whether the async action is already completed\n            \"created_at\": \"2021-05-18T06:32:44.002Z\", // string, date time of scheduling async action\n            \"object\": \"async_action\" // string\n        }\n    ]\n}"
          }
        },
        "operationId": "get-async-actions",
        "description": "Async actions API lets you track asynchronous operations scheduled in your Projects. Using this endpoint you can list all async actions scheduled in your project.",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          },
          {
            "schema": {
              "type": "integer"
            },
            "in": "query",
            "name": "limit",
            "description": "Optional limit of asynchronous actions that the API returns in response."
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "end_date",
            "description": "Optional parameter that limits results to actions scheduled before the end_date. The date format needs to be consistent with ISO 8601 format (2016-11-16T14:14:31Z or 2016-11-16). An example: `end_date=2021-09-08T13:52:18.227Z`"
          }
        ]
      }
    },
    "/async-actions/{async_action_id}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "async_action_id",
          "in": "path",
          "required": true,
          "description": "Unique ID of the asynchronous operation."
        }
      ],
      "get": {
        "summary": "Get Async Action",
        "tags": [
          "ASYNC ACTIONS API"
        ],
        "responses": {
          "200": {
            "description": "Response provides detailed information about the async action result.\n\nResponse schema type: object\n\nResponse schema:\n{\n    \"id\": \"aa_09414733b84a1ed3c4\", // string, unique ID of async action\n    \"type\": \"CAMPAIGN.VOUCHERS_IMPORT_CSV\", // string, type of async action is different for each endpoints managed via async actions API\n    \"status\": \"DONE\", // string, status informs if the async action is already completed\n    \"result\": { // object, format specific for called async action\n        \"message\": \"1 voucher(s) imported successfully, 0 failed.\", // string, shows how many records were processed successfully and how many failed\n        \"failed\": [] // array, if any records failed during the process, it shows the failure details specific for the given async action (reason, row, code, customer's source id/id) .  \n    },\n    \"created_at\": \"2021-05-18T06:32:44.002Z\", // date time of scheduling async action\n    \"object\": \"async_action\"\n}\n\nResponse with failed Async Action\n\n{\n    \"id\": \"aa_0941a57af5d96ddce7\",\n    \"type\": \"CUSTOMERS.IMPORT_CSV\",\n    \"status\": \"DONE\",\n    \"result\": {\n        \"message\": \"0 customer(s) imported successfully, 1 failed.\",\n        \"failed\": [\n            {\n                \"source_id\": \"test_import_id\",\n                \"row\": 1,\n                \"reason\": \"Invalid phone format\"\n            }\n        ]\n    },\n    \"created_at\": \"2021-05-18T13:24:38.489Z\",\n    \"object\": \"async_action\"\n}"
          }
        },
        "operationId": "get-async-actions-async_action_id",
        "description": "Async actions API lets you track asynchronous operations scheduled in your Projects. Using this endpoint you can check the result of a scheduled asynchronous operation.",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ]
      }
    }
  }
}