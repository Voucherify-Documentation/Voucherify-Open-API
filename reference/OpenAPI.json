{
  "openapi": "3.1.0",
  "info": {
    "title": "Voucherify API",
    "version": "2018-08-01",
    "description": "Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.",
    "contact": {
      "name": "Voucherify Team",
      "url": "https://www.voucherify.io/contact-support",
      "email": "support@voucherify.io"
    },
    "termsOfService": "https://www.voucherify.io/legal/subscription-agreement",
    "license": {
      "name": "MIT",
      "url": "https://github.com/voucherifyio/voucherify-js-sdk/blob/main/LICENSE"
    },
    "summary": "Voucherify is an API-first promotion engine "
  },
  "servers": [
    {
      "url": "https://api.voucherify.io",
      "description": "EU"
    },
    {
      "url": "https://us1.api.voucherify.io",
      "description": "US"
    },
    {
      "description": "AS",
      "url": "https://as1.api.voucherify.io"
    },
    {
      "url": "https://api.voucherify.io/client",
      "description": "Client EU"
    },
    {
      "url": "https://us1.api.voucherify.io/client",
      "description": "Client US"
    },
    {
      "url": "https://as1.api.voucherify.io/client",
      "description": "Client AS"
    },
    {
      "url": "https://api.voucherify.io/v1",
      "description": "Sandbox"
    },
    {
      "url": "https://dev.api.voucherify.io/v1",
      "description": "Development environment"
    }
  ],
  "components": {
    "securitySchemes": {},
    "parameters": {
      "code": {
        "name": "code",
        "in": "path",
        "schema": {
          "type": "string",
          "example": "7fjWdr"
        },
        "description": "A **code** that identifies the voucher.",
        "required": true
      },
      "X-App-Id": {
        "name": "X-App-Id",
        "in": "header",
        "required": true,
        "schema": {
          "type": "string"
        },
        "description": "Application ID"
      },
      "X-App-Token": {
        "name": "X-App-Token",
        "in": "header",
        "required": true,
        "schema": {
          "type": "string"
        },
        "description": "Application Secret Key"
      },
      "X-Client-Token": {
        "name": "X-Client-Token",
        "in": "header",
        "required": true,
        "schema": {
          "type": "string"
        },
        "description": "Application Secret Key"
      },
      "X-Client-Application-Id": {
        "name": "X-Client-Application-Id",
        "in": "header",
        "required": true,
        "schema": {
          "type": "string"
        },
        "description": "Application ID"
      },
      "session_key": {
        "name": "session_key",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "example": "ssn_yQGMTeKBSw8OOuFPwlBEjzGy8d8VA9Ts"
        },
        "description": "A unique session identifier."
      },
      "force": {
        "name": "force",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string"
        },
        "description": "If this flag is set to `true`, the voucher will be removed permanently. It means that afterwards, the user will be able to create the next voucher with the same code."
      },
      "file": {
        "name": "file",
        "in": "header",
        "required": true,
        "schema": {
          "example": "file=@/path/to/vouchers.csv"
        },
        "description": "Path to CSV file."
      },
      "audienceRulesOnly": {
        "name": "audienceRulesOnly",
        "in": "query",
        "required": false,
        "schema": {
          "type": "boolean"
        },
        "description": "This parameter set to true will ask only for verifying vouchers' validation rules only against conditions applied to audiences' attributes (belonging into segment and metadata)"
      },
      "order": {
        "name": "order",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "created_at",
            "-created_at",
            "updated_at",
            "-updated_at"
          ]
        },
        "description": "Sorts the results"
      },
      "limit": {
        "name": "limit",
        "in": "query",
        "required": false,
        "schema": {
          "type": "integer",
          "maximum": 50
        },
        "description": "The number of vouchers to be qualified."
      }
    },
    "schemas": {
      "voucher_object": {
        "title": "VoucherObject",
        "type": "object",
        "description": "This is an object representing a voucher.",
        "examples": [],
        "properties": {
          "id": {
            "type": "string",
            "example": "v_mkZN9v7vjYUadXnHrMza8W5c34fE5KiV",
            "description": "Assigned by the Voucherify API, identifies the voucher."
          },
          "code": {
            "type": "string",
            "example": "WVPblOYX",
            "description": "A code that identifies a voucher. Pattern can use all letters of the English alphabet, Arabic numerals, and special characters."
          },
          "campaign": {
            "type": "string",
            "example": "Gift Card Campaign",
            "description": "A unique campaign name, identifies the voucher's parent campaign.",
            "default": null
          },
          "campaign_id": {
            "type": "string",
            "example": "camp_FNYR4jhqZBM9xTptxDGgeNBV",
            "description": "Assigned by the Voucherify API, identifies the voucher's parent campaign.",
            "default": null
          },
          "category": {
            "type": "string",
            "default": null,
            "description": "Tag defining the category that this voucher belongs to. Useful when listing vouchers using the List Vouchers endpoint."
          },
          "type": {
            "type": "string",
            "enum": [
              "GIFT_VOUCHER",
              "DISCOUNT_VOUCHER",
              "LOYALTY_CARD"
            ],
            "description": "Defines the type of voucher. "
          },
          "discount": {
            "default": null,
            "oneOf": [
              {
                "description": "Amount type",
                "properties": {
                  "type": {
                    "type": "string",
                    "default": "AMOUNT",
                    "description": "Applies an amount discount"
                  },
                  "amount_off": {
                    "type": "integer",
                    "example": 100,
                    "description": "Amount taken off the subtotal of a price. Value is multiplied by 100 to precisely represent 2 decimal places. For example, a $10 discount is written as 1000."
                  },
                  "effect": {
                    "type": "string",
                    "enum": [
                      "APPLY_TO_ORDER",
                      "APPLY_TO_ITEMS",
                      "APPLY_TO_ITEMS_PROPORTIONALLY",
                      "APPLY_TO_ITEMS_PROPORTIONALLY_BY_QUANTITY"
                    ],
                    "description": "Defines how the discount is applied to the customer's order"
                  }
                }
              },
              {
                "description": "Percentage type",
                "properties": {
                  "type": {
                    "type": "string",
                    "default": "PERCENT",
                    "description": "Applies a percentage discount"
                  },
                  "percent_off": {
                    "type": "integer",
                    "example": 10,
                    "description": "Percent taken off the subtotal amount"
                  },
                  "effect": {
                    "type": "string",
                    "enum": [
                      "APPLY_TO_ORDER",
                      "APPLY_TO_ITEMS"
                    ],
                    "description": "Defines how the discount is applied to the customer's order"
                  }
                }
              },
              {
                "description": "Fixed type",
                "properties": {
                  "type": {
                    "type": "string",
                    "default": "FIXED",
                    "description": "Sets a fixed total on cart or item(s) and then calculates the discount to apply"
                  },
                  "effect": {
                    "type": "string",
                    "enum": [
                      "APPLY_TO_ORDER",
                      "APPLY_TO_ITEMS"
                    ],
                    "description": "- **APPLY\\_TO\\_ORDER**: Set fixed total on the whole cart. Discount will be calculated dynamically, based on fixed amount value. For example, if fixed amount is set to equal $10 and order amount equals $25, then the calculated discount will be $15.  \n- **APPLY\\_TO\\_ITEMS**: This type of deal applies a new price for line items. \n  Default rules:\n   - During redemption, prices will change only if the new one is lower than the old one.\n    - If a product price in the collection and the new product price you have set up differs, then the new product price will be passed during the redemption.\n    - When a product is in two collections, we always change the price to the lowest.\n    - The new price for products with several SKUs will force the price change for SKUs if their price is higher than the new price."
                  }
                }
              },
              {
                "description": "Unit type",
                "properties": {
                  "type": {
                    "type": "string",
                    "default": "UNIT",
                    "description": "Applies a full value discount to item(s)"
                  },
                  "unit_off": {
                    "type": "number",
                    "format": "float",
                    "description": "Number of units to subtract from the subtotal"
                  },
                  "unit_type": {
                    "type": "string",
                    "description": "The product deemed as free, chosen from product  inventory (e.g. time, items)"
                  },
                  "effect": {
                    "type": "string",
                    "enum": [
                      "ADD_MISSING_ITEMS",
                      "ADD_NEW_ITEMS"
                    ],
                    "description": "Defines how the unit is added to the customer's order",
                    "default": "ADD_MISSING_ITEMS"
                  }
                }
              },
              {
                "description": "Shipping type",
                "properties": {
                  "type": {
                    "type": "string",
                    "default": "UNIT",
                    "description": "Applies a full value discount to item(s)"
                  },
                  "unit_off": {
                    "type": "number",
                    "format": "float",
                    "description": "Subtracts 1 shipping item from the subtotal",
                    "default": 1
                  },
                  "unit_type": {
                    "type": "string",
                    "description": "The shipping product deemed as free",
                    "default": "prod_5h1pp1ng"
                  },
                  "effect": {
                    "type": "string",
                    "enum": [
                      "ADD_MISSING_ITEMS"
                    ],
                    "description": "Defines how the unit is added to the customer's order",
                    "default": "ADD_MISSING_ITEMS"
                  }
                }
              }
            ],
            "description": "Object representing discount parameters. Child attributes are present only if `type` is `DISCOUNT_VOUCHER`. Defaults to `null`. Type of discount:\n- `AMOUNT`\n- `PERCENT`\n- `UNIT`\n- `FIXED`\n\n A Free Shipping discount is a special instance of the  `UNIT` type discount.",
            "type": "object"
          },
          "gift": {
            "default": null,
            "type": "object",
            "description": "Object representing gift parameters. Child attributes are present only if `type` is `GIFT_VOUCHER`. Defaults to `null`.",
            "properties": {
              "amount": {
                "type": "integer",
                "example": 10000,
                "description": "Total voucher income. Value is multiplied by 100 to precisely represent 2 decimal places. For example, $100 amount is written as 10000."
              },
              "balance": {
                "type": "integer",
                "example": 500,
                "description": "Available funds. Value is multiplied by 100 to precisely represent 2 decimal places. For example, $100 amount is written as 10000."
              },
              "effect": {
                "type": "string",
                "enum": [
                  "APPLY_TO_ORDER",
                  "APPLY_TO_ITEMS"
                ],
                "description": "Defines how the credits are applied to the customer's order"
              }
            }
          },
          "loyalty_card": {
            "default": null,
            "type": "object",
            "description": "Object representing loyalty card parameters. Child attributes are present only if `type` is `LOYALTY_CARD`. Defaults to `null`.",
            "properties": {
              "points": {
                "type": "integer",
                "example": 7000,
                "description": "Total points incurred over lifespan of loyalty card."
              },
              "balance": {
                "type": "integer",
                "example": 6970,
                "description": "Points available for reward redemption."
              }
            }
          },
          "start_date": {
            "type": "string",
            "example": "2021-12-01T00:00:00.000Z",
            "format": "date-time",
            "description": "Activation timestamp in ISO 8601 format. Vouchers are *inactive before* this date."
          },
          "expiration_date": {
            "type": "string",
            "example": "2021-12-31T00:00:00.000Z",
            "format": "date-time",
            "description": "Expiration timestamp in ISO 8601 format.  Vouchers are *inactive after* this date."
          },
          "validity_timeframe": {
            "type": "string",
            "description": "Set recurrent time periods when the voucher is valid",
            "default": null
          },
          "validity_day_of_week": {
            "type": "array",
            "default": null,
            "enum": [
              0,
              1,
              2,
              3,
              4,
              5,
              6
            ],
            "description": "Integer array corresponding to the particular days of the week in which the voucher is valid.\n\n<!-- title: My Table Title -->\n\n| Day of Week | Integer |\n| ----------- | :----: |\n| Sunday      |    0   | \n| Monday      |    1   |\n| Tuesday     |    2   |\n| Wednesday   |    3   |\n| Thursday    |    4   |\n| Friday      |    5   |\n| Saturday    |    6   |\n\n\n- `0`  Sunday  \n- `1`  Monday  \n- `2`  Tuesday  \n- `3`  Wednesday  \n- `4`  Thursday  \n- `5`  Friday  \n- `6`  Saturday  ",
            "items": {
              "type": "integer"
            }
          },
          "active": {
            "type": "boolean",
            "description": "A flag to toggle the voucher on or off. You can disable a voucher even though it's within the active period defined by the `start_date` and `expiration_date`.  \n\n- `true` indicates an *active* voucher\n- `false` indicates an *inactive* voucher"
          },
          "additional_info": {
            "type": "string",
            "default": null,
            "description": "An optional field to keep any extra textual information about the code such as a code description and details."
          },
          "metadata": {
            "type": "object",
            "description": "A set of key/value pairs that you can attach to a voucher object. It can be useful for storing additional information about the voucher in a structured format."
          },
          "assets": {
            "type": "object",
            "description": "Stores links to images of QR and barcode that correspond to an encrypted voucher code.",
            "properties": {
              "qr": {
                "type": "object",
                "description": "Stores Quick Response (QR) representation of encrypted code.",
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "U2FsdGVkX19ucFhvVmBVpVYG5KoswTsjSIaqoKg5L9ie4BK+t4pp7U7oFzjGJzj9q/bmuMOj9mEFiVKDMIkSaruKedMvHbKoPX5Sg+BaZk5QwXMf8k/OzSlOEVybpwSq+AiqPoNtjeuqtIgkDyvT6Q==",
                    "description": "Encrypted voucher code id"
                  },
                  "url": {
                    "type": "string",
                    "example": "https://dev.dl.voucherify.io/api/v1/assets/qr/U2FsdGVkX19ucFhvVmBVpVYG5KoswTsjSIaqoKg5L9ie4BK%2Bt4pp7U7oFzjGJzj9q%2FbmuMOj9mEFiVKDMIkSaruKedMvHbKoPX5Sg%2BBaZk5QwXMf8k%2FOzSlOEVybpwSq%2BAiqPoNtjeuqtIgkDyvT6Q%3D%3D",
                    "description": "URL to QR code  \n\n*Optional:* Attach query parameters to base URL to customize the image of the encrypted voucher code.  \n\n- `size`: integer value from `1` to `100`  \n- `format`: string, either `png` (default) or `svg`"
                  }
                }
              },
              "barcode": {
                "type": "object",
                "description": "Stores barcode representation of encrypted code.",
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "U2FsdGVkX19eJhGfWwUrH9+tulBkON+AnMktic+N6CVWzZ9+fHVxuVx22WakrzxiWXy0skuvvEHSeZIw9HlgyIJ+kJ1iPdUKpyENuNYJKzoZlO0mmTf6WQM6/pFs61apEn9SJx32ttCF6d3oxKISQQ==",
                    "description": "Encrypted voucher code id"
                  },
                  "url": {
                    "type": "string",
                    "example": "https://dev.dl.voucherify.io/api/v1/assets/barcode/U2FsdGVkX19eJhGfWwUrH9%2BtulBkON%2BAnMktic%2BN6CVWzZ9%2BfHVxuVx22WakrzxiWXy0skuvvEHSeZIw9HlgyIJ%2BkJ1iPdUKpyENuNYJKzoZlO0mmTf6WQM6%2FpFs61apEn9SJx32ttCF6d3oxKISQQ%3D%3D",
                    "description": "URL to barcode  \n\n*Optional:* Attach query parameters to base URL to customize the image of the encrypted voucher code.  \n\n- `size`: integer value from `1` to `100`  \n- `format`: string, either `png` (default) or `svg`"
                  }
                }
              }
            }
          },
          "is_referral_code": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "example": "2021-12-22T10:13:06.487Z",
            "description": "Timestamp representing the date and time when the voucher was created in ISO 8601 format.",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "example": "2021-12-22T10:14:45.316Z",
            "format": "date-time",
            "description": "Timestamp representing the date and time when the voucher was last updated in ISO 8601 format."
          },
          "validation_rules_assignments": {
            "type": "object",
            "properties": {
              "object": {
                "type": "string"
              },
              "data_ref": {
                "type": "string"
              },
              "data": {
                "type": "array",
                "items": {}
              },
              "total": {
                "type": "integer"
              }
            }
          },
          "redemption": {
            "type": "object",
            "properties": {
              "quantity": {
                "type": "integer"
              },
              "redeemed_quantity": {
                "type": "integer",
                "example": 1
              },
              "redeemed_amount": {
                "type": "integer",
                "example": 100000
              },
              "object": {
                "type": "string",
                "default": "list"
              },
              "url": {
                "type": "string",
                "example": "/v1/vouchers/WVPblOYX/redemptions?page=1&limit=10"
              }
            }
          },
          "publish": {
            "type": "object",
            "properties": {
              "object": {
                "type": "string",
                "default": "list"
              },
              "count": {
                "type": "integer",
                "example": 0
              },
              "url": {
                "type": "string",
                "example": "/v1/vouchers/WVPblOYX/publications?page=1&limit=10"
              }
            }
          },
          "object": {
            "type": "string",
            "description": "The type of object represented by JSON. Default is `voucher`.",
            "default": "voucher"
          }
        }
      },
      "async_actions": {
        "type": "object",
        "title": "async_actions",
        "description": "Response to bulk update for voucher metadata.",
        "additionalProperties": false,
        "properties": {
          "async_action_id": {
            "type": "string",
            "example": "aa_0a875d56c805df6601"
          }
        }
      },
      "invalid_payload": {
        "description": "Error: Invalid payload",
        "type": "object",
        "x-examples": {
          "example-1": {
            "code": 400,
            "key": "invalid_payload",
            "message": "Invalid payload",
            "details": "Property  should have required property 'metadata'",
            "request_id": "v-0a884c6be8c3756f42"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/error"
          },
          {
            "properties": {
              "code": {
                "type": "integer",
                "example": 400
              },
              "key": {
                "type": "string",
                "example": "not_enough_codes"
              },
              "message": {
                "type": "string",
                "example": "Invalid payload"
              },
              "details": {
                "type": "string",
                "example": "Property  should have required property 'metadata'"
              },
              "request_id": {
                "type": "string",
                "example": "v-0a884c6be8c3756f42"
              }
            }
          }
        ],
        "title": "invalid_payload"
      },
      "not_enough_codes": {
        "description": "Error: Not enough codes",
        "type": "object",
        "x-examples": {
          "example-1": {
            "code": 400,
            "key": "not_enough_codes",
            "message": "Not enough codes",
            "details": "Specify at least 1 code in codes.",
            "request_id": "v-0a885062c80375740f"
          }
        },
        "title": "not_enough_codes",
        "allOf": [
          {
            "$ref": "#/components/schemas/error"
          },
          {
            "properties": {
              "code": {
                "type": "integer",
                "example": 400
              },
              "key": {
                "type": "string",
                "example": "not_enough_codes"
              },
              "message": {
                "type": "string",
                "example": "Not enough codes"
              },
              "details": {
                "type": "string",
                "example": "Specify at least 1 code in codes."
              },
              "request_id": {
                "type": "string",
                "example": "v-0a885062c80375740f"
              }
            }
          }
        ]
      },
      "error": {
        "title": "error",
        "type": "object",
        "properties": {},
        "discriminator": {
          "propertyName": "key",
          "mapping": {
            "not_enough_codes": "not_enough_codes"
          }
        },
        "description": "Short error response",
        "examples": []
      },
      "req_vouchers_metadata_async": {
        "title": "req_vouchers_metadata_async",
        "type": "object",
        "description": "Request body schema for vouchers/metadata/async.",
        "properties": {
          "codes": {
            "type": "array",
            "description": "A string array of voucher codes.",
            "items": {
              "type": "string"
            },
            "example": [
              "PROMO-CODE810",
              "PROMO-CODE726"
            ]
          },
          "metadata": {
            "type": "object",
            "description": "A set of custom key/value pairs.",
            "example": {
              "lang": "en",
              "authorized_internally": true
            }
          }
        },
        "required": [
          "codes",
          "metadata"
        ],
        "x-examples": {
          "example-1": {
            "$ref": "#/components/examples/req_vouchers_metadata_1"
          },
          "example-2": {
            "$ref": "#/components/examples/req_vouchers_metadata_2"
          }
        }
      },
      "earning_rule_object": {
        "description": "This is an object representing an earning rule.",
        "type": "object",
        "x-examples": {
          "example-1": {
            "id": "ern_P6MWOFGsv63sbTaTZBp0IHGK",
            "created_at": "2022-02-02T13:18:32.557Z",
            "updated_at": "2022-02-03T13:09:27.206Z",
            "validation_rule_id": "val_6o0qdvlbh1mt",
            "loyalty": {
              "points": 1000,
              "type": "FIXED"
            },
            "event": "order.paid",
            "source": {
              "banner": "Order paid 1000 points",
              "object_id": "camp_Pfja7X91b1GoyH5wnpzCwlP3",
              "object_type": "campaign"
            },
            "active": true,
            "start_date": "2022-02-02T13:00:00.000Z",
            "expiration_date": "2022-03-03T14:30:00.000Z",
            "validity_timeframe": {
              "duration": "PT1H",
              "interval": "P1D"
            },
            "object": "earning_rule",
            "automation_id": "auto_RVgObANuPToNla8LuD5aT3Zb"
          }
        },
        "title": "EarningRuleObject",
        "properties": {
          "id": {
            "type": "string",
            "example": "ern_P6MWOFGsv63sbTaTZBp0IHGK",
            "description": "Assigned by the Voucherify API, identifies the earning rule object."
          },
          "created_at": {
            "type": "string",
            "description": "Timestamp representing the date and time when the earning rule was created in ISO 8601 format.",
            "example": "2022-02-02T13:18:32.557Z",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "description": "Timestamp representing the date and time when the earning rule was last updated in ISO 8601 format.",
            "example": "2022-02-03T13:09:27.206Z",
            "format": "date-time",
            "default": null
          },
          "validation_rule_id": {
            "type": "string",
            "example": "val_248vs7tUjlIE",
            "description": "A unique validation rule identifier assigned by the Voucherify API. The validation rule is verified before points are added to the balance.",
            "default": null
          },
          "loyalty": {
            "description": "An object that defines the number of points that will be added to a loyalty card and how the points will be added.\n\n- `FIXED` adds a fixed number of `points`\n- `PROPORTIONAL` adds points proportionally based on a pre-defined ratio",
            "oneOf": [
              {
                "description": "Fixed",
                "properties": {
                  "points": {
                    "type": "integer",
                    "description": "The number of points to be added to the loyalty card.",
                    "example": 1000
                  },
                  "type": {
                    "type": "string",
                    "description": "Defines how the points will be added to the loyalty card. `FIXED` adds a fixed number of `points`.",
                    "default": "FIXED"
                  }
                }
              },
              {
                "description": "Proportional",
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "Defines how the points will be added to the loyalty card.`PROPORTIONAL` adds points based on a pre-defined ratio",
                    "default": "PROPORTIONAL"
                  },
                  "order": {
                    "type": "object",
                    "description": "Defines proportion for calculating how many points to add to a loyalty card. The ratio is based on the order amount. For `every` dollar spent, the customer will get this many `points`.  \n",
                    "properties": {
                      "amount": {
                        "type": "object",
                        "description": "Defines the ratio based on the order amount.",
                        "properties": {
                          "every": {
                            "type": "integer",
                            "description": "Order amount. Value is multiplied by 100 to precisely represent 2 decimal places. For example, a $10 order amount is written as 1000."
                          },
                          "points": {
                            "type": "integer",
                            "description": "Number of points awarded."
                          }
                        }
                      }
                    }
                  }
                }
              }
            ],
            "type": "object"
          },
          "custom_event": {
            "type": "object",
            "description": "Contains the schema id of a custom event. **Required** for the custom event option in `event`.",
            "properties": {
              "schema_id": {
                "type": "string",
                "description": "Contains a unique identifier of a custom event schema. Assigned by the Voucherify API."
              }
            }
          },
          "segment": {
            "type": "object",
            "description": "Contains the id of a customer segment. **Required** for the `customer.segment.entered` option in `event`.",
            "properties": {
              "id": {
                "type": "string",
                "description": "Contains a unique identifier of a customer segment. Assigned by the Voucherify API."
              }
            }
          },
          "event": {
            "type": "string",
            "enum": [
              "order.paid",
              "customer.segment.entered",
              "custom_event_defined_in_EVENT_SCHEMA"
            ],
            "description": "Defines the event which triggers the earning rule to add points to a loyalty card.  \n\n- `order.paid` an event defined by the Voucherify API corresponding to an order status `PAID`. Read more here.  \n- `customer.segment.entered` an event defined by the Voucherify API corresponding to a customer entering a pre-defined customer segment. Read more here.  \n- `custom_event_name` the name of a custom event defined in the Dashboard &rarr; **Project Settings** &rarr; **EVENT SCHEMA** &rarr; **Add event definition**. Read more on defining custom events. "
          },
          "source": {
            "type": "object",
            "description": "Contains the custom earning rule name and parent campaign.",
            "properties": {
              "banner": {
                "type": "string",
                "example": "Order Paid - You will get 100 points",
                "description": "Name of the earning rule. This is displayed as a header for the earning rule in the Dashboard."
              },
              "object_id": {
                "type": "string",
                "example": "camp_Pfja7X91b1GoyH5wnpzCwlP3",
                "description": "A unique campaign identifier assigned by the Voucherify API."
              },
              "object_type": {
                "type": "string",
                "default": "campaign",
                "description": "Defines the object associated with the earning rule. Defaults to `campaign`."
              }
            }
          },
          "active": {
            "type": "boolean"
          },
          "start_date": {
            "type": "string",
            "minLength": 1
          },
          "expiration_date": {
            "type": "string",
            "minLength": 1
          },
          "validity_timeframe": {
            "type": "object",
            "required": [
              "duration",
              "interval"
            ],
            "properties": {
              "duration": {
                "type": "string",
                "minLength": 1
              },
              "interval": {
                "type": "string",
                "minLength": 1
              }
            }
          },
          "object": {
            "type": "string",
            "default": "earning_rule",
            "description": "The type of object represented by JSON. Default is `earning_rule`."
          },
          "automation_id": {
            "type": "string",
            "minLength": 1
          }
        },
        "required": [
          "event",
          "active",
          "start_date",
          "expiration_date",
          "validity_timeframe",
          "object",
          "automation_id"
        ]
      }
    },
    "examples": {
      "req_vouchers_metadata_1_test": {
        "summary": "Request Body",
        "description": "Request body to update metadata in bulk *asynchronously*.",
        "value": {
          "codes": [
            "PROMO-CODE810",
            "PROMO-CODE726"
          ],
          "metadata": {
            "lang": "en",
            "authorized_internally": true
          }
        }
      },
      "req_vouchers_metadata_2_test": {
        "summary": "Request Body",
        "description": "Request body to update metadata in bulk *asynchronously*.",
        "value": {
          "codes": [
            "PROMO-CODE810",
            "PROMO-CODE726",
            "PROMO-CODE888"
          ],
          "metadata": {
            "lang": "en",
            "authorized_internally": true
          }
        }
      },
      "req_vouchers_metadata_1": {
        "value": {
          "codes": [
            "PROMO-CODE810",
            "PROMO-CODE726"
          ],
          "metadata": {
            "lang": "en",
            "authorized_internally": true
          }
        }
      },
      "req_vouchers_metadata_2": {
        "value": {
          "codes": [
            "PROMO-CODE810",
            "PROMO-CODE726",
            "PROMO-CODE888"
          ],
          "metadata": {
            "lang": "en",
            "authorized_internally": true
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "VOUCHERS API",
      "description": "Manage discount and gift card vouchers."
    },
    {
      "name": "CAMPAIGNS API",
      "description": "Group vouchers or promotion tiers of a specific type."
    },
    {
      "name": "PROMOTIONS API",
      "description": "Manage promotions."
    },
    {
      "name": "REWARDS API",
      "description": "Manage rewards."
    },
    {
      "name": "DISTRIBUTIONS API",
      "description": "Manage distributions."
    },
    {
      "name": "VALIDATIONS API",
      "description": "Validate vouchers and promotions."
    },
    {
      "name": "REDEMPTIONS API",
      "description": "Manage redemptions."
    },
    {
      "name": "STACKABLE DISCOUNTS API",
      "description": "Manage multiple discounts in one request."
    },
    {
      "name": "LOYALTIES API",
      "description": "Manage loyalty campaign."
    },
    {
      "name": "CUSTOMERS API",
      "description": "Manage customers."
    },
    {
      "name": "ORDERS API",
      "description": "Manage orders."
    },
    {
      "name": "PRODUCTS API",
      "description": "Manage products."
    },
    {
      "name": "PRODUCT COLLECTIONS API",
      "description": "Group products."
    },
    {
      "name": "VALIDATION RULES API",
      "description": "Configure validation rules."
    },
    {
      "name": "SEGMENTS API",
      "description": "Manage customer segments."
    },
    {
      "name": "EVENTS API",
      "description": "Track custom and internal events."
    },
    {
      "name": "CONSENTS API",
      "description": "List marketing opt-in consents."
    },
    {
      "name": "ASYNC ACTIONS API",
      "description": "Track asynchronous operations scheduled in Projects."
    }
  ],
  "paths": {
    "/vouchers/{code}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/code"
        }
      ],
      "get": {
        "summary": "Get Voucher",
        "tags": [
          "VOUCHERS API"
        ],
        "operationId": "get-vouchers-code",
        "description": "Retrieves the voucher with the given `code`.",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          },
          "required": false,
          "description": "Not required."
        }
      },
      "put": {
        "summary": "Update Voucher",
        "tags": [
          "VOUCHERS API"
        ],
        "operationId": "put-vouchers-code",
        "description": "Updates the specified voucher by setting the values of the parameters passed in the request body. Any parameters not provided in the payload will be left unchanged.\n\nYou can modify the following fields:  \n\n- `category`\n- `start_date`\n- `expiration_date`\n- `active`\n- `additional_info`\n- `metadata` \n\nFields other than the ones listed above won't be modified. Even if provided, they will be silently skipped.",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          },
          "required": true
        }
      },
      "delete": {
        "summary": "Delete Voucher",
        "tags": [
          "VOUCHERS API"
        ],
        "operationId": "delete-vouchers-code",
        "description": "Deletes a voucher. This operation cannot be undone. Additionally, this operation immediately removes any redemptions on the voucher.",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          },
          {
            "$ref": "#/components/parameters/force"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          },
          "required": false,
          "description": "Not required."
        }
      },
      "post": {
        "summary": "Create Voucher",
        "tags": [
          "VOUCHERS API"
        ],
        "operationId": "post-vouchers-code",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ],
        "description": "Create a standalone voucher. You can choose from a variety of possible voucher types.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          },
          "required": true
        }
      }
    },
    "/vouchers": {
      "get": {
        "summary": "List Vouchers",
        "tags": [
          "VOUCHERS API"
        ],
        "operationId": "get-vouchers",
        "description": "Returns a list of your vouchers. The vouchers are returned sorted by creation date, with the most recent vouchers appearing first.",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          },
          "required": false,
          "description": "Not required."
        }
      }
    },
    "/vouchers/{code}/enable": {
      "parameters": [
        {
          "$ref": "#/components/parameters/code"
        }
      ],
      "post": {
        "summary": "Enable Voucher",
        "tags": [
          "VOUCHERS API"
        ],
        "operationId": "post-vouchers-code-enable",
        "description": "There are various times when you'll want to manage a voucher's accessibility. This can be done by two API methods for managing the voucher state - *enable* and *disable*.  \n___\nSets voucher state to **active**. The voucher can be redeemed - only if the redemption occurs after the start date and the voucher is not expired.",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          },
          "required": false,
          "description": "Not required."
        }
      }
    },
    "/vouchers/{code}/disable": {
      "parameters": [
        {
          "$ref": "#/components/parameters/code"
        }
      ],
      "post": {
        "summary": "Disable Voucher",
        "tags": [
          "VOUCHERS API"
        ],
        "operationId": "post-vouchers-code-disable",
        "description": "There are various times when you'll want to manage a voucher's accessibility. This can be done by two API methods for managing the voucher state - *enable* and *disable*.  \n___\nSets voucher state to **inactive**. The voucher cannot be redeemed.",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          },
          "required": false,
          "description": "Not required."
        }
      }
    },
    "/vouchers/{code}/balance": {
      "parameters": [
        {
          "$ref": "#/components/parameters/code"
        }
      ],
      "post": {
        "summary": "Add Gift Card Balance",
        "tags": [
          "VOUCHERS API"
        ],
        "operationId": "post-vouchers-code-balance",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ],
        "description": "Add balance to an existing gift card.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          },
          "required": true
        }
      }
    },
    "/vouchers/import": {
      "post": {
        "summary": "Import Vouchers",
        "tags": [
          "VOUCHERS API"
        ],
        "operationId": "post-vouchers-import",
        "description": "Import standalone vouchers and gift cards into the repository.",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          },
          "required": true
        }
      }
    },
    "/vouchers/importCSV": {
      "post": {
        "summary": "Import Vouchers using CSV",
        "tags": [
          "VOUCHERS API"
        ],
        "operationId": "post-vouchers-importCSV",
        "description": "Import standalone vouchers into the repository using a CSV file.\n___\nCurl Example\n```\ncurl -X POST \\\n  https://api.voucherify.io/v1/vouchers/importCSV \\\n  -F file=@/path/to/vouchers.csv \\\n  -H \"X-App-Id: c70a6f00-cf91-4756-9df5-47628850002b\" \\\n  -H \"X-App-Token: 3266b9f8-e246-4f79-bdf0-833929b1380c\"\n```\n\nThe CSV file has to include headers in the first line. All properties that cannot be mapped to standard voucher fields will be added to the metadata object.",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          },
          {
            "$ref": "#/components/parameters/file"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          },
          "required": false,
          "description": "Not required.MAY NEED TO UPDATE THE HEADERS - CAN'T GENERATE A -F with the Spotlight Parameters."
        }
      }
    },
    "/vouchers/qualification": {
      "post": {
        "summary": "Examine Qualification",
        "tags": [
          "VOUCHERS API"
        ],
        "operationId": "post-vouchers-qualification",
        "description": "Display vouchers qualified to the given customer and context (e.g., order, loyalty reward). Checks up to 150 standalone vouchers.\n____\n\n**SIMPLIFY** A checking logic won't run among coupons from bulk unique codes campaigns. For campaigns with multiple unique codes, you should run a [dedicated function](ref:create-qualification-request) for searching for qualified campaigns.\n\nAs a sample use case, you can imagine a requirement of displaying below cart the coupons eligible to a customer. The customer can take and apply the proposed voucher.",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          },
          {
            "$ref": "#/components/parameters/audienceRulesOnly"
          },
          {
            "$ref": "#/components/parameters/order"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          },
          "required": true
        }
      }
    },
    "/vouchers/bulk/async": {
      "post": {
        "summary": "Update Vouchers in bulk",
        "tags": [
          "VOUCHERS API"
        ],
        "operationId": "post-vouchers-bulk-async",
        "description": "Update up to **100 records** in one request.\nUpserts are not supported.  \n\n**NOTE:** Currently only **metadata** updates are supported.",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              },
              "examples": {}
            }
          },
          "required": true
        }
      }
    },
    "/vouchers/metadata/async": {
      "post": {
        "summary": "Update Vouchers' metadata in bulk",
        "tags": [
          "VOUCHERS API"
        ],
        "operationId": "post-vouchers-metadata-async",
        "description": "Update up to **100 records** in one request.\nUpserts are not supported. ",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ],
        "responses": {
          "202": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/async_actions"
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "async_action_id": "aa_0a875d56c805df6601"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "default",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/invalid_payload"
                    },
                    {
                      "$ref": "#/components/schemas/not_enough_codes"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "key"
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/req_vouchers_metadata_async"
              }
            }
          },
          "required": true,
          "description": "Request to update vouchers metadata in bulk."
        }
      }
    },
    "/vouchers/{code}/sessions/{session_key}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/code"
        },
        {
          "$ref": "#/components/parameters/session_key"
        }
      ],
      "delete": {
        "summary": "Release Validation Session",
        "tags": [
          "VOUCHERS API"
        ],
        "operationId": "delete-vouchers-code-sessions-session_key",
        "description": "Manually release a validation session that has been set up for the voucher.",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          },
          "required": false,
          "description": "Not required."
        }
      }
    }
  }
}