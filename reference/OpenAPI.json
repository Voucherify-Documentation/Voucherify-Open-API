{
  "openapi": "3.1.0",
  "info": {
    "title": "Voucherify API",
    "version": "2018-08-01",
    "description": "Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.",
    "contact": {
      "name": "Voucherify Team",
      "url": "https://www.voucherify.io/contact-support",
      "email": "support@voucherify.io"
    },
    "termsOfService": "https://www.voucherify.io/legal/subscription-agreement",
    "license": {
      "name": "MIT",
      "url": "https://github.com/voucherifyio/voucherify-js-sdk/blob/main/LICENSE"
    },
    "summary": "Voucherify is an API-first promotion engine "
  },
  "servers": [
    {
      "url": "https://api.voucherify.io",
      "description": "EU"
    },
    {
      "url": "https://us1.api.voucherify.io",
      "description": "US"
    },
    {
      "description": "AS",
      "url": "https://as1.api.voucherify.io"
    },
    {
      "url": "https://api.voucherify.io/client",
      "description": "Client EU"
    },
    {
      "url": "https://us1.api.voucherify.io/client",
      "description": "Client US"
    },
    {
      "url": "https://as1.api.voucherify.io/client",
      "description": "Client AS"
    },
    {
      "url": "https://api.voucherify.io/v1",
      "description": "Sandbox"
    },
    {
      "url": "https://dev.api.voucherify.io/v1",
      "description": "Development environment"
    }
  ],
  "components": {
    "securitySchemes": {},
    "parameters": {
      "code": {
        "name": "code",
        "in": "path",
        "schema": {
          "type": "string",
          "example": "7fjWdr"
        },
        "description": "A **code** that identifies the voucher.",
        "required": true
      },
      "X-App-Id": {
        "name": "X-App-Id",
        "in": "header",
        "required": true,
        "schema": {
          "type": "string"
        },
        "description": "Application ID"
      },
      "X-App-Token": {
        "name": "X-App-Token",
        "in": "header",
        "required": true,
        "schema": {
          "type": "string"
        },
        "description": "Application Secret Key"
      },
      "X-Client-Token": {
        "name": "X-Client-Token",
        "in": "header",
        "required": true,
        "schema": {
          "type": "string"
        },
        "description": "Application Secret Key"
      },
      "X-Client-Application-Id": {
        "name": "X-Client-Application-Id",
        "in": "header",
        "required": true,
        "schema": {
          "type": "string"
        },
        "description": "Application ID"
      },
      "session_key": {
        "name": "session_key",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string",
          "example": "ssn_yQGMTeKBSw8OOuFPwlBEjzGy8d8VA9Ts"
        },
        "description": "A unique session identifier."
      },
      "force": {
        "name": "force",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string"
        },
        "description": "If this flag is set to `true`, the voucher will be removed permanently. It means that afterwards, the user will be able to create the next voucher with the same code."
      },
      "file": {
        "name": "file",
        "in": "header",
        "required": true,
        "schema": {
          "example": "file=@/path/to/vouchers.csv"
        },
        "description": "Path to CSV file."
      },
      "audienceRulesOnly": {
        "name": "audienceRulesOnly",
        "in": "query",
        "required": false,
        "schema": {
          "type": "boolean"
        },
        "description": "This parameter set to true will ask only for verifying vouchers' validation rules only against conditions applied to audiences' attributes (belonging into segment and metadata)"
      },
      "order": {
        "name": "order",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "created_at",
            "-created_at",
            "updated_at",
            "-updated_at"
          ]
        },
        "description": "Sorts the results"
      },
      "limit": {
        "name": "limit",
        "in": "query",
        "required": false,
        "schema": {
          "type": "integer",
          "maximum": 50
        },
        "description": "The number of vouchers to be qualified."
      }
    },
    "schemas": {
      "voucher_object": {
        "title": "VoucherObject",
        "type": "object",
        "description": "This is an object representing a voucher.",
        "examples": [],
        "properties": {
          "id": {
            "type": "string",
            "example": "v_mkZN9v7vjYUadXnHrMza8W5c34fE5KiV"
          },
          "code": {
            "type": "string",
            "example": "WVPblOYX"
          },
          "campaign": {
            "type": "string",
            "example": "Gift Card Campaign"
          },
          "campaign_id": {
            "type": "string",
            "example": "camp_FNYR4jhqZBM9xTptxDGgeNBV"
          },
          "category": {
            "type": "string",
            "default": null
          },
          "type": {
            "type": "string",
            "enum": [
              "GIFT_VOUCHER",
              "DISCOUNT_VOUCHER",
              "LOYALTY_CARD"
            ]
          },
          "discount": {
            "default": null,
            "oneOf": [
              {
                "description": "Amount type",
                "properties": {
                  "type": {
                    "type": "string",
                    "default": "AMOUNT",
                    "description": "Applies an amount discount"
                  },
                  "amount_off": {
                    "type": "integer",
                    "example": 100,
                    "description": "Amount taken off the subtotal of a price. Value is multiplied by 100 to precisely represent 2 decimal places. For example, A $10 discount is written as 1000."
                  },
                  "effect": {
                    "type": "string",
                    "enum": [
                      "APPLY_TO_ORDER",
                      "APPLY_TO_ITEMS",
                      "APPLY_TO_ITEMS_PROPORTIONALLY",
                      "APPLY_TO_ITEMS_PROPORTIONALLY_BY_QUANTITY"
                    ],
                    "description": "Defines how the discount is applied to the customer's order"
                  }
                }
              },
              {
                "description": "Percentage type",
                "properties": {
                  "type": {
                    "type": "string",
                    "default": "PERCENT",
                    "description": "Applies a percentage discount"
                  },
                  "percent_off": {
                    "type": "integer",
                    "example": 10,
                    "description": "Percent taken off the subtotal amount"
                  },
                  "effect": {
                    "type": "string",
                    "enum": [
                      "APPLY_TO_ORDER",
                      "APPLY_TO_ITEMS"
                    ],
                    "description": "Defines how the discount is applied to the customer's order"
                  }
                }
              },
              {
                "description": "Unit type",
                "properties": {
                  "type": {
                    "type": "string",
                    "default": "UNIT",
                    "description": "Item(s) are automatically discounted at full value"
                  },
                  "unit_off": {
                    "type": "number",
                    "format": "float",
                    "description": "Number of units to subtract from the subtotal"
                  },
                  "unit_type": {
                    "type": "string",
                    "description": "The product deemed as free chosen from product  inventory (e.g. time, items)"
                  },
                  "effect": {
                    "type": "string",
                    "enum": [
                      "ADD_MISSING_ITEMS",
                      "ADD_NEW_ITEMS"
                    ],
                    "description": "Defines how the discount is applied to the customer's order",
                    "default": "ADD_MISSING_ITEMS"
                  }
                }
              },
              {
                "description": "Fixed type",
                "properties": {
                  "type": {
                    "type": "string",
                    "default": "FIXED",
                    "description": "Sets a fixed total on cart or per item(s) and then calculates the discount to apply respectively"
                  },
                  "effect": {
                    "type": "string",
                    "enum": [
                      "APPLY_TO_ORDER",
                      "APPLY_TO_ITEMS"
                    ],
                    "description": "- **APPLY\\_TO\\_ORDER**: Set fixed total on the whole cart. Discount will be calculated dynamically, based on fixed amount value. For example, if fixed amount is set to equal $10 and order amount equals $25, then the calculated discount will be $15.  \n- **APPLY\\_TO\\_ITEMS**: This type of deal applies a new price for line items. \n  Default rules:\n     - During redemption, prices will change only if the new one is lower than the old one.\nIf a product price in the collection and the new product price you have set up differs, then the new product price will be passed during the redemption.\n-  When a product is in two collections, we always change the price for the lowest.\nThe new price for products with several SKUs will force the price change for SKUs if their price is higher than the new price."
                  }
                }
              }
            ],
            "description": "Type of discount:\n- `AMOUNT`\n- `PERCENT`\n- `UNIT`\n- `FIXED`",
            "type": "object"
          },
          "gift": {
            "type": "object",
            "properties": {
              "amount": {
                "type": "integer",
                "example": 10000
              },
              "balance": {
                "type": "integer",
                "example": 0
              },
              "effect": {
                "type": "string",
                "example": "APPLY_TO_ORDER"
              }
            }
          },
          "loyalty_card": {
            "default": null,
            "type": "object",
            "properties": {
              "points": {
                "type": "integer",
                "example": 11000
              },
              "balance": {
                "type": "integer",
                "example": 11000
              }
            }
          },
          "start_date": {
            "type": "string",
            "example": "2021-12-01T00:00:00.000Z"
          },
          "expiration_date": {
            "type": "string",
            "example": "2021-12-31T00:00:00.000Z"
          },
          "validity_timeframe": {
            "type": "string"
          },
          "validity_day_of_week": {
            "type": "string",
            "default": null
          },
          "active": {
            "type": "boolean"
          },
          "additional_info": {
            "type": "string",
            "default": null
          },
          "metadata": {
            "type": "object"
          },
          "assets": {
            "type": "object",
            "properties": {
              "qr": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "U2FsdGVkX19ucFhvVmBVpVYG5KoswTsjSIaqoKg5L9ie4BK+t4pp7U7oFzjGJzj9q/bmuMOj9mEFiVKDMIkSaruKedMvHbKoPX5Sg+BaZk5QwXMf8k/OzSlOEVybpwSq+AiqPoNtjeuqtIgkDyvT6Q=="
                  },
                  "url": {
                    "type": "string",
                    "example": "https://dev.dl.voucherify.io/api/v1/assets/qr/U2FsdGVkX19ucFhvVmBVpVYG5KoswTsjSIaqoKg5L9ie4BK%2Bt4pp7U7oFzjGJzj9q%2FbmuMOj9mEFiVKDMIkSaruKedMvHbKoPX5Sg%2BBaZk5QwXMf8k%2FOzSlOEVybpwSq%2BAiqPoNtjeuqtIgkDyvT6Q%3D%3D"
                  }
                }
              },
              "barcode": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "example": "U2FsdGVkX19eJhGfWwUrH9+tulBkON+AnMktic+N6CVWzZ9+fHVxuVx22WakrzxiWXy0skuvvEHSeZIw9HlgyIJ+kJ1iPdUKpyENuNYJKzoZlO0mmTf6WQM6/pFs61apEn9SJx32ttCF6d3oxKISQQ=="
                  },
                  "url": {
                    "type": "string",
                    "example": "https://dev.dl.voucherify.io/api/v1/assets/barcode/U2FsdGVkX19eJhGfWwUrH9%2BtulBkON%2BAnMktic%2BN6CVWzZ9%2BfHVxuVx22WakrzxiWXy0skuvvEHSeZIw9HlgyIJ%2BkJ1iPdUKpyENuNYJKzoZlO0mmTf6WQM6%2FpFs61apEn9SJx32ttCF6d3oxKISQQ%3D%3D"
                  }
                }
              }
            }
          },
          "is_referral_code": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "example": "2021-12-22T10:13:06.487Z"
          },
          "updated_at": {
            "type": "string",
            "example": "2021-12-22T10:14:45.316Z"
          },
          "validation_rules_assignments": {
            "type": "object",
            "properties": {
              "object": {
                "type": "string"
              },
              "data_ref": {
                "type": "string"
              },
              "data": {
                "type": "array",
                "items": {}
              },
              "total": {
                "type": "integer"
              }
            }
          },
          "redemption": {
            "type": "object",
            "properties": {
              "quantity": {
                "type": "integer"
              },
              "redeemed_quantity": {
                "type": "integer",
                "example": 1
              },
              "redeemed_amount": {
                "type": "integer",
                "example": 100000
              },
              "object": {
                "type": "string",
                "default": "list"
              },
              "url": {
                "type": "string",
                "example": "/v1/vouchers/WVPblOYX/redemptions?page=1&limit=10"
              }
            }
          },
          "publish": {
            "type": "object",
            "properties": {
              "object": {
                "type": "string",
                "default": "list"
              },
              "count": {
                "type": "integer",
                "example": 0
              },
              "url": {
                "type": "string",
                "example": "/v1/vouchers/WVPblOYX/publications?page=1&limit=10"
              }
            }
          },
          "object": {
            "type": "string"
          }
        }
      },
      "async_actions": {
        "type": "object",
        "title": "async_actions",
        "description": "Response to bulk update for voucher metadata.",
        "additionalProperties": false,
        "properties": {
          "async_action_id": {
            "type": "string",
            "example": "aa_0a875d56c805df6601"
          }
        }
      },
      "invalid_payload": {
        "description": "Error: Invalid payload",
        "type": "object",
        "x-examples": {
          "example-1": {
            "code": 400,
            "key": "invalid_payload",
            "message": "Invalid payload",
            "details": "Property  should have required property 'metadata'",
            "request_id": "v-0a884c6be8c3756f42"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/error"
          },
          {
            "properties": {
              "code": {
                "type": "integer",
                "example": 400
              },
              "key": {
                "type": "string",
                "example": "not_enough_codes"
              },
              "message": {
                "type": "string",
                "example": "Invalid payload"
              },
              "details": {
                "type": "string",
                "example": "Property  should have required property 'metadata'"
              },
              "request_id": {
                "type": "string",
                "example": "v-0a884c6be8c3756f42"
              }
            }
          }
        ],
        "title": "invalid_payload"
      },
      "not_enough_codes": {
        "description": "Error: Not enough codes",
        "type": "object",
        "x-examples": {
          "example-1": {
            "code": 400,
            "key": "not_enough_codes",
            "message": "Not enough codes",
            "details": "Specify at least 1 code in codes.",
            "request_id": "v-0a885062c80375740f"
          }
        },
        "title": "not_enough_codes",
        "allOf": [
          {
            "$ref": "#/components/schemas/error"
          },
          {
            "properties": {
              "code": {
                "type": "integer",
                "example": 400
              },
              "key": {
                "type": "string",
                "example": "not_enough_codes"
              },
              "message": {
                "type": "string",
                "example": "Not enough codes"
              },
              "details": {
                "type": "string",
                "example": "Specify at least 1 code in codes."
              },
              "request_id": {
                "type": "string",
                "example": "v-0a885062c80375740f"
              }
            }
          }
        ]
      },
      "error": {
        "title": "error",
        "type": "object",
        "properties": {},
        "discriminator": {
          "propertyName": "key",
          "mapping": {
            "not_enough_codes": "not_enough_codes"
          }
        },
        "description": "Short error response",
        "examples": []
      },
      "req_vouchers_metadata_async": {
        "title": "req_vouchers_metadata_async",
        "type": "object",
        "description": "Request body schema for vouchers/metadata/async.",
        "properties": {
          "codes": {
            "type": "array",
            "description": "A string array of voucher codes.",
            "items": {
              "type": "string"
            },
            "example": [
              "PROMO-CODE810",
              "PROMO-CODE726"
            ]
          },
          "metadata": {
            "type": "object",
            "description": "A set of custom key/value pairs.",
            "example": {
              "lang": "en",
              "authorized_internally": true
            }
          }
        },
        "required": [
          "codes",
          "metadata"
        ],
        "x-examples": {
          "example-1": {
            "$ref": "#/components/examples/req_vouchers_metadata_1"
          },
          "example-2": {
            "$ref": "#/components/examples/req_vouchers_metadata_2"
          }
        }
      }
    },
    "examples": {
      "req_vouchers_metadata_1_test": {
        "summary": "Request Body",
        "description": "Request body to update metadata in bulk *asynchronously*.",
        "value": {
          "codes": [
            "PROMO-CODE810",
            "PROMO-CODE726"
          ],
          "metadata": {
            "lang": "en",
            "authorized_internally": true
          }
        }
      },
      "req_vouchers_metadata_2_test": {
        "summary": "Request Body",
        "description": "Request body to update metadata in bulk *asynchronously*.",
        "value": {
          "codes": [
            "PROMO-CODE810",
            "PROMO-CODE726",
            "PROMO-CODE888"
          ],
          "metadata": {
            "lang": "en",
            "authorized_internally": true
          }
        }
      },
      "req_vouchers_metadata_1": {
        "value": {
          "codes": [
            "PROMO-CODE810",
            "PROMO-CODE726"
          ],
          "metadata": {
            "lang": "en",
            "authorized_internally": true
          }
        }
      },
      "req_vouchers_metadata_2": {
        "value": {
          "codes": [
            "PROMO-CODE810",
            "PROMO-CODE726",
            "PROMO-CODE888"
          ],
          "metadata": {
            "lang": "en",
            "authorized_internally": true
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "VOUCHERS API",
      "description": "Manage discount and gift card vouchers."
    },
    {
      "name": "CAMPAIGNS API",
      "description": "Group vouchers or promotion tiers of a specific type."
    },
    {
      "name": "PROMOTIONS API",
      "description": "Manage promotions."
    },
    {
      "name": "REWARDS API",
      "description": "Manage rewards."
    },
    {
      "name": "DISTRIBUTIONS API",
      "description": "Manage distributions."
    },
    {
      "name": "VALIDATIONS API",
      "description": "Validate vouchers and promotions."
    },
    {
      "name": "REDEMPTIONS API",
      "description": "Manage redemptions."
    },
    {
      "name": "STACKABLE DISCOUNTS API",
      "description": "Manage multiple discounts in one request."
    },
    {
      "name": "LOYALTIES API",
      "description": "Manage loyalty campaign."
    },
    {
      "name": "CUSTOMERS API",
      "description": "Manage customers."
    },
    {
      "name": "ORDERS API",
      "description": "Manage orders."
    },
    {
      "name": "PRODUCTS API",
      "description": "Manage products."
    },
    {
      "name": "PRODUCT COLLECTIONS API",
      "description": "Group products."
    },
    {
      "name": "VALIDATION RULES API",
      "description": "Configure validation rules."
    },
    {
      "name": "SEGMENTS API",
      "description": "Manage customer segments."
    },
    {
      "name": "EVENTS API",
      "description": "Track custom and internal events."
    },
    {
      "name": "CONSENTS API",
      "description": "List marketing opt-in consents."
    },
    {
      "name": "ASYNC ACTIONS API",
      "description": "Track asynchronous operations scheduled in Projects."
    }
  ],
  "paths": {
    "/vouchers/{code}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/code"
        }
      ],
      "get": {
        "summary": "Get Voucher",
        "tags": [
          "VOUCHERS API"
        ],
        "operationId": "get-vouchers-code",
        "description": "Retrieves the voucher with the given `code`.",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          },
          "required": false,
          "description": "Not required."
        }
      },
      "put": {
        "summary": "Update Voucher",
        "tags": [
          "VOUCHERS API"
        ],
        "operationId": "put-vouchers-code",
        "description": "Updates the specified voucher by setting the values of the parameters passed in the request body. Any parameters not provided in the payload will be left unchanged.\n\nYou can modify the following fields:  \n\n- `category`\n- `start_date`\n- `expiration_date`\n- `active`\n- `additional_info`\n- `metadata` \n\nFields other than the ones listed above won't be modified. Even if provided, they will be silently skipped.",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          },
          "required": true
        }
      },
      "delete": {
        "summary": "Delete Voucher",
        "tags": [
          "VOUCHERS API"
        ],
        "operationId": "delete-vouchers-code",
        "description": "Deletes a voucher. This operation cannot be undone. Additionally, this operation immediately removes any redemptions on the voucher.",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          },
          {
            "$ref": "#/components/parameters/force"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          },
          "required": false,
          "description": "Not required."
        }
      },
      "post": {
        "summary": "Create Voucher",
        "tags": [
          "VOUCHERS API"
        ],
        "operationId": "post-vouchers-code",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ],
        "description": "Create a standalone voucher. You can choose from a variety of possible voucher types.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          },
          "required": true
        }
      }
    },
    "/vouchers": {
      "get": {
        "summary": "List Vouchers",
        "tags": [
          "VOUCHERS API"
        ],
        "operationId": "get-vouchers",
        "description": "Returns a list of your vouchers. The vouchers are returned sorted by creation date, with the most recent vouchers appearing first.",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          },
          "required": false,
          "description": "Not required."
        }
      }
    },
    "/vouchers/{code}/enable": {
      "parameters": [
        {
          "$ref": "#/components/parameters/code"
        }
      ],
      "post": {
        "summary": "Enable Voucher",
        "tags": [
          "VOUCHERS API"
        ],
        "operationId": "post-vouchers-code-enable",
        "description": "There are various times when you'll want to manage a voucher's accessibility. This can be done by two API methods for managing the voucher state - *enable* and *disable*.  \n___\nSets voucher state to **active**. The voucher can be redeemed - only if the redemption occurs after the start date and the voucher is not expired.",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          },
          "required": false,
          "description": "Not required."
        }
      }
    },
    "/vouchers/{code}/disable": {
      "parameters": [
        {
          "$ref": "#/components/parameters/code"
        }
      ],
      "post": {
        "summary": "Disable Voucher",
        "tags": [
          "VOUCHERS API"
        ],
        "operationId": "post-vouchers-code-disable",
        "description": "There are various times when you'll want to manage a voucher's accessibility. This can be done by two API methods for managing the voucher state - *enable* and *disable*.  \n___\nSets voucher state to **inactive**. The voucher cannot be redeemed.",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          },
          "required": false,
          "description": "Not required."
        }
      }
    },
    "/vouchers/{code}/balance": {
      "parameters": [
        {
          "$ref": "#/components/parameters/code"
        }
      ],
      "post": {
        "summary": "Add Gift Card Balance",
        "tags": [
          "VOUCHERS API"
        ],
        "operationId": "post-vouchers-code-balance",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ],
        "description": "Add balance to an existing gift card.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          },
          "required": true
        }
      }
    },
    "/vouchers/import": {
      "post": {
        "summary": "Import Vouchers",
        "tags": [
          "VOUCHERS API"
        ],
        "operationId": "post-vouchers-import",
        "description": "Import standalone vouchers and gift cards into the repository.",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          },
          "required": true
        }
      }
    },
    "/vouchers/importCSV": {
      "post": {
        "summary": "Import Vouchers using CSV",
        "tags": [
          "VOUCHERS API"
        ],
        "operationId": "post-vouchers-importCSV",
        "description": "Import standalone vouchers into the repository using a CSV file.\n___\nCurl Example\n```\ncurl -X POST \\\n  https://api.voucherify.io/v1/vouchers/importCSV \\\n  -F file=@/path/to/vouchers.csv \\\n  -H \"X-App-Id: c70a6f00-cf91-4756-9df5-47628850002b\" \\\n  -H \"X-App-Token: 3266b9f8-e246-4f79-bdf0-833929b1380c\"\n```\n\nThe CSV file has to include headers in the first line. All properties that cannot be mapped to standard voucher fields will be added to the metadata object.",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          },
          {
            "$ref": "#/components/parameters/file"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          },
          "required": false,
          "description": "Not required.MAY NEED TO UPDATE THE HEADERS - CAN'T GENERATE A -F with the Spotlight Parameters."
        }
      }
    },
    "/vouchers/qualification": {
      "post": {
        "summary": "Examine Qualification",
        "tags": [
          "VOUCHERS API"
        ],
        "operationId": "post-vouchers-qualification",
        "description": "Display vouchers qualified to the given customer and context (e.g., order, loyalty reward). Checks up to 150 standalone vouchers.\n____\n\n**SIMPLIFY** A checking logic won't run among coupons from bulk unique codes campaigns. For campaigns with multiple unique codes, you should run a [dedicated function](ref:create-qualification-request) for searching for qualified campaigns.\n\nAs a sample use case, you can imagine a requirement of displaying below cart the coupons eligible to a customer. The customer can take and apply the proposed voucher.",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          },
          {
            "$ref": "#/components/parameters/audienceRulesOnly"
          },
          {
            "$ref": "#/components/parameters/order"
          },
          {
            "$ref": "#/components/parameters/limit"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          },
          "required": true
        }
      }
    },
    "/vouchers/bulk/async": {
      "post": {
        "summary": "Update Vouchers in bulk",
        "tags": [
          "VOUCHERS API"
        ],
        "operationId": "post-vouchers-bulk-async",
        "description": "Update up to **100 records** in one request.\nUpserts are not supported.  \n\n**NOTE:** Currently only **metadata** updates are supported.",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              },
              "examples": {}
            }
          },
          "required": true
        }
      }
    },
    "/vouchers/metadata/async": {
      "post": {
        "summary": "Update Vouchers' metadata in bulk",
        "tags": [
          "VOUCHERS API"
        ],
        "operationId": "post-vouchers-metadata-async",
        "description": "Update up to **100 records** in one request.\nUpserts are not supported. ",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ],
        "responses": {
          "202": {
            "description": "Successful response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/async_actions"
                },
                "examples": {
                  "example-1": {
                    "value": {
                      "async_action_id": "aa_0a875d56c805df6601"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "default",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/invalid_payload"
                    },
                    {
                      "$ref": "#/components/schemas/not_enough_codes"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "key"
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/req_vouchers_metadata_async"
              }
            }
          },
          "required": true,
          "description": "Request to update vouchers metadata in bulk."
        }
      }
    },
    "/vouchers/{code}/sessions/{session_key}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/code"
        },
        {
          "$ref": "#/components/parameters/session_key"
        }
      ],
      "delete": {
        "summary": "Release Validation Session",
        "tags": [
          "VOUCHERS API"
        ],
        "operationId": "delete-vouchers-code-sessions-session_key",
        "description": "Manually release a validation session that has been set up for the voucher.",
        "parameters": [
          {
            "$ref": "#/components/parameters/X-App-Id"
          },
          {
            "$ref": "#/components/parameters/X-App-Token"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {}
              }
            }
          },
          "required": false,
          "description": "Not required."
        }
      }
    }
  }
}